
dds6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  00003830  000038c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003830  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000062  00800300  00800300  00003ac4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003ac4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000558  00000000  00000000  00003b60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000993f  00000000  00000000  000040b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fba  00000000  00000000  0000d9f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003141  00000000  00000000  000109b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fe4  00000000  00000000  00013af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bd0  00000000  00000000  00014ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a64  00000000  00000000  000166a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000468  00000000  00000000  0001b10c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e3       	ldi	r30, 0x30	; 48
      7c:	f8 e3       	ldi	r31, 0x38	; 56
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 30       	cpi	r26, 0x00	; 0
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 36       	cpi	r26, 0x62	; 98
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <main>
      9e:	0c 94 16 1c 	jmp	0x382c	; 0x382c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FONT>:
	...
     232:	00 08       	sbc	r0, r0
     234:	08 08       	sbc	r0, r8
     236:	08 08       	sbc	r0, r8
     238:	08 00       	.word	0x0008	; ????
     23a:	08 00       	.word	0x0008	; ????
     23c:	00 00       	nop
     23e:	00 14       	cp	r0, r0
     240:	14 14       	cp	r1, r4
	...
     24a:	00 00       	nop
     24c:	14 14       	cp	r1, r4
     24e:	3e 14       	cp	r3, r14
     250:	3e 14       	cp	r3, r14
     252:	14 00       	.word	0x0014	; ????
     254:	00 00       	nop
     256:	00 00       	nop
     258:	08 3c       	cpi	r16, 0xC8	; 200
     25a:	0a 1c       	adc	r0, r10
     25c:	28 1e       	adc	r2, r24
     25e:	08 00       	.word	0x0008	; ????
     260:	00 00       	nop
     262:	00 00       	nop
     264:	06 26       	eor	r0, r22
     266:	10 08       	sbc	r1, r0
     268:	04 32       	cpi	r16, 0x24	; 36
     26a:	30 00       	.word	0x0030	; ????
     26c:	00 00       	nop
     26e:	00 00       	nop
     270:	1c 02       	muls	r17, r28
     272:	02 04       	cpc	r0, r2
     274:	2a 12       	cpse	r2, r26
     276:	2c 00       	.word	0x002c	; ????
     278:	00 00       	nop
     27a:	00 18       	sub	r0, r0
     27c:	08 04       	cpc	r0, r8
	...
     286:	20 10       	cpse	r2, r0
     288:	10 08       	sbc	r1, r0
     28a:	08 08       	sbc	r0, r8
     28c:	08 08       	sbc	r0, r8
     28e:	10 10       	cpse	r1, r0
     290:	20 00       	.word	0x0020	; ????
     292:	02 04       	cpc	r0, r2
     294:	04 08       	sbc	r0, r4
     296:	08 08       	sbc	r0, r8
     298:	08 08       	sbc	r0, r8
     29a:	04 04       	cpc	r0, r4
     29c:	02 00       	.word	0x0002	; ????
     29e:	00 00       	nop
     2a0:	00 08       	sbc	r0, r0
     2a2:	2a 1c       	adc	r2, r10
     2a4:	2a 08       	sbc	r2, r10
     2a6:	00 00       	nop
     2a8:	00 00       	nop
     2aa:	00 00       	nop
     2ac:	00 08       	sbc	r0, r0
     2ae:	08 3e       	cpi	r16, 0xE8	; 232
     2b0:	08 08       	sbc	r0, r8
	...
     2ba:	00 00       	nop
     2bc:	00 18       	sub	r0, r0
     2be:	18 08       	sbc	r1, r8
     2c0:	04 00       	.word	0x0004	; ????
     2c2:	00 00       	nop
     2c4:	00 00       	nop
     2c6:	00 3e       	cpi	r16, 0xE0	; 224
	...
     2d4:	00 18       	sub	r0, r0
     2d6:	18 00       	.word	0x0018	; ????
     2d8:	00 00       	nop
     2da:	20 20       	and	r2, r0
     2dc:	10 10       	cpse	r1, r0
     2de:	08 08       	sbc	r0, r8
     2e0:	04 04       	cpc	r0, r4
     2e2:	02 02       	muls	r16, r18
     2e4:	00 00       	nop
     2e6:	00 1c       	adc	r0, r0
     2e8:	22 32       	cpi	r18, 0x22	; 34
     2ea:	2a 26       	eor	r2, r26
     2ec:	22 22       	and	r2, r18
     2ee:	1c 00       	.word	0x001c	; ????
     2f0:	00 00       	nop
     2f2:	00 08       	sbc	r0, r0
     2f4:	0c 08       	sbc	r0, r12
     2f6:	08 08       	sbc	r0, r8
     2f8:	08 08       	sbc	r0, r8
     2fa:	08 00       	.word	0x0008	; ????
     2fc:	00 00       	nop
     2fe:	00 1c       	adc	r0, r0
     300:	22 20       	and	r2, r2
     302:	10 08       	sbc	r1, r0
     304:	04 02       	muls	r16, r20
     306:	3e 00       	.word	0x003e	; ????
     308:	00 00       	nop
     30a:	00 1c       	adc	r0, r0
     30c:	22 20       	and	r2, r2
     30e:	18 20       	and	r1, r8
     310:	20 22       	and	r2, r16
     312:	1c 00       	.word	0x001c	; ????
     314:	00 00       	nop
     316:	00 10       	cpse	r0, r0
     318:	18 18       	sub	r1, r8
     31a:	14 14       	cp	r1, r4
     31c:	3e 10       	cpse	r3, r14
     31e:	38 00       	.word	0x0038	; ????
     320:	00 00       	nop
     322:	00 3e       	cpi	r16, 0xE0	; 224
     324:	02 02       	muls	r16, r18
     326:	1e 20       	and	r1, r14
     328:	20 22       	and	r2, r16
     32a:	1c 00       	.word	0x001c	; ????
     32c:	00 00       	nop
     32e:	00 18       	sub	r0, r0
     330:	04 02       	muls	r16, r20
     332:	1e 22       	and	r1, r30
     334:	22 22       	and	r2, r18
     336:	1c 00       	.word	0x001c	; ????
     338:	00 00       	nop
     33a:	00 3e       	cpi	r16, 0xE0	; 224
     33c:	22 20       	and	r2, r2
     33e:	20 10       	cpse	r2, r0
     340:	10 08       	sbc	r1, r0
     342:	08 00       	.word	0x0008	; ????
     344:	00 00       	nop
     346:	00 1c       	adc	r0, r0
     348:	22 22       	and	r2, r18
     34a:	1c 22       	and	r1, r28
     34c:	22 22       	and	r2, r18
     34e:	1c 00       	.word	0x001c	; ????
     350:	00 00       	nop
     352:	00 1c       	adc	r0, r0
     354:	22 22       	and	r2, r18
     356:	22 3c       	cpi	r18, 0xC2	; 194
     358:	20 10       	cpse	r2, r0
     35a:	0c 00       	.word	0x000c	; ????
     35c:	00 00       	nop
     35e:	00 00       	nop
     360:	00 18       	sub	r0, r0
     362:	18 00       	.word	0x0018	; ????
     364:	00 18       	sub	r0, r0
     366:	18 00       	.word	0x0018	; ????
     368:	00 00       	nop
     36a:	00 00       	nop
     36c:	00 18       	sub	r0, r0
     36e:	18 00       	.word	0x0018	; ????
     370:	00 18       	sub	r0, r0
     372:	18 08       	sbc	r1, r8
     374:	04 00       	.word	0x0004	; ????
     376:	00 00       	nop
     378:	00 30       	cpi	r16, 0x00	; 0
     37a:	0c 03       	fmul	r16, r20
     37c:	0c 30       	cpi	r16, 0x0C	; 12
	...
     386:	3e 00       	.word	0x003e	; ????
     388:	3e 00       	.word	0x003e	; ????
     38a:	00 00       	nop
     38c:	00 00       	nop
     38e:	00 00       	nop
     390:	00 03       	mulsu	r16, r16
     392:	0c 30       	cpi	r16, 0x0C	; 12
     394:	0c 03       	fmul	r16, r20
     396:	00 00       	nop
     398:	00 00       	nop
     39a:	00 1c       	adc	r0, r0
     39c:	22 20       	and	r2, r2
     39e:	10 08       	sbc	r1, r0
     3a0:	08 00       	.word	0x0008	; ????
     3a2:	08 00       	.word	0x0008	; ????
     3a4:	00 00       	nop
     3a6:	00 00       	nop
     3a8:	1c 22       	and	r1, r28
     3aa:	3a 3a       	cpi	r19, 0xAA	; 170
     3ac:	1a 02       	muls	r17, r26
     3ae:	1c 00       	.word	0x001c	; ????
     3b0:	00 00       	nop
     3b2:	00 00       	nop
     3b4:	08 14       	cp	r0, r8
     3b6:	22 22       	and	r2, r18
     3b8:	3e 22       	and	r3, r30
     3ba:	22 00       	.word	0x0022	; ????
     3bc:	00 00       	nop
     3be:	00 00       	nop
     3c0:	1e 22       	and	r1, r30
     3c2:	22 1e       	adc	r2, r18
     3c4:	22 22       	and	r2, r18
     3c6:	1e 00       	.word	0x001e	; ????
     3c8:	00 00       	nop
     3ca:	00 00       	nop
     3cc:	1c 22       	and	r1, r28
     3ce:	02 02       	muls	r16, r18
     3d0:	02 22       	and	r0, r18
     3d2:	1c 00       	.word	0x001c	; ????
     3d4:	00 00       	nop
     3d6:	00 00       	nop
     3d8:	0e 12       	cpse	r0, r30
     3da:	22 22       	and	r2, r18
     3dc:	22 12       	cpse	r2, r18
     3de:	0e 00       	.word	0x000e	; ????
     3e0:	00 00       	nop
     3e2:	00 00       	nop
     3e4:	3e 02       	muls	r19, r30
     3e6:	02 1e       	adc	r0, r18
     3e8:	02 02       	muls	r16, r18
     3ea:	3e 00       	.word	0x003e	; ????
     3ec:	00 00       	nop
     3ee:	00 00       	nop
     3f0:	3e 02       	muls	r19, r30
     3f2:	02 1e       	adc	r0, r18
     3f4:	02 02       	muls	r16, r18
     3f6:	02 00       	.word	0x0002	; ????
     3f8:	00 00       	nop
     3fa:	00 00       	nop
     3fc:	1c 22       	and	r1, r28
     3fe:	02 32       	cpi	r16, 0x22	; 34
     400:	22 22       	and	r2, r18
     402:	3c 00       	.word	0x003c	; ????
     404:	00 00       	nop
     406:	00 00       	nop
     408:	22 22       	and	r2, r18
     40a:	22 3e       	cpi	r18, 0xE2	; 226
     40c:	22 22       	and	r2, r18
     40e:	22 00       	.word	0x0022	; ????
     410:	00 00       	nop
     412:	00 00       	nop
     414:	3e 08       	sbc	r3, r14
     416:	08 08       	sbc	r0, r8
     418:	08 08       	sbc	r0, r8
     41a:	3e 00       	.word	0x003e	; ????
     41c:	00 00       	nop
     41e:	00 00       	nop
     420:	38 20       	and	r3, r8
     422:	20 20       	and	r2, r0
     424:	22 22       	and	r2, r18
     426:	1c 00       	.word	0x001c	; ????
     428:	00 00       	nop
     42a:	00 00       	nop
     42c:	22 12       	cpse	r2, r18
     42e:	0a 06       	cpc	r0, r26
     430:	0a 12       	cpse	r0, r26
     432:	22 00       	.word	0x0022	; ????
     434:	00 00       	nop
     436:	00 00       	nop
     438:	02 02       	muls	r16, r18
     43a:	02 02       	muls	r16, r18
     43c:	02 02       	muls	r16, r18
     43e:	3e 00       	.word	0x003e	; ????
     440:	00 00       	nop
     442:	00 00       	nop
     444:	22 36       	cpi	r18, 0x62	; 98
     446:	2a 2a       	or	r2, r26
     448:	22 22       	and	r2, r18
     44a:	22 00       	.word	0x0022	; ????
     44c:	00 00       	nop
     44e:	00 00       	nop
     450:	22 26       	eor	r2, r18
     452:	26 2a       	or	r2, r22
     454:	32 32       	cpi	r19, 0x22	; 34
     456:	22 00       	.word	0x0022	; ????
     458:	00 00       	nop
     45a:	00 00       	nop
     45c:	1c 22       	and	r1, r28
     45e:	22 22       	and	r2, r18
     460:	22 22       	and	r2, r18
     462:	1c 00       	.word	0x001c	; ????
     464:	00 00       	nop
     466:	00 00       	nop
     468:	1e 22       	and	r1, r30
     46a:	22 1e       	adc	r2, r18
     46c:	02 02       	muls	r16, r18
     46e:	02 00       	.word	0x0002	; ????
     470:	00 00       	nop
     472:	00 00       	nop
     474:	1c 22       	and	r1, r28
     476:	22 22       	and	r2, r18
     478:	22 22       	and	r2, r18
     47a:	1c 30       	cpi	r17, 0x0C	; 12
     47c:	00 00       	nop
     47e:	00 00       	nop
     480:	1e 22       	and	r1, r30
     482:	22 1e       	adc	r2, r18
     484:	0a 12       	cpse	r0, r26
     486:	22 00       	.word	0x0022	; ????
     488:	00 00       	nop
     48a:	00 00       	nop
     48c:	1c 22       	and	r1, r28
     48e:	02 1c       	adc	r0, r2
     490:	20 22       	and	r2, r16
     492:	1c 00       	.word	0x001c	; ????
     494:	00 00       	nop
     496:	00 00       	nop
     498:	3e 08       	sbc	r3, r14
     49a:	08 08       	sbc	r0, r8
     49c:	08 08       	sbc	r0, r8
     49e:	08 00       	.word	0x0008	; ????
     4a0:	00 00       	nop
     4a2:	00 00       	nop
     4a4:	22 22       	and	r2, r18
     4a6:	22 22       	and	r2, r18
     4a8:	22 22       	and	r2, r18
     4aa:	1c 00       	.word	0x001c	; ????
     4ac:	00 00       	nop
     4ae:	00 00       	nop
     4b0:	22 22       	and	r2, r18
     4b2:	22 14       	cp	r2, r2
     4b4:	14 08       	sbc	r1, r4
     4b6:	08 00       	.word	0x0008	; ????
     4b8:	00 00       	nop
     4ba:	00 00       	nop
     4bc:	22 22       	and	r2, r18
     4be:	22 2a       	or	r2, r18
     4c0:	2a 36       	cpi	r18, 0x6A	; 106
     4c2:	22 00       	.word	0x0022	; ????
     4c4:	00 00       	nop
     4c6:	00 00       	nop
     4c8:	22 22       	and	r2, r18
     4ca:	14 08       	sbc	r1, r4
     4cc:	14 22       	and	r1, r20
     4ce:	22 00       	.word	0x0022	; ????
     4d0:	00 00       	nop
     4d2:	00 00       	nop
     4d4:	22 22       	and	r2, r18
     4d6:	14 08       	sbc	r1, r4
     4d8:	08 08       	sbc	r0, r8
     4da:	08 00       	.word	0x0008	; ????
     4dc:	00 00       	nop
     4de:	00 00       	nop
     4e0:	3e 20       	and	r3, r14
     4e2:	10 08       	sbc	r1, r0
     4e4:	04 02       	muls	r16, r20
     4e6:	3e 00       	.word	0x003e	; ????
     4e8:	00 00       	nop
     4ea:	38 08       	sbc	r3, r8
     4ec:	08 08       	sbc	r0, r8
     4ee:	08 08       	sbc	r0, r8
     4f0:	08 08       	sbc	r0, r8
     4f2:	08 08       	sbc	r0, r8
     4f4:	38 00       	.word	0x0038	; ????
     4f6:	02 02       	muls	r16, r18
     4f8:	04 04       	cpc	r0, r4
     4fa:	08 08       	sbc	r0, r8
     4fc:	10 10       	cpse	r1, r0
     4fe:	20 20       	and	r2, r0
     500:	00 00       	nop
     502:	0e 08       	sbc	r0, r14
     504:	08 08       	sbc	r0, r8
     506:	08 08       	sbc	r0, r8
     508:	08 08       	sbc	r0, r8
     50a:	08 08       	sbc	r0, r8
     50c:	0e 00       	.word	0x000e	; ????
     50e:	00 08       	sbc	r0, r0
     510:	14 22       	and	r1, r20
	...
     522:	00 3f       	cpi	r16, 0xF0	; 240
     524:	00 00       	nop
     526:	00 0c       	add	r0, r0
     528:	08 10       	cpse	r0, r8
	...
     536:	3c 22       	and	r3, r28
     538:	22 32       	cpi	r18, 0x22	; 34
     53a:	2c 00       	.word	0x002c	; ????
     53c:	00 00       	nop
     53e:	00 02       	muls	r16, r16
     540:	02 02       	muls	r16, r18
     542:	1e 22       	and	r1, r30
     544:	22 22       	and	r2, r18
     546:	1e 00       	.word	0x001e	; ????
     548:	00 00       	nop
     54a:	00 00       	nop
     54c:	00 00       	nop
     54e:	3c 02       	muls	r19, r28
     550:	02 02       	muls	r16, r18
     552:	3c 00       	.word	0x003c	; ????
     554:	00 00       	nop
     556:	00 20       	and	r0, r0
     558:	20 20       	and	r2, r0
     55a:	3c 22       	and	r3, r28
     55c:	22 22       	and	r2, r18
     55e:	3c 00       	.word	0x003c	; ????
     560:	00 00       	nop
     562:	00 00       	nop
     564:	00 00       	nop
     566:	1c 22       	and	r1, r28
     568:	3e 02       	muls	r19, r30
     56a:	1c 00       	.word	0x001c	; ????
     56c:	00 00       	nop
     56e:	00 38       	cpi	r16, 0x80	; 128
     570:	04 04       	cpc	r0, r4
     572:	1e 04       	cpc	r1, r14
     574:	04 04       	cpc	r0, r4
     576:	04 00       	.word	0x0004	; ????
     578:	00 00       	nop
     57a:	00 00       	nop
     57c:	00 00       	nop
     57e:	3c 22       	and	r3, r28
     580:	22 22       	and	r2, r18
     582:	3c 20       	and	r3, r12
     584:	20 1c       	adc	r2, r0
     586:	00 02       	muls	r16, r16
     588:	02 02       	muls	r16, r18
     58a:	1e 22       	and	r1, r30
     58c:	22 22       	and	r2, r18
     58e:	22 00       	.word	0x0022	; ????
     590:	00 00       	nop
     592:	00 08       	sbc	r0, r0
     594:	08 00       	.word	0x0008	; ????
     596:	0c 08       	sbc	r0, r12
     598:	08 08       	sbc	r0, r8
     59a:	1c 00       	.word	0x001c	; ????
     59c:	00 00       	nop
     59e:	00 10       	cpse	r0, r0
     5a0:	10 00       	.word	0x0010	; ????
     5a2:	1c 10       	cpse	r1, r12
     5a4:	10 10       	cpse	r1, r0
     5a6:	10 10       	cpse	r1, r0
     5a8:	10 0e       	add	r1, r16
     5aa:	00 02       	muls	r16, r16
     5ac:	02 02       	muls	r16, r18
     5ae:	12 0a       	sbc	r1, r18
     5b0:	06 0a       	sbc	r0, r22
     5b2:	12 00       	.word	0x0012	; ????
     5b4:	00 00       	nop
     5b6:	00 0c       	add	r0, r0
     5b8:	08 08       	sbc	r0, r8
     5ba:	08 08       	sbc	r0, r8
     5bc:	08 08       	sbc	r0, r8
     5be:	1c 00       	.word	0x001c	; ????
     5c0:	00 00       	nop
     5c2:	00 00       	nop
     5c4:	00 00       	nop
     5c6:	16 2a       	or	r1, r22
     5c8:	2a 2a       	or	r2, r26
     5ca:	22 00       	.word	0x0022	; ????
     5cc:	00 00       	nop
     5ce:	00 00       	nop
     5d0:	00 00       	nop
     5d2:	1a 26       	eor	r1, r26
     5d4:	22 22       	and	r2, r18
     5d6:	22 00       	.word	0x0022	; ????
     5d8:	00 00       	nop
     5da:	00 00       	nop
     5dc:	00 00       	nop
     5de:	1c 22       	and	r1, r28
     5e0:	22 22       	and	r2, r18
     5e2:	1c 00       	.word	0x001c	; ????
     5e4:	00 00       	nop
     5e6:	00 00       	nop
     5e8:	00 00       	nop
     5ea:	1e 22       	and	r1, r30
     5ec:	22 22       	and	r2, r18
     5ee:	1e 02       	muls	r17, r30
     5f0:	02 02       	muls	r16, r18
     5f2:	00 00       	nop
     5f4:	00 00       	nop
     5f6:	3c 22       	and	r3, r28
     5f8:	22 22       	and	r2, r18
     5fa:	3c 20       	and	r3, r12
     5fc:	20 20       	and	r2, r0
     5fe:	00 00       	nop
     600:	00 00       	nop
     602:	1a 06       	cpc	r1, r26
     604:	02 02       	muls	r16, r18
     606:	02 00       	.word	0x0002	; ????
     608:	00 00       	nop
     60a:	00 00       	nop
     60c:	00 00       	nop
     60e:	3c 02       	muls	r19, r28
     610:	1c 20       	and	r1, r12
     612:	1e 00       	.word	0x001e	; ????
     614:	00 00       	nop
     616:	00 08       	sbc	r0, r0
     618:	08 08       	sbc	r0, r8
     61a:	3e 08       	sbc	r3, r14
     61c:	08 08       	sbc	r0, r8
     61e:	30 00       	.word	0x0030	; ????
     620:	00 00       	nop
     622:	00 00       	nop
     624:	00 00       	nop
     626:	22 22       	and	r2, r18
     628:	22 32       	cpi	r18, 0x22	; 34
     62a:	2c 00       	.word	0x002c	; ????
     62c:	00 00       	nop
     62e:	00 00       	nop
     630:	00 00       	nop
     632:	36 14       	cp	r3, r6
     634:	14 08       	sbc	r1, r4
     636:	08 00       	.word	0x0008	; ????
     638:	00 00       	nop
     63a:	00 00       	nop
     63c:	00 00       	nop
     63e:	22 2a       	or	r2, r18
     640:	2a 2a       	or	r2, r26
     642:	14 00       	.word	0x0014	; ????
     644:	00 00       	nop
     646:	00 00       	nop
     648:	00 00       	nop
     64a:	22 14       	cp	r2, r2
     64c:	08 14       	cp	r0, r8
     64e:	22 00       	.word	0x0022	; ????
     650:	00 00       	nop
     652:	00 00       	nop
     654:	00 00       	nop
     656:	22 22       	and	r2, r18
     658:	22 22       	and	r2, r18
     65a:	3c 20       	and	r3, r12
     65c:	20 1c       	adc	r2, r0
     65e:	00 00       	nop
     660:	00 00       	nop
     662:	3e 10       	cpse	r3, r14
     664:	08 04       	cpc	r0, r8
     666:	3e 00       	.word	0x003e	; ????
     668:	00 00       	nop
     66a:	20 10       	cpse	r2, r0
     66c:	10 10       	cpse	r1, r0
     66e:	10 08       	sbc	r1, r0
     670:	10 10       	cpse	r1, r0
     672:	10 10       	cpse	r1, r0
     674:	20 00       	.word	0x0020	; ????
     676:	08 08       	sbc	r0, r8
     678:	08 08       	sbc	r0, r8
     67a:	08 08       	sbc	r0, r8
     67c:	08 08       	sbc	r0, r8
     67e:	08 08       	sbc	r0, r8
     680:	08 00       	.word	0x0008	; ????
     682:	02 04       	cpc	r0, r2
     684:	04 04       	cpc	r0, r4
     686:	04 08       	sbc	r0, r4
     688:	04 04       	cpc	r0, r4
     68a:	04 04       	cpc	r0, r4
     68c:	02 00       	.word	0x0002	; ????
     68e:	00 04       	cpc	r0, r0
     690:	2a 10       	cpse	r2, r10
	...
     69a:	00 00       	nop
     69c:	00 08       	sbc	r0, r0
     69e:	08 14       	cp	r0, r8
     6a0:	14 22       	and	r1, r20
     6a2:	3e 00       	.word	0x003e	; ????
	...

000006a6 <_getPixels>:

;
; c is in r24, buf in r23:r22
;
_getPixels:
	push	r28
     6a6:	cf 93       	push	r28
	push	r29								; save y
     6a8:	df 93       	push	r29
	
	ldi		r25,CHEIGHT
     6aa:	9c e0       	ldi	r25, 0x0C	; 12
	mul		r24,r25						; offs = c * CHAR_HEIGHT, in r1:r0
     6ac:	89 9f       	mul	r24, r25

000006ae <_gp1>:

_gp1:
  ldi   r30,pm_lo8(FONT)    ; z gets address of FONT, pm get the relocatable address
     6ae:	e3 e5       	ldi	r30, 0x53	; 83
  ldi   r31,pm_hi8(FONT)
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
  lsl	r30										; FONT address is a hword address, convert to byte
     6b2:	ee 0f       	add	r30, r30
  rol	r31
     6b4:	ff 1f       	adc	r31, r31
  add   r30,r0             ; z + offs
     6b6:	e0 0d       	add	r30, r0
  adc   r31,r1
     6b8:	f1 1d       	adc	r31, r1

  ldi   r24,CHEIGHT				; number of bytes in char
     6ba:	8c e0       	ldi	r24, 0x0C	; 12
  movw  y,r22								; buf address
     6bc:	eb 01       	movw	r28, r22

000006be <gpix1>:

gpix1:
  lpm   r25,z+
     6be:	95 91       	lpm	r25, Z+
  st    y+,r25
     6c0:	99 93       	st	Y+, r25
  dec   r24
     6c2:	8a 95       	dec	r24
  brne   gpix1
     6c4:	e1 f7       	brne	.-8      	; 0x6be <gpix1>

	clr		r1									; restore r1 to zero
     6c6:	11 24       	eor	r1, r1
	pop		r29
     6c8:	df 91       	pop	r29
	pop		r28
     6ca:	cf 91       	pop	r28

	ret
     6cc:	08 95       	ret

000006ce <_ZN5Clock4tickEv>:

  sei();
}


Clock::~Clock(void) {
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <_ZN5Clock8sysclockE>
     6da:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <_ZN5Clock8sysclockE+0x1>
     6de:	a0 91 3f 03 	lds	r26, 0x033F	; 0x80033f <_ZN5Clock8sysclockE+0x2>
     6e2:	b0 91 40 03 	lds	r27, 0x0340	; 0x800340 <_ZN5Clock8sysclockE+0x3>
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	a1 1d       	adc	r26, r1
     6ea:	b1 1d       	adc	r27, r1
     6ec:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <_ZN5Clock8sysclockE>
     6f0:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <_ZN5Clock8sysclockE+0x1>
     6f4:	a0 93 3f 03 	sts	0x033F, r26	; 0x80033f <_ZN5Clock8sysclockE+0x2>
     6f8:	b0 93 40 03 	sts	0x0340, r27	; 0x800340 <_ZN5Clock8sysclockE+0x3>
     6fc:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <_ZN5Clock9delayTimeE>
     700:	90 91 3a 03 	lds	r25, 0x033A	; 0x80033a <_ZN5Clock9delayTimeE+0x1>
     704:	a0 91 3b 03 	lds	r26, 0x033B	; 0x80033b <_ZN5Clock9delayTimeE+0x2>
     708:	b0 91 3c 03 	lds	r27, 0x033C	; 0x80033c <_ZN5Clock9delayTimeE+0x3>
     70c:	89 2b       	or	r24, r25
     70e:	8a 2b       	or	r24, r26
     710:	8b 2b       	or	r24, r27
     712:	99 f0       	breq	.+38     	; 0x73a <_ZN5Clock4tickEv+0x6c>
     714:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <_ZN5Clock9delayTimeE>
     718:	90 91 3a 03 	lds	r25, 0x033A	; 0x80033a <_ZN5Clock9delayTimeE+0x1>
     71c:	a0 91 3b 03 	lds	r26, 0x033B	; 0x80033b <_ZN5Clock9delayTimeE+0x2>
     720:	b0 91 3c 03 	lds	r27, 0x033C	; 0x80033c <_ZN5Clock9delayTimeE+0x3>
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	a1 09       	sbc	r26, r1
     728:	b1 09       	sbc	r27, r1
     72a:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <_ZN5Clock9delayTimeE>
     72e:	90 93 3a 03 	sts	0x033A, r25	; 0x80033a <_ZN5Clock9delayTimeE+0x1>
     732:	a0 93 3b 03 	sts	0x033B, r26	; 0x80033b <_ZN5Clock9delayTimeE+0x2>
     736:	b0 93 3c 03 	sts	0x033C, r27	; 0x80033c <_ZN5Clock9delayTimeE+0x3>
     73a:	08 e2       	ldi	r16, 0x28	; 40
     73c:	13 e0       	ldi	r17, 0x03	; 3
     73e:	c0 e0       	ldi	r28, 0x00	; 0
     740:	d0 e0       	ldi	r29, 0x00	; 0
     742:	d8 01       	movw	r26, r16
     744:	8d 91       	ld	r24, X+
     746:	9d 91       	ld	r25, X+
     748:	8d 01       	movw	r16, r26
     74a:	00 97       	sbiw	r24, 0x00	; 0
     74c:	e1 f0       	breq	.+56     	; 0x786 <_ZN5Clock4tickEv+0xb8>
     74e:	9e 01       	movw	r18, r28
     750:	22 0f       	add	r18, r18
     752:	33 1f       	adc	r19, r19
     754:	f9 01       	movw	r30, r18
     756:	ec 5f       	subi	r30, 0xFC	; 252
     758:	fc 4f       	sbci	r31, 0xFC	; 252
     75a:	40 81       	ld	r20, Z
     75c:	51 81       	ldd	r21, Z+1	; 0x01
     75e:	41 50       	subi	r20, 0x01	; 1
     760:	51 09       	sbc	r21, r1
     762:	51 83       	std	Z+1, r21	; 0x01
     764:	40 83       	st	Z, r20
     766:	45 2b       	or	r20, r21
     768:	71 f4       	brne	.+28     	; 0x786 <_ZN5Clock4tickEv+0xb8>
     76a:	d9 01       	movw	r26, r18
     76c:	ac 5e       	subi	r26, 0xEC	; 236
     76e:	bc 4f       	sbci	r27, 0xFC	; 252
     770:	2d 91       	ld	r18, X+
     772:	3c 91       	ld	r19, X
     774:	31 83       	std	Z+1, r19	; 0x01
     776:	20 83       	st	Z, r18
     778:	dc 01       	movw	r26, r24
     77a:	ed 91       	ld	r30, X+
     77c:	fc 91       	ld	r31, X
     77e:	01 90       	ld	r0, Z+
     780:	f0 81       	ld	r31, Z
     782:	e0 2d       	mov	r30, r0
     784:	09 95       	icall
     786:	21 96       	adiw	r28, 0x01	; 1
     788:	c8 30       	cpi	r28, 0x08	; 8
     78a:	d1 05       	cpc	r29, r1
     78c:	d1 f6       	brne	.-76     	; 0x742 <_ZN5Clock4tickEv+0x74>
     78e:	04 e2       	ldi	r16, 0x24	; 36
     790:	13 e0       	ldi	r17, 0x03	; 3
     792:	c0 e0       	ldi	r28, 0x00	; 0
     794:	d0 e0       	ldi	r29, 0x00	; 0
     796:	f8 01       	movw	r30, r16
     798:	80 81       	ld	r24, Z
     79a:	91 81       	ldd	r25, Z+1	; 0x01
     79c:	00 97       	sbiw	r24, 0x00	; 0
     79e:	b9 f0       	breq	.+46     	; 0x7ce <_ZN5Clock4tickEv+0x100>
     7a0:	fe 01       	movw	r30, r28
     7a2:	ee 0f       	add	r30, r30
     7a4:	ff 1f       	adc	r31, r31
     7a6:	e0 50       	subi	r30, 0x00	; 0
     7a8:	fd 4f       	sbci	r31, 0xFD	; 253
     7aa:	20 81       	ld	r18, Z
     7ac:	31 81       	ldd	r19, Z+1	; 0x01
     7ae:	21 50       	subi	r18, 0x01	; 1
     7b0:	31 09       	sbc	r19, r1
     7b2:	31 83       	std	Z+1, r19	; 0x01
     7b4:	20 83       	st	Z, r18
     7b6:	23 2b       	or	r18, r19
     7b8:	51 f4       	brne	.+20     	; 0x7ce <_ZN5Clock4tickEv+0x100>
     7ba:	dc 01       	movw	r26, r24
     7bc:	ed 91       	ld	r30, X+
     7be:	fc 91       	ld	r31, X
     7c0:	01 90       	ld	r0, Z+
     7c2:	f0 81       	ld	r31, Z
     7c4:	e0 2d       	mov	r30, r0
     7c6:	09 95       	icall
     7c8:	f8 01       	movw	r30, r16
     7ca:	11 82       	std	Z+1, r1	; 0x01
     7cc:	10 82       	st	Z, r1
     7ce:	21 96       	adiw	r28, 0x01	; 1
     7d0:	0e 5f       	subi	r16, 0xFE	; 254
     7d2:	1f 4f       	sbci	r17, 0xFF	; 255
     7d4:	c2 30       	cpi	r28, 0x02	; 2
     7d6:	d1 05       	cpc	r29, r1
     7d8:	f1 f6       	brne	.-68     	; 0x796 <_ZN5Clock4tickEv+0xc8>
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	08 95       	ret

000007e4 <__vector_7>:
     7e4:	1f 92       	push	r1
     7e6:	0f 92       	push	r0
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	0f 92       	push	r0
     7ec:	11 24       	eor	r1, r1
     7ee:	2f 93       	push	r18
     7f0:	3f 93       	push	r19
     7f2:	4f 93       	push	r20
     7f4:	5f 93       	push	r21
     7f6:	6f 93       	push	r22
     7f8:	7f 93       	push	r23
     7fa:	8f 93       	push	r24
     7fc:	9f 93       	push	r25
     7fe:	af 93       	push	r26
     800:	bf 93       	push	r27
     802:	ef 93       	push	r30
     804:	ff 93       	push	r31
     806:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN5Clock4tickEv>
     80a:	ff 91       	pop	r31
     80c:	ef 91       	pop	r30
     80e:	bf 91       	pop	r27
     810:	af 91       	pop	r26
     812:	9f 91       	pop	r25
     814:	8f 91       	pop	r24
     816:	7f 91       	pop	r23
     818:	6f 91       	pop	r22
     81a:	5f 91       	pop	r21
     81c:	4f 91       	pop	r20
     81e:	3f 91       	pop	r19
     820:	2f 91       	pop	r18
     822:	0f 90       	pop	r0
     824:	0f be       	out	0x3f, r0	; 63
     826:	0f 90       	pop	r0
     828:	1f 90       	pop	r1
     82a:	18 95       	reti

0000082c <_ZN5Clock5delayEm>:
     82c:	60 93 39 03 	sts	0x0339, r22	; 0x800339 <_ZN5Clock9delayTimeE>
     830:	70 93 3a 03 	sts	0x033A, r23	; 0x80033a <_ZN5Clock9delayTimeE+0x1>
     834:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <_ZN5Clock9delayTimeE+0x2>
     838:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <_ZN5Clock9delayTimeE+0x3>
     83c:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <_ZN5Clock9delayTimeE>
     840:	90 91 3a 03 	lds	r25, 0x033A	; 0x80033a <_ZN5Clock9delayTimeE+0x1>
     844:	a0 91 3b 03 	lds	r26, 0x033B	; 0x80033b <_ZN5Clock9delayTimeE+0x2>
     848:	b0 91 3c 03 	lds	r27, 0x033C	; 0x80033c <_ZN5Clock9delayTimeE+0x3>
     84c:	89 2b       	or	r24, r25
     84e:	8a 2b       	or	r24, r26
     850:	8b 2b       	or	r24, r27
     852:	a1 f7       	brne	.-24     	; 0x83c <_ZN5Clock5delayEm+0x10>
     854:	08 95       	ret

00000856 <_ZN5Clock16registerPeriodicEP8Callbackj>:
     856:	e8 e2       	ldi	r30, 0x28	; 40
     858:	f3 e0       	ldi	r31, 0x03	; 3
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	a1 91       	ld	r26, Z+
     860:	b1 91       	ld	r27, Z+
     862:	a9 01       	movw	r20, r18
     864:	4f 5f       	subi	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	ab 2b       	or	r26, r27
     86a:	99 f4       	brne	.+38     	; 0x892 <_ZN5Clock16registerPeriodicEP8Callbackj+0x3c>
     86c:	22 0f       	add	r18, r18
     86e:	33 1f       	adc	r19, r19
     870:	f9 01       	movw	r30, r18
     872:	e8 5d       	subi	r30, 0xD8	; 216
     874:	fc 4f       	sbci	r31, 0xFC	; 252
     876:	91 83       	std	Z+1, r25	; 0x01
     878:	80 83       	st	Z, r24
     87a:	f9 01       	movw	r30, r18
     87c:	ec 5e       	subi	r30, 0xEC	; 236
     87e:	fc 4f       	sbci	r31, 0xFC	; 252
     880:	71 83       	std	Z+1, r23	; 0x01
     882:	60 83       	st	Z, r22
     884:	f9 01       	movw	r30, r18
     886:	ec 5f       	subi	r30, 0xFC	; 252
     888:	fc 4f       	sbci	r31, 0xFC	; 252
     88a:	71 83       	std	Z+1, r23	; 0x01
     88c:	60 83       	st	Z, r22
     88e:	ca 01       	movw	r24, r20
     890:	08 95       	ret
     892:	9a 01       	movw	r18, r20
     894:	48 30       	cpi	r20, 0x08	; 8
     896:	51 05       	cpc	r21, r1
     898:	11 f7       	brne	.-60     	; 0x85e <_ZN5Clock16registerPeriodicEP8Callbackj+0x8>
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	08 95       	ret

000008a0 <_ZN5Clock15registerOneshotEP8Callbackj>:
     8a0:	20 91 24 03 	lds	r18, 0x0324	; 0x800324 <_ZN5Clock11singleTasksE>
     8a4:	30 91 25 03 	lds	r19, 0x0325	; 0x800325 <_ZN5Clock11singleTasksE+0x1>
     8a8:	23 2b       	or	r18, r19
     8aa:	49 f0       	breq	.+18     	; 0x8be <_ZN5Clock15registerOneshotEP8Callbackj+0x1e>
     8ac:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <_ZN5Clock11singleTasksE+0x2>
     8b0:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <_ZN5Clock11singleTasksE+0x3>
     8b4:	23 2b       	or	r18, r19
     8b6:	a9 f4       	brne	.+42     	; 0x8e2 <_ZN5Clock15registerOneshotEP8Callbackj+0x42>
     8b8:	21 e0       	ldi	r18, 0x01	; 1
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <_ZN5Clock15registerOneshotEP8Callbackj+0x22>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	a9 01       	movw	r20, r18
     8c4:	44 0f       	add	r20, r20
     8c6:	55 1f       	adc	r21, r21
     8c8:	fa 01       	movw	r30, r20
     8ca:	ec 5d       	subi	r30, 0xDC	; 220
     8cc:	fc 4f       	sbci	r31, 0xFC	; 252
     8ce:	91 83       	std	Z+1, r25	; 0x01
     8d0:	80 83       	st	Z, r24
     8d2:	fa 01       	movw	r30, r20
     8d4:	e0 50       	subi	r30, 0x00	; 0
     8d6:	fd 4f       	sbci	r31, 0xFD	; 253
     8d8:	71 83       	std	Z+1, r23	; 0x01
     8da:	60 83       	st	Z, r22
     8dc:	c9 01       	movw	r24, r18
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	08 95       	ret
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	08 95       	ret

000008e8 <_ZN5Clock13cancelOneshotEi>:
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	51 f0       	breq	.+20     	; 0x900 <__stack+0x1>
     8ec:	83 30       	cpi	r24, 0x03	; 3
     8ee:	91 05       	cpc	r25, r1
     8f0:	3c f4       	brge	.+14     	; 0x900 <__stack+0x1>
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	fc 01       	movw	r30, r24
     8f8:	ee 5d       	subi	r30, 0xDE	; 222
     8fa:	fc 4f       	sbci	r31, 0xFC	; 252
     8fc:	11 82       	std	Z+1, r1	; 0x01
     8fe:	10 82       	st	Z, r1
     900:	08 95       	ret

00000902 <_ZN5ClockC1Ev>:
     902:	f8 94       	cli
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     90a:	97 e0       	ldi	r25, 0x07	; 7
     90c:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     910:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
     914:	9d e9       	ldi	r25, 0x9D	; 157
     916:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     91a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     91e:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <_ZN5Clock8sysclockE>
     922:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <_ZN5Clock8sysclockE+0x1>
     926:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <_ZN5Clock8sysclockE+0x2>
     92a:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <_ZN5Clock8sysclockE+0x3>
     92e:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <_ZN5Clock5countE>
     932:	e8 e2       	ldi	r30, 0x28	; 40
     934:	f3 e0       	ldi	r31, 0x03	; 3
     936:	11 92       	st	Z+, r1
     938:	11 92       	st	Z+, r1
     93a:	83 e0       	ldi	r24, 0x03	; 3
     93c:	e8 33       	cpi	r30, 0x38	; 56
     93e:	f8 07       	cpc	r31, r24
     940:	d1 f7       	brne	.-12     	; 0x936 <_ZN5ClockC1Ev+0x34>
     942:	e4 e2       	ldi	r30, 0x24	; 36
     944:	f3 e0       	ldi	r31, 0x03	; 3
     946:	84 e3       	ldi	r24, 0x34	; 52
     948:	93 e0       	ldi	r25, 0x03	; 3
     94a:	11 92       	st	Z+, r1
     94c:	11 92       	st	Z+, r1
     94e:	8e 17       	cp	r24, r30
     950:	9f 07       	cpc	r25, r31
     952:	d9 f7       	brne	.-10     	; 0x94a <_ZN5ClockC1Ev+0x48>
     954:	78 94       	sei
     956:	08 95       	ret

00000958 <_Z7usecDlyi>:
}


void usecDly(int x) {
     958:	08 95       	ret

0000095a <DdsInit>:

//
// DDS uses bits PB0 - PB2, PB5
//

void DdsInit(void) {
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	1f 92       	push	r1
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62

volatile uint8_t reg;

	reg = DDRB;
     964:	84 b1       	in	r24, 0x04	; 4
     966:	89 83       	std	Y+1, r24	; 0x01
	reg |= DDS_OUT_BITS;		// set Led pin to output
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	87 62       	ori	r24, 0x27	; 39
     96c:	89 83       	std	Y+1, r24	; 0x01
	DDRB = reg;
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	84 b9       	out	0x04, r24	; 4

	reg = PORTB;
     972:	85 b1       	in	r24, 0x05	; 5
     974:	89 83       	std	Y+1, r24	; 0x01
	reg &= ~DDS_OUT_BITS;		
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	88 7d       	andi	r24, 0xD8	; 216
     97a:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	85 b9       	out	0x05, r24	; 5
	Clock::delay(50);
	reg &= ~DDS_RST;
	PORTB = reg;
#endif

	reg |= W_CLK;
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	81 60       	ori	r24, 0x01	; 1
     984:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	85 b9       	out	0x05, r24	; 5

	reg &= ~ W_CLK;
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	8e 7f       	andi	r24, 0xFE	; 254
     98e:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	85 b9       	out	0x05, r24	; 5

	reg |= FQUD_CLK;     // make sure we are in serial mode
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	82 60       	ori	r24, 0x02	; 2
     998:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	85 b9       	out	0x05, r24	; 5
	
	reg &= ~FQUD_CLK;    
     99e:	89 81       	ldd	r24, Y+1	; 0x01
     9a0:	8d 7f       	andi	r24, 0xFD	; 253
     9a2:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	85 b9       	out	0x05, r24	; 5
	
}
     9a8:	0f 90       	pop	r0
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	08 95       	ret

000009b0 <dds>:
// increment of 0x0E56043B.
// 



void dds(float fout) {
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	1f 92       	push	r1
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
float n;
uint32_t phaseInc;
int i;
volatile uint8_t temp;

	cli();
     9ba:	f8 94       	cli
//
// the ports need to be protected with a semaphore if we
// are going to make this code multi-tasking
//
	temp = PORTB;
     9bc:	25 b1       	in	r18, 0x05	; 5
     9be:	29 83       	std	Y+1, r18	; 0x01
	temp &= ~DDS_OUT_BITS;
     9c0:	29 81       	ldd	r18, Y+1	; 0x01
     9c2:	28 7d       	andi	r18, 0xD8	; 216
     9c4:	29 83       	std	Y+1, r18	; 0x01
	PORTB = temp;
     9c6:	29 81       	ldd	r18, Y+1	; 0x01
     9c8:	25 b9       	out	0x05, r18	; 5

	n = fout * (float)CNTS_PER_HZ;		// phase change per clock
	phaseInc = (uint32_t)n;
     9ca:	2f e5       	ldi	r18, 0x5F	; 95
     9cc:	30 e7       	ldi	r19, 0x70	; 112
     9ce:	49 e0       	ldi	r20, 0x09	; 9
     9d0:	52 e4       	ldi	r21, 0x42	; 66
     9d2:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <__mulsf3>
     9d6:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__fixunssfsi>
     9da:	40 e2       	ldi	r20, 0x20	; 32
     9dc:	50 e0       	ldi	r21, 0x00	; 0

	for (i=0;i<32;i++) {

		if (phaseInc & 0x01) {
			temp |= SD;
     9de:	29 81       	ldd	r18, Y+1	; 0x01
	n = fout * (float)CNTS_PER_HZ;		// phase change per clock
	phaseInc = (uint32_t)n;

	for (i=0;i<32;i++) {

		if (phaseInc & 0x01) {
     9e0:	60 ff       	sbrs	r22, 0
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <dds+0x38>
			temp |= SD;
     9e4:	24 60       	ori	r18, 0x04	; 4
     9e6:	01 c0       	rjmp	.+2      	; 0x9ea <dds+0x3a>
    } else {
			temp &= ~SD;
     9e8:	2b 7f       	andi	r18, 0xFB	; 251
     9ea:	29 83       	std	Y+1, r18	; 0x01
		}            
		PORTB = temp;								// data bit
     9ec:	29 81       	ldd	r18, Y+1	; 0x01
     9ee:	25 b9       	out	0x05, r18	; 5

		temp |= W_CLK;					// set clk
     9f0:	29 81       	ldd	r18, Y+1	; 0x01
     9f2:	21 60       	ori	r18, 0x01	; 1
     9f4:	29 83       	std	Y+1, r18	; 0x01
		PORTB = temp;
     9f6:	29 81       	ldd	r18, Y+1	; 0x01
     9f8:	25 b9       	out	0x05, r18	; 5
		temp &= ~W_CLK;					// clear clk
     9fa:	29 81       	ldd	r18, Y+1	; 0x01
     9fc:	2e 7f       	andi	r18, 0xFE	; 254
     9fe:	29 83       	std	Y+1, r18	; 0x01
		PORTB = temp;	
     a00:	29 81       	ldd	r18, Y+1	; 0x01
     a02:	25 b9       	out	0x05, r18	; 5

		phaseInc = phaseInc >> 1;		// shift next data bit to msb
     a04:	96 95       	lsr	r25
     a06:	87 95       	ror	r24
     a08:	77 95       	ror	r23
     a0a:	67 95       	ror	r22
     a0c:	41 50       	subi	r20, 0x01	; 1
     a0e:	51 09       	sbc	r21, r1
	PORTB = temp;

	n = fout * (float)CNTS_PER_HZ;		// phase change per clock
	phaseInc = (uint32_t)n;

	for (i=0;i<32;i++) {
     a10:	31 f7       	brne	.-52     	; 0x9de <dds+0x2e>
		PORTB = temp;	

		phaseInc = phaseInc >> 1;		// shift next data bit to msb
	}

	temp &= ~SD;
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	8b 7f       	andi	r24, 0xFB	; 251
     a16:	89 83       	std	Y+1, r24	; 0x01
	PORTB = temp;								// data bit
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	85 b9       	out	0x05, r24	; 5
     a1c:	88 e0       	ldi	r24, 0x08	; 8
     a1e:	90 e0       	ldi	r25, 0x00	; 0
	for (i=0;i<8;i++) {
		temp |= W_CLK;					// set clk
     a20:	29 81       	ldd	r18, Y+1	; 0x01
     a22:	21 60       	ori	r18, 0x01	; 1
     a24:	29 83       	std	Y+1, r18	; 0x01
		PORTB = temp;
     a26:	29 81       	ldd	r18, Y+1	; 0x01
     a28:	25 b9       	out	0x05, r18	; 5
		temp &= ~W_CLK;					// clear clk
     a2a:	29 81       	ldd	r18, Y+1	; 0x01
     a2c:	2e 7f       	andi	r18, 0xFE	; 254
     a2e:	29 83       	std	Y+1, r18	; 0x01
		PORTB = temp;
     a30:	29 81       	ldd	r18, Y+1	; 0x01
     a32:	25 b9       	out	0x05, r18	; 5
     a34:	01 97       	sbiw	r24, 0x01	; 1
		phaseInc = phaseInc >> 1;		// shift next data bit to msb
	}

	temp &= ~SD;
	PORTB = temp;								// data bit
	for (i=0;i<8;i++) {
     a36:	a1 f7       	brne	.-24     	; 0xa20 <dds+0x70>
		temp &= ~W_CLK;					// clear clk
		PORTB = temp;

	}

	temp |= FQUD_CLK;            // Load the phase accumulator
     a38:	89 81       	ldd	r24, Y+1	; 0x01
     a3a:	82 60       	ori	r24, 0x02	; 2
     a3c:	89 83       	std	Y+1, r24	; 0x01
	PORTB = temp;
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	85 b9       	out	0x05, r24	; 5

	temp &= ~FQUD_CLK;            // transfer shift reg to phase accumulator
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	8d 7f       	andi	r24, 0xFD	; 253
     a46:	89 83       	std	Y+1, r24	; 0x01
	PORTB = temp;
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	85 b9       	out	0x05, r24	; 5

	sei();
     a4c:	78 94       	sei
}
     a4e:	0f 90       	pop	r0
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	08 95       	ret

00000a56 <_ZN7EncoderC1Ehhh>:
#include "clock.h"
#include "sw.h"
#include "Encoder.h"


Encoder::Encoder(uint8_t a, uint8_t b, uint8_t port) {
     a56:	bf 92       	push	r11
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	ec 01       	movw	r28, r24
     a6a:	b6 2e       	mov	r11, r22
     a6c:	c4 2e       	mov	r12, r20
     a6e:	d2 2e       	mov	r13, r18
     a70:	81 e4       	ldi	r24, 0x41	; 65
     a72:	92 e0       	ldi	r25, 0x02	; 2
     a74:	99 83       	std	Y+1, r25	; 0x01
     a76:	88 83       	st	Y, r24

	eventRate = 4;				// default 4 pulses per cycle
     a78:	04 e0       	ldi	r16, 0x04	; 4
     a7a:	10 e0       	ldi	r17, 0x00	; 0
     a7c:	1e 87       	std	Y+14, r17	; 0x0e
     a7e:	0d 87       	std	Y+13, r16	; 0x0d
	encA = new Sw(a, port);
     a80:	8b e0       	ldi	r24, 0x0B	; 11
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_Znwj>
     a88:	7c 01       	movw	r14, r24
     a8a:	4d 2d       	mov	r20, r13
     a8c:	6b 2d       	mov	r22, r11
     a8e:	0e 94 21 12 	call	0x2442	; 0x2442 <_ZN2SwC1Ehh>
     a92:	fb 82       	std	Y+3, r15	; 0x03
     a94:	ea 82       	std	Y+2, r14	; 0x02
	encB = new Sw(b, port);
     a96:	8b e0       	ldi	r24, 0x0B	; 11
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_Znwj>
     a9e:	7c 01       	movw	r14, r24
     aa0:	4d 2d       	mov	r20, r13
     aa2:	6c 2d       	mov	r22, r12
     aa4:	0e 94 21 12 	call	0x2442	; 0x2442 <_ZN2SwC1Ehh>
     aa8:	fd 82       	std	Y+5, r15	; 0x05
     aaa:	ec 82       	std	Y+4, r14	; 0x04
		
	if (encA->isClosed()) {
     aac:	8a 81       	ldd	r24, Y+2	; 0x02
     aae:	9b 81       	ldd	r25, Y+3	; 0x03
     ab0:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN2Sw8isClosedEv>
     ab4:	2c 81       	ldd	r18, Y+4	; 0x04
     ab6:	3d 81       	ldd	r19, Y+5	; 0x05
     ab8:	88 23       	and	r24, r24
     aba:	69 f0       	breq	.+26     	; 0xad6 <_ZN7EncoderC1Ehhh+0x80>
		if (encB->isClosed()) {
     abc:	c9 01       	movw	r24, r18
     abe:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN2Sw8isClosedEv>
     ac2:	88 23       	and	r24, r24
     ac4:	19 f0       	breq	.+6      	; 0xacc <_ZN7EncoderC1Ehhh+0x76>
			curState = 2;
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <_ZN7EncoderC1Ehhh+0x7a>
			} else {
			curState = 1;
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	9f 83       	std	Y+7, r25	; 0x07
     ad2:	8e 83       	std	Y+6, r24	; 0x06
     ad4:	0a c0       	rjmp	.+20     	; 0xaea <_ZN7EncoderC1Ehhh+0x94>
		}
		} else {
		if (encB->isClosed()) {
     ad6:	c9 01       	movw	r24, r18
     ad8:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN2Sw8isClosedEv>
     adc:	88 23       	and	r24, r24
     ade:	19 f0       	breq	.+6      	; 0xae6 <_ZN7EncoderC1Ehhh+0x90>
			curState = 4;
     ae0:	1f 83       	std	Y+7, r17	; 0x07
     ae2:	0e 83       	std	Y+6, r16	; 0x06
     ae4:	02 c0       	rjmp	.+4      	; 0xaea <_ZN7EncoderC1Ehhh+0x94>
			} else {
			curState = 0;
     ae6:	1f 82       	std	Y+7, r1	; 0x07
     ae8:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	lastEvent = ENC_NO_EVENT;
     aea:	18 86       	std	Y+8, r1	; 0x08
	Clock::registerPeriodic(this,TEN_MSEC);
     aec:	61 e0       	ldi	r22, 0x01	; 1
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	ce 01       	movw	r24, r28
     af2:	0e 94 2b 04 	call	0x856	; 0x856 <_ZN5Clock16registerPeriodicEP8Callbackj>
	missedCwCount = 0;
     af6:	1a 86       	std	Y+10, r1	; 0x0a
     af8:	19 86       	std	Y+9, r1	; 0x09
	missedCcwCount = 0;
     afa:	1c 86       	std	Y+12, r1	; 0x0c
     afc:	1b 86       	std	Y+11, r1	; 0x0b
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	df 90       	pop	r13
     b0c:	cf 90       	pop	r12
     b0e:	bf 90       	pop	r11
     b10:	08 95       	ret

00000b12 <_ZN7Encoder6updateEv>:
// ccw event. 
//
// This algorithm produces 4 events per encoder a/b cycle.  For
// a 2 event case, use only encoder a events/
//
void Encoder::update(void) {
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	ec 01       	movw	r28, r24

	encEvent nxtEvent = ENC_NO_EVENT;

	if ( !encA->hasEvent() && !encB->hasEvent() ){
     b1a:	8a 81       	ldd	r24, Y+2	; 0x02
     b1c:	9b 81       	ldd	r25, Y+3	; 0x03
     b1e:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN2Sw8hasEventEv>
     b22:	81 11       	cpse	r24, r1
     b24:	07 c0       	rjmp	.+14     	; 0xb34 <_ZN7Encoder6updateEv+0x22>
     b26:	8c 81       	ldd	r24, Y+4	; 0x04
     b28:	9d 81       	ldd	r25, Y+5	; 0x05
     b2a:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN2Sw8hasEventEv>
     b2e:	88 23       	and	r24, r24
     b30:	09 f4       	brne	.+2      	; 0xb34 <_ZN7Encoder6updateEv+0x22>
     b32:	5f c0       	rjmp	.+190    	; 0xbf2 <_ZN7Encoder6updateEv+0xe0>
		return;
	}

	if (encA->getEvent() == EV_CLOSE) {
     b34:	8a 81       	ldd	r24, Y+2	; 0x02
     b36:	9b 81       	ldd	r25, Y+3	; 0x03
     b38:	0e 94 87 12 	call	0x250e	; 0x250e <_ZN2Sw8getEventEv>
     b3c:	2c 81       	ldd	r18, Y+4	; 0x04
     b3e:	3d 81       	ldd	r19, Y+5	; 0x05
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	39 f4       	brne	.+14     	; 0xb52 <_ZN7Encoder6updateEv+0x40>
		if (encB->isClosed()) {
     b44:	c9 01       	movw	r24, r18
     b46:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN2Sw8isClosedEv>
     b4a:	81 11       	cpse	r24, r1
     b4c:	1d c0       	rjmp	.+58     	; 0xb88 <_ZN7Encoder6updateEv+0x76>
			nxtEvent = ENC_CCW_EVENT;
		} else {
			nxtEvent = ENC_CW_EVENT;
     b4e:	11 e0       	ldi	r17, 0x01	; 1
     b50:	27 c0       	rjmp	.+78     	; 0xba0 <_ZN7Encoder6updateEv+0x8e>
		}
		 
	} else if ( (encB->getEvent() == EV_CLOSE) && (eventRate == 4))  {
     b52:	c9 01       	movw	r24, r18
     b54:	0e 94 87 12 	call	0x250e	; 0x250e <_ZN2Sw8getEventEv>
     b58:	2a 81       	ldd	r18, Y+2	; 0x02
     b5a:	3b 81       	ldd	r19, Y+3	; 0x03
     b5c:	82 30       	cpi	r24, 0x02	; 2
     b5e:	21 f4       	brne	.+8      	; 0xb68 <_ZN7Encoder6updateEv+0x56>
     b60:	8d 85       	ldd	r24, Y+13	; 0x0d
     b62:	9e 85       	ldd	r25, Y+14	; 0x0e
     b64:	04 97       	sbiw	r24, 0x04	; 4
     b66:	59 f0       	breq	.+22     	; 0xb7e <_ZN7Encoder6updateEv+0x6c>
			nxtEvent = ENC_CW_EVENT;
		} else {
			nxtEvent = ENC_CCW_EVENT;
		}

	} else if ( (encA->getEvent() == EV_OPEN) && (eventRate != 1)) {
     b68:	c9 01       	movw	r24, r18
     b6a:	0e 94 87 12 	call	0x250e	; 0x250e <_ZN2Sw8getEventEv>
     b6e:	2c 81       	ldd	r18, Y+4	; 0x04
     b70:	3d 81       	ldd	r19, Y+5	; 0x05
     b72:	81 30       	cpi	r24, 0x01	; 1
     b74:	59 f4       	brne	.+22     	; 0xb8c <_ZN7Encoder6updateEv+0x7a>
     b76:	8d 85       	ldd	r24, Y+13	; 0x0d
     b78:	9e 85       	ldd	r25, Y+14	; 0x0e
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	39 f0       	breq	.+14     	; 0xb8c <_ZN7Encoder6updateEv+0x7a>
		if (encB->isClosed()) {
     b7e:	c9 01       	movw	r24, r18
     b80:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN2Sw8isClosedEv>
     b84:	81 11       	cpse	r24, r1
     b86:	e3 cf       	rjmp	.-58     	; 0xb4e <_ZN7Encoder6updateEv+0x3c>
		 
	} else if ( (encB->getEvent() == EV_CLOSE) && (eventRate == 4))  {
		if (encA->isClosed()) {
			nxtEvent = ENC_CW_EVENT;
		} else {
			nxtEvent = ENC_CCW_EVENT;
     b88:	12 e0       	ldi	r17, 0x02	; 2
     b8a:	0a c0       	rjmp	.+20     	; 0xba0 <_ZN7Encoder6updateEv+0x8e>
			nxtEvent = ENC_CW_EVENT;
		} else {
			nxtEvent = ENC_CCW_EVENT;
		}

	} else if ( (encB->getEvent() == EV_OPEN) && (eventRate == 4) ) {
     b8c:	c9 01       	movw	r24, r18
     b8e:	0e 94 87 12 	call	0x250e	; 0x250e <_ZN2Sw8getEventEv>
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	21 f4       	brne	.+8      	; 0xb9e <_ZN7Encoder6updateEv+0x8c>
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	04 97       	sbiw	r24, 0x04	; 4
     b9c:	39 f1       	breq	.+78     	; 0xbec <_ZN7Encoder6updateEv+0xda>
// This algorithm produces 4 events per encoder a/b cycle.  For
// a 2 event case, use only encoder a events/
//
void Encoder::update(void) {

	encEvent nxtEvent = ENC_NO_EVENT;
     b9e:	10 e0       	ldi	r17, 0x00	; 0
			nxtEvent = ENC_CW_EVENT;
		}

	}

	encA->clearEvent();
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	9b 81       	ldd	r25, Y+3	; 0x03
     ba4:	0e 94 8a 12 	call	0x2514	; 0x2514 <_ZN2Sw10clearEventEv>
	encB->clearEvent();
     ba8:	8c 81       	ldd	r24, Y+4	; 0x04
     baa:	9d 81       	ldd	r25, Y+5	; 0x05
     bac:	0e 94 8a 12 	call	0x2514	; 0x2514 <_ZN2Sw10clearEventEv>

	//
	// process new event if any
	//
	if (nxtEvent == ENC_NO_EVENT) {
     bb0:	11 23       	and	r17, r17
     bb2:	f9 f0       	breq	.+62     	; 0xbf2 <_ZN7Encoder6updateEv+0xe0>
     bb4:	88 85       	ldd	r24, Y+8	; 0x08
		return;
	} else if (nxtEvent == ENC_CW_EVENT) {		// handle overrun
     bb6:	11 30       	cpi	r17, 0x01	; 1
     bb8:	61 f4       	brne	.+24     	; 0xbd2 <_ZN7Encoder6updateEv+0xc0>
		if (nxtEvent == lastEvent) {
     bba:	81 30       	cpi	r24, 0x01	; 1
     bbc:	31 f4       	brne	.+12     	; 0xbca <_ZN7Encoder6updateEv+0xb8>
			missedCwCount++;
     bbe:	89 85       	ldd	r24, Y+9	; 0x09
     bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	9a 87       	std	Y+10, r25	; 0x0a
     bc6:	89 87       	std	Y+9, r24	; 0x09
     bc8:	14 c0       	rjmp	.+40     	; 0xbf2 <_ZN7Encoder6updateEv+0xe0>
		} else {
			missedCwCount = 0;
     bca:	1a 86       	std	Y+10, r1	; 0x0a
     bcc:	19 86       	std	Y+9, r1	; 0x09
			lastEvent = nxtEvent;
     bce:	18 87       	std	Y+8, r17	; 0x08
     bd0:	10 c0       	rjmp	.+32     	; 0xbf2 <_ZN7Encoder6updateEv+0xe0>
		}
	} else {
		if (nxtEvent == lastEvent) {
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	31 f4       	brne	.+12     	; 0xbe2 <_ZN7Encoder6updateEv+0xd0>
			missedCcwCount++;
     bd6:	8b 85       	ldd	r24, Y+11	; 0x0b
     bd8:	9c 85       	ldd	r25, Y+12	; 0x0c
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	9c 87       	std	Y+12, r25	; 0x0c
     bde:	8b 87       	std	Y+11, r24	; 0x0b
     be0:	08 c0       	rjmp	.+16     	; 0xbf2 <_ZN7Encoder6updateEv+0xe0>
		} else {
			missedCcwCount = 0;
     be2:	1c 86       	std	Y+12, r1	; 0x0c
     be4:	1b 86       	std	Y+11, r1	; 0x0b
			lastEvent = nxtEvent;
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	88 87       	std	Y+8, r24	; 0x08
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <_ZN7Encoder6updateEv+0xe0>
		} else {
			nxtEvent = ENC_CCW_EVENT;
		}

	} else if ( (encB->getEvent() == EV_OPEN) && (eventRate == 4) ) {
		if (encA->isClosed()) {
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	9b 81       	ldd	r25, Y+3	; 0x03
     bf0:	aa cf       	rjmp	.-172    	; 0xb46 <_ZN7Encoder6updateEv+0x34>
		} else {
			missedCcwCount = 0;
			lastEvent = nxtEvent;
		}
	}
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	08 95       	ret

00000bfa <_ZN7Encoder8callbackEv>:
	lastEvent = ENC_NO_EVENT;
}


void Encoder::callback(void) {
	update();
     bfa:	0c 94 89 05 	jmp	0xb12	; 0xb12 <_ZN7Encoder6updateEv>

00000bfe <_ZN7Encoder8hasEventEv>:
}



bool Encoder::hasEvent(void) {
	return (lastEvent != ENC_NO_EVENT);
     bfe:	21 e0       	ldi	r18, 0x01	; 1
     c00:	fc 01       	movw	r30, r24
     c02:	80 85       	ldd	r24, Z+8	; 0x08
     c04:	81 11       	cpse	r24, r1
     c06:	01 c0       	rjmp	.+2      	; 0xc0a <_ZN7Encoder8hasEventEv+0xc>
     c08:	20 e0       	ldi	r18, 0x00	; 0
}
     c0a:	82 2f       	mov	r24, r18
     c0c:	08 95       	ret

00000c0e <_ZN7Encoder8getEventEv>:


encEvent Encoder::getEvent(void) {
	return lastEvent;
}
     c0e:	fc 01       	movw	r30, r24
     c10:	80 85       	ldd	r24, Z+8	; 0x08
     c12:	08 95       	ret

00000c14 <_ZN7Encoder10clearEventEv>:


void Encoder::clearEvent(void) {
	lastEvent = ENC_NO_EVENT;
     c14:	fc 01       	movw	r30, r24
     c16:	10 86       	std	Z+8, r1	; 0x08
     c18:	08 95       	ret

00000c1a <_ZN7Encoder16getMissedCwCountEv>:
void Encoder::callback(void) {
	update();
}


int Encoder::getMissedCwCount(void) {
     c1a:	fc 01       	movw	r30, r24
	int result = missedCwCount;
     c1c:	81 85       	ldd	r24, Z+9	; 0x09
     c1e:	92 85       	ldd	r25, Z+10	; 0x0a
	missedCwCount = 0;
     c20:	12 86       	std	Z+10, r1	; 0x0a
     c22:	11 86       	std	Z+9, r1	; 0x09
	return result;
}
     c24:	08 95       	ret

00000c26 <_ZN7Encoder17getMissedCcwCountEv>:


int Encoder::getMissedCcwCount(void) {
     c26:	fc 01       	movw	r30, r24
	int result = missedCcwCount;
     c28:	83 85       	ldd	r24, Z+11	; 0x0b
     c2a:	94 85       	ldd	r25, Z+12	; 0x0c
	missedCcwCount = 0;
     c2c:	14 86       	std	Z+12, r1	; 0x0c
     c2e:	13 86       	std	Z+11, r1	; 0x0b
	return result;
}
     c30:	08 95       	ret

00000c32 <_ZN7Encoder12setEventRateEh>:

void Encoder::setEventRate(uint8_t r) {
	eventRate = r;
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	fc 01       	movw	r30, r24
     c36:	76 87       	std	Z+14, r23	; 0x0e
     c38:	65 87       	std	Z+13, r22	; 0x0d
     c3a:	08 95       	ret

00000c3c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>:
 Draw character c at pixel position (y, x) with foreground color fc,
 *  background color bc, 
 *  node = 1 interpret y,x as a text line, col; 
 *       = 0 interpret y,x as a pixel line, col
 */
void Graphics::draw2xChar(char cc, uint8_t line, uint8_t col, pixColor fc, pixColor bc) {
     c3c:	8f 92       	push	r8
     c3e:	9f 92       	push	r9
     c40:	af 92       	push	r10
     c42:	bf 92       	push	r11
     c44:	cf 92       	push	r12
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	ec 97       	sbiw	r28, 0x3c	; 60
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
     c62:	96 2e       	mov	r9, r22
     c64:	14 2f       	mov	r17, r20

  ys = line;
  xs = col;
  ye = ys + (2*CHAR_HEIGHT) - 1;
  xe = xs + (2*CHAR_WIDTH) -1; 
  cli();
     c66:	f8 94       	cli
  buf[0] = (xs >> 8) & 0xff;
     c68:	19 82       	std	Y+1, r1	; 0x01
  buf[1] = (xs & 0xff);
     c6a:	2a 83       	std	Y+2, r18	; 0x02
  buf[2] = (xe >> 8) & 0xff;
     c6c:	1b 82       	std	Y+3, r1	; 0x03
  buf[3] = (xe & 0xff);
     c6e:	21 5f       	subi	r18, 0xF1	; 241
     c70:	2c 83       	std	Y+4, r18	; 0x04
  sendCmd(CMD_COL_ADDR_SET);
     c72:	8a e2       	ldi	r24, 0x2A	; 42
     c74:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3Lcd7sendCmdEh>
  sendData(buf, 4);
     c78:	64 e0       	ldi	r22, 0x04	; 4
     c7a:	ce 01       	movw	r24, r28
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN3Lcd8sendDataEPhh>
  cmpltCmd();
     c82:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN3Lcd8cmpltCmdEv>
  
  buf[0] = (ys >> 8) & 0xff;
     c86:	19 82       	std	Y+1, r1	; 0x01
  buf[1] = (ys & 0xff);
     c88:	1a 83       	std	Y+2, r17	; 0x02
  buf[2] = (ye >> 8) & 0xff;
     c8a:	1b 82       	std	Y+3, r1	; 0x03
  buf[3] = (ye & 0xff);
     c8c:	19 5e       	subi	r17, 0xE9	; 233
     c8e:	1c 83       	std	Y+4, r17	; 0x04
  sendCmd(CMD_ROW_ADDR_SET);
     c90:	8b e2       	ldi	r24, 0x2B	; 43
     c92:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3Lcd7sendCmdEh>
  sendData(buf, 4);
     c96:	64 e0       	ldi	r22, 0x04	; 4
     c98:	ce 01       	movw	r24, r28
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN3Lcd8sendDataEPhh>
  cmpltCmd();
     ca0:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN3Lcd8cmpltCmdEv>

  _getPixels(cc, pixBuf); 
     ca4:	be 01       	movw	r22, r28
     ca6:	6f 5c       	subi	r22, 0xCF	; 207
     ca8:	7f 4f       	sbci	r23, 0xFF	; 255
     caa:	89 2d       	mov	r24, r9
     cac:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_getPixels>

  sendCmd(CMD_MEM_WRITE);
     cb0:	8c e2       	ldi	r24, 0x2C	; 44
     cb2:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3Lcd7sendCmdEh>
  
  for (int i=0; i< CHAR_HEIGHT*2; i++) {
     cb6:	81 2c       	mov	r8, r1
     cb8:	91 2c       	mov	r9, r1
    bufIndx = 0;
    uint8_t pixels = pixBuf[i/2];
     cba:	f4 01       	movw	r30, r8
     cbc:	f5 95       	asr	r31
     cbe:	e7 95       	ror	r30
     cc0:	81 e3       	ldi	r24, 0x31	; 49
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	8c 0f       	add	r24, r28
     cc6:	9d 1f       	adc	r25, r29
     cc8:	e8 0f       	add	r30, r24
     cca:	f9 1f       	adc	r31, r25
     ccc:	90 81       	ld	r25, Z
     cce:	fe 01       	movw	r30, r28
     cd0:	31 96       	adiw	r30, 0x01	; 1
     cd2:	86 e0       	ldi	r24, 0x06	; 6
    for (int j=0; j< CHAR_WIDTH; j++) {
      if (pixels & 0x01) {                // font table assumes right to left scan 
     cd4:	90 ff       	sbrs	r25, 0
     cd6:	07 c0       	rjmp	.+14     	; 0xce6 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0xaa>
        buf[bufIndx++] = fc.r;
     cd8:	e0 82       	st	Z, r14
        buf[bufIndx++] = fc.g;
     cda:	f1 82       	std	Z+1, r15	; 0x01
        buf[bufIndx++] = fc.b;
     cdc:	02 83       	std	Z+2, r16	; 0x02
        buf[bufIndx++] = fc.r;
     cde:	e3 82       	std	Z+3, r14	; 0x03
        buf[bufIndx++] = fc.g;
     ce0:	f4 82       	std	Z+4, r15	; 0x04
        buf[bufIndx++] = fc.b;
     ce2:	05 83       	std	Z+5, r16	; 0x05
     ce4:	06 c0       	rjmp	.+12     	; 0xcf2 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0xb6>

      } else {
        buf[bufIndx++] = bc.r;
     ce6:	a0 82       	st	Z, r10
        buf[bufIndx++] = bc.g;
     ce8:	b1 82       	std	Z+1, r11	; 0x01
        buf[bufIndx++] = bc.b;
     cea:	c2 82       	std	Z+2, r12	; 0x02
        buf[bufIndx++] = bc.r;
     cec:	a3 82       	std	Z+3, r10	; 0x03
        buf[bufIndx++] = bc.g;
     cee:	b4 82       	std	Z+4, r11	; 0x04
        buf[bufIndx++] = bc.b;
     cf0:	c5 82       	std	Z+5, r12	; 0x05
      }
      pixels >>= 1;   
     cf2:	96 95       	lsr	r25
     cf4:	8a 5f       	subi	r24, 0xFA	; 250
     cf6:	36 96       	adiw	r30, 0x06	; 6
  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< CHAR_HEIGHT*2; i++) {
    bufIndx = 0;
    uint8_t pixels = pixBuf[i/2];
    for (int j=0; j< CHAR_WIDTH; j++) {
     cf8:	86 33       	cpi	r24, 0x36	; 54
     cfa:	61 f7       	brne	.-40     	; 0xcd4 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x98>
        buf[bufIndx++] = bc.g;
        buf[bufIndx++] = bc.b;
      }
      pixels >>= 1;   
    }
    sendData(buf,bufIndx);
     cfc:	60 e3       	ldi	r22, 0x30	; 48
     cfe:	ce 01       	movw	r24, r28
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN3Lcd8sendDataEPhh>

  _getPixels(cc, pixBuf); 

  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< CHAR_HEIGHT*2; i++) {
     d06:	9f ef       	ldi	r25, 0xFF	; 255
     d08:	89 1a       	sub	r8, r25
     d0a:	99 0a       	sbc	r9, r25
     d0c:	88 e1       	ldi	r24, 0x18	; 24
     d0e:	88 16       	cp	r8, r24
     d10:	91 04       	cpc	r9, r1
     d12:	99 f6       	brne	.-90     	; 0xcba <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x7e>
      }
      pixels >>= 1;   
    }
    sendData(buf,bufIndx);
  }
  cmpltCmd();
     d14:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN3Lcd8cmpltCmdEv>
  sei();
     d18:	78 94       	sei
}
     d1a:	ec 96       	adiw	r28, 0x3c	; 60
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	cf 90       	pop	r12
     d34:	bf 90       	pop	r11
     d36:	af 90       	pop	r10
     d38:	9f 90       	pop	r9
     d3a:	8f 90       	pop	r8
     d3c:	08 95       	ret

00000d3e <_ZN5keyer8callbackEv>:


//
// called from interrupt by the timer
//
void keyer::callback(void) {
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	ec 01       	movw	r28, r24
	switch (state) {
     d44:	8a 85       	ldd	r24, Y+10	; 0x0a
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	09 f4       	brne	.+2      	; 0xd4c <_ZN5keyer8callbackEv+0xe>
     d4a:	4d c0       	rjmp	.+154    	; 0xde6 <_ZN5keyer8callbackEv+0xa8>
     d4c:	38 f4       	brcc	.+14     	; 0xd5c <_ZN5keyer8callbackEv+0x1e>
     d4e:	88 23       	and	r24, r24
     d50:	61 f0       	breq	.+24     	; 0xd6a <_ZN5keyer8callbackEv+0x2c>
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	09 f0       	breq	.+2      	; 0xd58 <_ZN5keyer8callbackEv+0x1a>
     d56:	68 c0       	rjmp	.+208    	; 0xe28 <_ZN5keyer8callbackEv+0xea>
				dash->clearEvent();					
			}
			break;

			case 1:
				state = 2;
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	53 c0       	rjmp	.+166    	; 0xe02 <_ZN5keyer8callbackEv+0xc4>

//
// called from interrupt by the timer
//
void keyer::callback(void) {
	switch (state) {
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	09 f4       	brne	.+2      	; 0xd62 <_ZN5keyer8callbackEv+0x24>
     d60:	4f c0       	rjmp	.+158    	; 0xe00 <_ZN5keyer8callbackEv+0xc2>
     d62:	84 30       	cpi	r24, 0x04	; 4
     d64:	09 f4       	brne	.+2      	; 0xd68 <_ZN5keyer8callbackEv+0x2a>
     d66:	53 c0       	rjmp	.+166    	; 0xe0e <_ZN5keyer8callbackEv+0xd0>
     d68:	5f c0       	rjmp	.+190    	; 0xe28 <_ZN5keyer8callbackEv+0xea>
		case 0:
			if (dot->hasEvent()) {
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	9b 81       	ldd	r25, Y+3	; 0x03
     d6e:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN2Sw8hasEventEv>
     d72:	88 23       	and	r24, r24
     d74:	a9 f0       	breq	.+42     	; 0xda0 <_ZN5keyer8callbackEv+0x62>
				if (dot->getEvent() == EV_CLOSE) {
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	9b 81       	ldd	r25, Y+3	; 0x03
     d7a:	0e 94 87 12 	call	0x250e	; 0x250e <_ZN2Sw8getEventEv>
     d7e:	2b 85       	ldd	r18, Y+11	; 0x0b
     d80:	3c 85       	ldd	r19, Y+12	; 0x0c
     d82:	82 30       	cpi	r24, 0x02	; 2
     d84:	59 f4       	brne	.+22     	; 0xd9c <_ZN5keyer8callbackEv+0x5e>
					rly->selectTx();
     d86:	c9 01       	movw	r24, r18
     d88:	0e 94 df 11 	call	0x23be	; 0x23be <_ZN5relay8selectTxEv>
					state = 1;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	8a 87       	std	Y+10, r24	; 0x0a
					Timer::startTimer(this, dot_time);
     d90:	68 85       	ldd	r22, Y+8	; 0x08
     d92:	79 85       	ldd	r23, Y+9	; 0x09
     d94:	ce 01       	movw	r24, r28
     d96:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN5Timer10startTimerEP8Callbackj>
     d9a:	4b c0       	rjmp	.+150    	; 0xe32 <_ZN5keyer8callbackEv+0xf4>
				} else {
					rly->selectRx();				
     d9c:	c9 01       	movw	r24, r18
     d9e:	47 c0       	rjmp	.+142    	; 0xe2e <_ZN5keyer8callbackEv+0xf0>
				}
				dot->clearEvent();
				dash->clearEvent();

			} else if (dash->hasEvent()) {
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN2Sw8hasEventEv>
     da8:	88 23       	and	r24, r24
     daa:	09 f4       	brne	.+2      	; 0xdae <_ZN5keyer8callbackEv+0x70>
     dac:	7d c0       	rjmp	.+250    	; 0xea8 <_ZN5keyer8callbackEv+0x16a>
				if (dash->getEvent() == EV_CLOSE) {
     dae:	8c 81       	ldd	r24, Y+4	; 0x04
     db0:	9d 81       	ldd	r25, Y+5	; 0x05
     db2:	0e 94 87 12 	call	0x250e	; 0x250e <_ZN2Sw8getEventEv>
     db6:	2b 85       	ldd	r18, Y+11	; 0x0b
     db8:	3c 85       	ldd	r19, Y+12	; 0x0c
     dba:	82 30       	cpi	r24, 0x02	; 2
     dbc:	81 f4       	brne	.+32     	; 0xdde <_ZN5keyer8callbackEv+0xa0>
					rly->selectTx();
     dbe:	c9 01       	movw	r24, r18
     dc0:	0e 94 df 11 	call	0x23be	; 0x23be <_ZN5relay8selectTxEv>
					state = 3;
     dc4:	83 e0       	ldi	r24, 0x03	; 3
     dc6:	8a 87       	std	Y+10, r24	; 0x0a
					Timer::startTimer(this, dot_time*WEIGHT);
     dc8:	68 85       	ldd	r22, Y+8	; 0x08
     dca:	79 85       	ldd	r23, Y+9	; 0x09
     dcc:	cb 01       	movw	r24, r22
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	68 0f       	add	r22, r24
     dd4:	79 1f       	adc	r23, r25
     dd6:	ce 01       	movw	r24, r28
     dd8:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN5Timer10startTimerEP8Callbackj>
     ddc:	2e c0       	rjmp	.+92     	; 0xe3a <_ZN5keyer8callbackEv+0xfc>
				} else {
					rly->selectRx();	
     dde:	c9 01       	movw	r24, r18
     de0:	0e 94 00 12 	call	0x2400	; 0x2400 <_ZN5relay8selectRxEv>
     de4:	2a c0       	rjmp	.+84     	; 0xe3a <_ZN5keyer8callbackEv+0xfc>
				rly->selectRx();
				Timer::startTimer(this, dot_time);
				break;			

			case 2:
				if (!dot->isClosed() && !dash->isClosed()) {
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	9b 81       	ldd	r25, Y+3	; 0x03
     dea:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN2Sw8isClosedEv>
     dee:	81 11       	cpse	r24, r1
     df0:	2a c0       	rjmp	.+84     	; 0xe46 <_ZN5keyer8callbackEv+0x108>
     df2:	8c 81       	ldd	r24, Y+4	; 0x04
     df4:	9d 81       	ldd	r25, Y+5	; 0x05
     df6:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN2Sw8isClosedEv>
     dfa:	81 11       	cpse	r24, r1
     dfc:	24 c0       	rjmp	.+72     	; 0xe46 <_ZN5keyer8callbackEv+0x108>
     dfe:	30 c0       	rjmp	.+96     	; 0xe60 <_ZN5keyer8callbackEv+0x122>
					Timer::startTimer(this, dot_time*WEIGHT);
				} 
				break;
				
			case 3:
				state = 4;
     e00:	84 e0       	ldi	r24, 0x04	; 4
     e02:	8a 87       	std	Y+10, r24	; 0x0a
				rly->selectRx();
     e04:	8b 85       	ldd	r24, Y+11	; 0x0b
     e06:	9c 85       	ldd	r25, Y+12	; 0x0c
     e08:	0e 94 00 12 	call	0x2400	; 0x2400 <_ZN5relay8selectRxEv>
     e0c:	46 c0       	rjmp	.+140    	; 0xe9a <_ZN5keyer8callbackEv+0x15c>
				Timer::startTimer(this, dot_time);
				break;
			
			case 4:
				if (!dot->isClosed() && !dash->isClosed()) {
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	9b 81       	ldd	r25, Y+3	; 0x03
     e12:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN2Sw8isClosedEv>
     e16:	81 11       	cpse	r24, r1
     e18:	25 c0       	rjmp	.+74     	; 0xe64 <_ZN5keyer8callbackEv+0x126>
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	9d 81       	ldd	r25, Y+5	; 0x05
     e1e:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN2Sw8isClosedEv>
     e22:	81 11       	cpse	r24, r1
     e24:	1f c0       	rjmp	.+62     	; 0xe64 <_ZN5keyer8callbackEv+0x126>
     e26:	1c c0       	rjmp	.+56     	; 0xe60 <_ZN5keyer8callbackEv+0x122>
					Timer::startTimer(this, dot_time);
				} 
				break;

			default:
				state = 0;
     e28:	1a 86       	std	Y+10, r1	; 0x0a
				rly->selectRx();
     e2a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e2c:	9c 85       	ldd	r25, Y+12	; 0x0c
     e2e:	0e 94 00 12 	call	0x2400	; 0x2400 <_ZN5relay8selectRxEv>
				dot->clearEvent();
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	9b 81       	ldd	r25, Y+3	; 0x03
     e36:	0e 94 8a 12 	call	0x2514	; 0x2514 <_ZN2Sw10clearEventEv>
				dash->clearEvent();			
     e3a:	8c 81       	ldd	r24, Y+4	; 0x04
     e3c:	9d 81       	ldd	r25, Y+5	; 0x05
				break;
	}
}
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28

			default:
				state = 0;
				rly->selectRx();
				dot->clearEvent();
				dash->clearEvent();			
     e42:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <_ZN2Sw10clearEventEv>
				if (!dot->isClosed() && !dash->isClosed()) {
					state = 0;
					dot->clearEvent();
					dash->clearEvent();
				
				} else if (dot->isClosed() && !dash->isClosed()) {
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	9b 81       	ldd	r25, Y+3	; 0x03
     e4a:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN2Sw8isClosedEv>
     e4e:	88 23       	and	r24, r24
     e50:	81 f0       	breq	.+32     	; 0xe72 <_ZN5keyer8callbackEv+0x134>
				if (!dot->isClosed() && !dash->isClosed()) {
					state = 0;
					dot->clearEvent();
					dash->clearEvent();
				
				} else if (!dot->isClosed() && dash->isClosed()) {
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	9d 81       	ldd	r25, Y+5	; 0x05
     e56:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN2Sw8isClosedEv>
     e5a:	81 11       	cpse	r24, r1
     e5c:	0a c0       	rjmp	.+20     	; 0xe72 <_ZN5keyer8callbackEv+0x134>
     e5e:	17 c0       	rjmp	.+46     	; 0xe8e <_ZN5keyer8callbackEv+0x150>
				Timer::startTimer(this, dot_time);
				break;
			
			case 4:
				if (!dot->isClosed() && !dash->isClosed()) {
					state = 0;
     e60:	1a 86       	std	Y+10, r1	; 0x0a
     e62:	e7 cf       	rjmp	.-50     	; 0xe32 <_ZN5keyer8callbackEv+0xf4>
					dot->clearEvent();
					dash->clearEvent();
				
				} else if (!dot->isClosed() && dash->isClosed()) {
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	9b 81       	ldd	r25, Y+3	; 0x03
     e68:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN2Sw8isClosedEv>
     e6c:	81 11       	cpse	r24, r1
     e6e:	0f c0       	rjmp	.+30     	; 0xe8e <_ZN5keyer8callbackEv+0x150>
     e70:	f0 cf       	rjmp	.-32     	; 0xe52 <_ZN5keyer8callbackEv+0x114>
					state = 3;
     e72:	83 e0       	ldi	r24, 0x03	; 3
     e74:	8a 87       	std	Y+10, r24	; 0x0a
					rly->selectTx();
     e76:	8b 85       	ldd	r24, Y+11	; 0x0b
     e78:	9c 85       	ldd	r25, Y+12	; 0x0c
     e7a:	0e 94 df 11 	call	0x23be	; 0x23be <_ZN5relay8selectTxEv>
					Timer::startTimer(this, dot_time*WEIGHT);
     e7e:	68 85       	ldd	r22, Y+8	; 0x08
     e80:	79 85       	ldd	r23, Y+9	; 0x09
     e82:	cb 01       	movw	r24, r22
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	68 0f       	add	r22, r24
     e8a:	79 1f       	adc	r23, r25
     e8c:	08 c0       	rjmp	.+16     	; 0xe9e <_ZN5keyer8callbackEv+0x160>
					
				} else {
					state = 1;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	8a 87       	std	Y+10, r24	; 0x0a
					rly->selectTx();
     e92:	8b 85       	ldd	r24, Y+11	; 0x0b
     e94:	9c 85       	ldd	r25, Y+12	; 0x0c
     e96:	0e 94 df 11 	call	0x23be	; 0x23be <_ZN5relay8selectTxEv>
					Timer::startTimer(this, dot_time);
     e9a:	68 85       	ldd	r22, Y+8	; 0x08
     e9c:	79 85       	ldd	r23, Y+9	; 0x09
     e9e:	ce 01       	movw	r24, r28
				rly->selectRx();
				dot->clearEvent();
				dash->clearEvent();			
				break;
	}
}
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
					Timer::startTimer(this, dot_time*WEIGHT);
					
				} else {
					state = 1;
					rly->selectTx();
					Timer::startTimer(this, dot_time);
     ea4:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <_ZN5Timer10startTimerEP8Callbackj>
				rly->selectRx();
				dot->clearEvent();
				dash->clearEvent();			
				break;
	}
}
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <_ZN5keyerC1EP2SwS1_P5relay>:
#include "keyer.h"
#include "timer.h"



keyer::keyer(Sw *dot_sw, Sw *dash_sw, relay *rlyd) {
     eae:	fc 01       	movw	r30, r24
     eb0:	87 e4       	ldi	r24, 0x47	; 71
     eb2:	92 e0       	ldi	r25, 0x02	; 2
     eb4:	91 83       	std	Z+1, r25	; 0x01
     eb6:	80 83       	st	Z, r24
	dot = dot_sw;
     eb8:	73 83       	std	Z+3, r23	; 0x03
     eba:	62 83       	std	Z+2, r22	; 0x02
	dash = dash_sw;
     ebc:	55 83       	std	Z+5, r21	; 0x05
     ebe:	44 83       	std	Z+4, r20	; 0x04
	rly = rlyd;
     ec0:	34 87       	std	Z+12, r19	; 0x0c
     ec2:	23 87       	std	Z+11, r18	; 0x0b
	speed = 15;
     ec4:	8f e0       	ldi	r24, 0x0F	; 15
     ec6:	86 83       	std	Z+6, r24	; 0x06
	dot_time = (6000) / ((uint16_t)speed * 5);
     ec8:	80 e5       	ldi	r24, 0x50	; 80
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	91 87       	std	Z+9, r25	; 0x09
     ece:	80 87       	std	Z+8, r24	; 0x08
	mode =  KEY_ST; 	
     ed0:	17 82       	std	Z+7, r1	; 0x07
     ed2:	08 95       	ret

00000ed4 <_ZN5keyer6isIdleEv>:
}

bool keyer::isIdle(void) {
	return (state == 0);	
     ed4:	21 e0       	ldi	r18, 0x01	; 1
     ed6:	fc 01       	movw	r30, r24
     ed8:	82 85       	ldd	r24, Z+10	; 0x0a
     eda:	81 11       	cpse	r24, r1
     edc:	20 e0       	ldi	r18, 0x00	; 0
}
     ede:	82 2f       	mov	r24, r18
     ee0:	08 95       	ret

00000ee2 <_ZN5keyer6updateEv>:
// called when a new key event is detected and the
// keyer is idle
//
void keyer::update(void) {
	
	if (isIdle()) {
     ee2:	dc 01       	movw	r26, r24
     ee4:	1a 96       	adiw	r26, 0x0a	; 10
     ee6:	2c 91       	ld	r18, X
     ee8:	1a 97       	sbiw	r26, 0x0a	; 10
     eea:	21 11       	cpse	r18, r1
     eec:	06 c0       	rjmp	.+12     	; 0xefa <_ZN5keyer6updateEv+0x18>
		callback();
     eee:	ed 91       	ld	r30, X+
     ef0:	fc 91       	ld	r31, X
     ef2:	01 90       	ld	r0, Z+
     ef4:	f0 81       	ld	r31, Z
     ef6:	e0 2d       	mov	r30, r0
     ef8:	09 94       	ijmp
     efa:	08 95       	ret

00000efc <_ZN5keyer8setSpeedEh>:
				dash->clearEvent();			
				break;
	}
}

void keyer::setSpeed(uint8_t spd) {
     efc:	fc 01       	movw	r30, r24
	speed = spd;
     efe:	66 83       	std	Z+6, r22	; 0x06
	dot_time = (6000) / ((uint16_t)speed * 5);
     f00:	85 e0       	ldi	r24, 0x05	; 5
     f02:	68 9f       	mul	r22, r24
     f04:	b0 01       	movw	r22, r0
     f06:	11 24       	eor	r1, r1
     f08:	80 e7       	ldi	r24, 0x70	; 112
     f0a:	97 e1       	ldi	r25, 0x17	; 23
     f0c:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__udivmodhi4>
     f10:	71 87       	std	Z+9, r23	; 0x09
     f12:	60 87       	std	Z+8, r22	; 0x08
     f14:	08 95       	ret

00000f16 <_ZN5keyer7setModeE6_key_t>:
}


	
void keyer::setMode(key_t md) {
	mode = md;
     f16:	fc 01       	movw	r30, r24
     f18:	67 83       	std	Z+7, r22	; 0x07
     f1a:	08 95       	ret

00000f1c <_Z6mymainv>:
FILE uart_str = FDEV_SETUP_STREAM_CPP(uart_putc, uart_getc, _FDEV_SETUP_RW);
FILE lcd_str  = FDEV_SETUP_STREAM_CPP(lcd_putc, NULL, _FDEV_SETUP_WRITE);
FILE *lcdfp = &lcd_str;

// my main, called from loop
void mymain(void) {
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	e0 97       	sbiw	r28, 0x30	; 48
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61

volatile uint8_t reg;
uint8_t secs = 0;
uint8_t mins = 0;
uint8_t hours = 0;
Clock *cl = new Clock();
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_Znwj>
     f38:	0e 94 81 04 	call	0x902	; 0x902 <_ZN5ClockC1Ev>
Timer *tmr = new Timer();
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_Znwj>
     f44:	0e 94 95 12 	call	0x252a	; 0x252a <_ZN5TimerC1Ev>

#ifndef LCD_TT
//Led *led = new Led();
#endif

Lcd *l = new Lcd();
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_Znwj>
     f50:	9a a7       	std	Y+42, r25	; 0x2a
     f52:	89 a7       	std	Y+41, r24	; 0x29
     f54:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_ZN3LcdC1Ev>
Graphics *g = new Graphics();
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_Znwj>
     f60:	9f 8b       	std	Y+23, r25	; 0x17
     f62:	8e 8b       	std	Y+22, r24	; 0x16
#ifndef GRAPHICS_H_
#define GRAPHICS_H_

#include "lcd.h"

class Graphics : public Lcd {
     f64:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_ZN3LcdC1Ev>

pixColor  f = GREEN;
pixColor pix_green = GREEN;
pixColor  b = LTGREEN;
pixColor  fg_grey = GRAY;
     f68:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <vfoDataConst+0xa2>
     f6c:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <vfoDataConst+0xa3>
     f70:	a0 91 36 02 	lds	r26, 0x0236	; 0x800236 <vfoDataConst+0xa4>
     f74:	8d a7       	std	Y+45, r24	; 0x2d
     f76:	9e a7       	std	Y+46, r25	; 0x2e
     f78:	af a7       	std	Y+47, r26	; 0x2f
volatile float freq;
char buf[16];
mode_t curMode;

#ifndef LCD_TT
  uart_init();
     f7a:	0e 94 04 13 	call	0x2608	; 0x2608 <uart_init>
  stdout = stdin = &uart_str;
     f7e:	86 e1       	ldi	r24, 0x16	; 22
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <__iob+0x1>
     f86:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <__iob>
     f8a:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <__iob+0x3>
     f8e:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <__iob+0x2>
  stderr = &uart_str;
     f92:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <__iob+0x5>
     f96:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <__iob+0x4>
  printf("main: Starting loop\n");
     f9a:	89 e4       	ldi	r24, 0x49	; 73
     f9c:	92 e0       	ldi	r25, 0x02	; 2
     f9e:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <puts>
#endif

	DdsInit();
     fa2:	0e 94 ad 04 	call	0x95a	; 0x95a <DdsInit>
	// init RLY as output, 
	reg = DDRD;
     fa6:	8a b1       	in	r24, 0x0a	; 10
     fa8:	8d 8b       	std	Y+21, r24	; 0x15
	DDRD = reg | RLY_MSK;
     faa:	8d 89       	ldd	r24, Y+21	; 0x15
     fac:	80 64       	ori	r24, 0x40	; 64
     fae:	8a b9       	out	0x0a, r24	; 10

	reg = PORTD;
     fb0:	8b b1       	in	r24, 0x0b	; 11
     fb2:	8d 8b       	std	Y+21, r24	; 0x15
	PORTD = reg & ~RLY_MSK;
     fb4:	8d 89       	ldd	r24, Y+21	; 0x15
     fb6:	8f 7b       	andi	r24, 0xBF	; 191
     fb8:	8b b9       	out	0x0b, r24	; 11
	 
	Sw *dot = new Sw(DOT, PORTC_ADR);
     fba:	8b e0       	ldi	r24, 0x0B	; 11
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_Znwj>
     fc2:	9a a3       	std	Y+34, r25	; 0x22
     fc4:	89 a3       	std	Y+33, r24	; 0x21
     fc6:	48 e2       	ldi	r20, 0x28	; 40
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	0e 94 21 12 	call	0x2442	; 0x2442 <_ZN2SwC1Ehh>
	Sw *dash = new Sw(DASH, PORTC_ADR);
     fce:	8b e0       	ldi	r24, 0x0B	; 11
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_Znwj>
     fd6:	98 a7       	std	Y+40, r25	; 0x28
     fd8:	8f a3       	std	Y+39, r24	; 0x27
     fda:	48 e2       	ldi	r20, 0x28	; 40
     fdc:	63 e0       	ldi	r22, 0x03	; 3
     fde:	0e 94 21 12 	call	0x2442	; 0x2442 <_ZN2SwC1Ehh>
	Sw *pb = new Sw(PB, PORTD_ADR);
     fe2:	8b e0       	ldi	r24, 0x0B	; 11
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_Znwj>
     fea:	9b 8f       	std	Y+27, r25	; 0x1b
     fec:	8a 8f       	std	Y+26, r24	; 0x1a
     fee:	4b e2       	ldi	r20, 0x2B	; 43
     ff0:	67 e0       	ldi	r22, 0x07	; 7
     ff2:	0e 94 21 12 	call	0x2442	; 0x2442 <_ZN2SwC1Ehh>
//	ElapsedTime *et = new ElapsedTime(ONE_SEC);
	Encoder *enc = new Encoder(ENCA, ENCB, PORTB_ADR);
     ff6:	8f e0       	ldi	r24, 0x0F	; 15
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_Znwj>
     ffe:	9d 8f       	std	Y+29, r25	; 0x1d
    1000:	8c 8f       	std	Y+28, r24	; 0x1c
    1002:	25 e2       	ldi	r18, 0x25	; 37
    1004:	44 e0       	ldi	r20, 0x04	; 4
    1006:	63 e0       	ldi	r22, 0x03	; 3
    1008:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN7EncoderC1Ehhh>

	band_t band = BAND_40;
	vfo *vfoA = new vfo(enc, vfoDataConst, VFOA_LINE);
    100c:	8c ea       	ldi	r24, 0xAC	; 172
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_Znwj>
    1014:	88 8f       	std	Y+24, r24	; 0x18
    1016:	99 8f       	std	Y+25, r25	; 0x19
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	42 e9       	ldi	r20, 0x92	; 146
    101e:	51 e0       	ldi	r21, 0x01	; 1
    1020:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1022:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1024:	0e 94 29 13 	call	0x2652	; 0x2652 <_ZN3vfoC1EP7EncoderP13vfoParametersj>
	vfo *vfoB = new vfo(enc, vfoDataConst, VFOB_LINE);
    1028:	8c ea       	ldi	r24, 0xAC	; 172
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_Znwj>
    1030:	8d a3       	std	Y+37, r24	; 0x25
    1032:	9e a3       	std	Y+38, r25	; 0x26
    1034:	24 e2       	ldi	r18, 0x24	; 36
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	42 e9       	ldi	r20, 0x92	; 146
    103a:	51 e0       	ldi	r21, 0x01	; 1
    103c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    103e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1040:	0e 94 29 13 	call	0x2652	; 0x2652 <_ZN3vfoC1EP7EncoderP13vfoParametersj>

	vfoA->getTxDisplayFreq(buf, band);
    1044:	42 e0       	ldi	r20, 0x02	; 2
    1046:	fe 01       	movw	r30, r28
    1048:	31 96       	adiw	r30, 0x01	; 1
    104a:	4f 01       	movw	r8, r30
    104c:	bf 01       	movw	r22, r30
    104e:	88 8d       	ldd	r24, Y+24	; 0x18
    1050:	99 8d       	ldd	r25, Y+25	; 0x19
    1052:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_ZN3vfo16getTxDisplayFreqEPc5_band>
    1056:	14 01       	movw	r2, r8
    1058:	10 e0       	ldi	r17, 0x00	; 0
	for (size_t i = 0; i < strlen(buf); i++) {
    105a:	34 01       	movw	r6, r8
    105c:	f3 01       	movw	r30, r6
    105e:	01 90       	ld	r0, Z+
    1060:	00 20       	and	r0, r0
    1062:	e9 f7       	brne	.-6      	; 0x105e <_Z6mymainv+0x142>
    1064:	31 97       	sbiw	r30, 0x01	; 1
    1066:	e6 19       	sub	r30, r6
    1068:	f7 09       	sbc	r31, r7
    106a:	c1 01       	movw	r24, r2
    106c:	88 19       	sub	r24, r8
    106e:	99 09       	sbc	r25, r9
    1070:	8e 17       	cp	r24, r30
    1072:	9f 07       	cpc	r25, r31
    1074:	98 f4       	brcc	.+38     	; 0x109c <_Z6mymainv+0x180>
		g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f,b);
    1076:	f1 01       	movw	r30, r2
    1078:	61 91       	ld	r22, Z+
    107a:	1f 01       	movw	r2, r30
    107c:	a1 2c       	mov	r10, r1
    107e:	b1 2c       	mov	r11, r1
    1080:	ac e4       	ldi	r26, 0x4C	; 76
    1082:	ca 2e       	mov	r12, r26
    1084:	e1 2c       	mov	r14, r1
    1086:	bc ef       	ldi	r27, 0xFC	; 252
    1088:	fb 2e       	mov	r15, r27
    108a:	00 e0       	ldi	r16, 0x00	; 0
    108c:	21 2f       	mov	r18, r17
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	8e 89       	ldd	r24, Y+22	; 0x16
    1092:	9f 89       	ldd	r25, Y+23	; 0x17
    1094:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
    1098:	10 5f       	subi	r17, 0xF0	; 240
	band_t band = BAND_40;
	vfo *vfoA = new vfo(enc, vfoDataConst, VFOA_LINE);
	vfo *vfoB = new vfo(enc, vfoDataConst, VFOB_LINE);

	vfoA->getTxDisplayFreq(buf, band);
	for (size_t i = 0; i < strlen(buf); i++) {
    109a:	e0 cf       	rjmp	.-64     	; 0x105c <_Z6mymainv+0x140>
		g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f,b);
	}

	vfoB->getTxDisplayFreq(buf, band);
    109c:	42 e0       	ldi	r20, 0x02	; 2
    109e:	b3 01       	movw	r22, r6
    10a0:	8d a1       	ldd	r24, Y+37	; 0x25
    10a2:	9e a1       	ldd	r25, Y+38	; 0x26
    10a4:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_ZN3vfo16getTxDisplayFreqEPc5_band>
    10a8:	34 01       	movw	r6, r8
    10aa:	10 e0       	ldi	r17, 0x00	; 0
	for (size_t i = 0; i < strlen(buf); i++) {
    10ac:	ce 01       	movw	r24, r28
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	1c 01       	movw	r2, r24
    10b2:	f1 01       	movw	r30, r2
    10b4:	01 90       	ld	r0, Z+
    10b6:	00 20       	and	r0, r0
    10b8:	e9 f7       	brne	.-6      	; 0x10b4 <_Z6mymainv+0x198>
    10ba:	31 97       	sbiw	r30, 0x01	; 1
    10bc:	e2 19       	sub	r30, r2
    10be:	f3 09       	sbc	r31, r3
    10c0:	c3 01       	movw	r24, r6
    10c2:	88 19       	sub	r24, r8
    10c4:	99 09       	sbc	r25, r9
    10c6:	8e 17       	cp	r24, r30
    10c8:	9f 07       	cpc	r25, r31
    10ca:	90 f4       	brcc	.+36     	; 0x10f0 <_Z6mymainv+0x1d4>
		g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey,b);
    10cc:	f3 01       	movw	r30, r6
    10ce:	61 91       	ld	r22, Z+
    10d0:	3f 01       	movw	r6, r30
    10d2:	a1 2c       	mov	r10, r1
    10d4:	b1 2c       	mov	r11, r1
    10d6:	fc e4       	ldi	r31, 0x4C	; 76
    10d8:	cf 2e       	mov	r12, r31
    10da:	ed a4       	ldd	r14, Y+45	; 0x2d
    10dc:	fe a4       	ldd	r15, Y+46	; 0x2e
    10de:	0f a5       	ldd	r16, Y+47	; 0x2f
    10e0:	21 2f       	mov	r18, r17
    10e2:	44 e2       	ldi	r20, 0x24	; 36
    10e4:	8e 89       	ldd	r24, Y+22	; 0x16
    10e6:	9f 89       	ldd	r25, Y+23	; 0x17
    10e8:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
    10ec:	10 5f       	subi	r17, 0xF0	; 240
	for (size_t i = 0; i < strlen(buf); i++) {
		g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f,b);
	}

	vfoB->getTxDisplayFreq(buf, band);
	for (size_t i = 0; i < strlen(buf); i++) {
    10ee:	e1 cf       	rjmp	.-62     	; 0x10b2 <_Z6mymainv+0x196>
		g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey,b);
	}

	vfo *curVfo = vfoA;
	params *param = new params(g);
    10f0:	8b e5       	ldi	r24, 0x5B	; 91
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_Znwj>
    10f8:	1c 01       	movw	r2, r24
    10fa:	6e 89       	ldd	r22, Y+22	; 0x16
    10fc:	7f 89       	ldd	r23, Y+23	; 0x17
    10fe:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <_ZN6paramsC1EP8Graphics>
	relay *rly = new relay(param);
    1102:	85 e0       	ldi	r24, 0x05	; 5
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_Znwj>
    110a:	9f 8f       	std	Y+31, r25	; 0x1f
    110c:	8e 8f       	std	Y+30, r24	; 0x1e
    110e:	b1 01       	movw	r22, r2
    1110:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <_ZN5relayC1EP6params>
	keyer *kyr = new keyer(dot,dash,rly);
    1114:	8d e0       	ldi	r24, 0x0D	; 13
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_Znwj>
    111c:	9c a3       	std	Y+36, r25	; 0x24
    111e:	8b a3       	std	Y+35, r24	; 0x23
    1120:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1122:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1124:	4f a1       	ldd	r20, Y+39	; 0x27
    1126:	58 a5       	ldd	r21, Y+40	; 0x28
    1128:	69 a1       	ldd	r22, Y+33	; 0x21
    112a:	7a a1       	ldd	r23, Y+34	; 0x22
    112c:	0e 94 57 07 	call	0xeae	; 0xeae <_ZN5keyerC1EP2SwS1_P5relay>
	rly->setVfo(curVfo);
    1130:	68 8d       	ldd	r22, Y+24	; 0x18
    1132:	79 8d       	ldd	r23, Y+25	; 0x19
    1134:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1136:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1138:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN5relay6setVfoEP3vfo>
	
	//
	// initialize a vfo and frequency
	//
	param->setActiveVfo(RX);
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	c1 01       	movw	r24, r2
    1140:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_ZN6params12setActiveVfoE10vfo_actv_t>

	freq = curVfo->getRxFreq(band);
    1144:	62 e0       	ldi	r22, 0x02	; 2
    1146:	88 8d       	ldd	r24, Y+24	; 0x18
    1148:	99 8d       	ldd	r25, Y+25	; 0x19
    114a:	0e 94 13 14 	call	0x2826	; 0x2826 <_ZN3vfo9getRxFreqE5_band>
    114e:	69 8b       	std	Y+17, r22	; 0x11
    1150:	7a 8b       	std	Y+18, r23	; 0x12
    1152:	8b 8b       	std	Y+19, r24	; 0x13
    1154:	9c 8b       	std	Y+20, r25	; 0x14
	dds(freq);
    1156:	69 89       	ldd	r22, Y+17	; 0x11
    1158:	7a 89       	ldd	r23, Y+18	; 0x12
    115a:	8b 89       	ldd	r24, Y+19	; 0x13
    115c:	9c 89       	ldd	r25, Y+20	; 0x14
    115e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <dds>

	curMode = param->getMode();
    1162:	c1 01       	movw	r24, r2
    1164:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <_ZN6params7getModeEv>
    1168:	08 2f       	mov	r16, r24
	g->gotoxy(9,0);
    116a:	40 e0       	ldi	r20, 0x00	; 0
    116c:	69 e0       	ldi	r22, 0x09	; 9
    116e:	8e 89       	ldd	r24, Y+22	; 0x16
    1170:	9f 89       	ldd	r25, Y+23	; 0x17
    1172:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_ZN3Lcd6gotoxyEhh>
	fprintf(lcdfp, "AA6DQ");
    1176:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <lcdfp>
    117a:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <lcdfp+0x1>
    117e:	8d e5       	ldi	r24, 0x5D	; 93
    1180:	92 e0       	ldi	r25, 0x02	; 2
    1182:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <fputs>
	vfoB->getTxDisplayFreq(buf, band);
	for (size_t i = 0; i < strlen(buf); i++) {
		g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey,b);
	}

	vfo *curVfo = vfoA;
    1186:	d8 8c       	ldd	r13, Y+24	; 0x18
    1188:	79 8c       	ldd	r7, Y+25	; 0x19
	Sw *dash = new Sw(DASH, PORTC_ADR);
	Sw *pb = new Sw(PB, PORTD_ADR);
//	ElapsedTime *et = new ElapsedTime(ONE_SEC);
	Encoder *enc = new Encoder(ENCA, ENCB, PORTB_ADR);

	band_t band = BAND_40;
    118a:	12 e0       	ldi	r17, 0x02	; 2

						curVfo->update(band);
						enc->clearEvent();
						freq = curVfo->getTxFreq(band);
						dds(freq);
						curVfo->getTxDisplayFreq(buf, band);
    118c:	ce 01       	movw	r24, r28
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	2c 01       	movw	r4, r24
	g->gotoxy(9,0);
	fprintf(lcdfp, "AA6DQ");

	while(1) {
		
		mode_t newMode = param->getMode();
    1192:	c1 01       	movw	r24, r2
    1194:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <_ZN6params7getModeEv>
    1198:	88 a3       	std	Y+32, r24	; 0x20

		if ( (curMode == MODE_PARAMS) && (newMode == MODE_NORMAL)) {
    119a:	01 30       	cpi	r16, 0x01	; 1
    119c:	09 f0       	breq	.+2      	; 0x11a0 <_Z6mymainv+0x284>
    119e:	f3 c0       	rjmp	.+486    	; 0x1386 <_Z6mymainv+0x46a>
    11a0:	81 11       	cpse	r24, r1
    11a2:	00 c1       	rjmp	.+512    	; 0x13a4 <_Z6mymainv+0x488>

			band = param->getBand();
    11a4:	c1 01       	movw	r24, r2
    11a6:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN6params7getBandEv>
    11aa:	18 2f       	mov	r17, r24

			if (param->getVfo() == VFOA) {
    11ac:	c1 01       	movw	r24, r2
    11ae:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <_ZN6params6getVfoEv>
				curVfo = vfoA;
				vfoA->getTxDisplayFreq(buf, band);
    11b2:	41 2f       	mov	r20, r17
    11b4:	b2 01       	movw	r22, r4

		if ( (curMode == MODE_PARAMS) && (newMode == MODE_NORMAL)) {

			band = param->getBand();

			if (param->getVfo() == VFOA) {
    11b6:	81 11       	cpse	r24, r1
    11b8:	50 c0       	rjmp	.+160    	; 0x125a <_Z6mymainv+0x33e>
				curVfo = vfoA;
				vfoA->getTxDisplayFreq(buf, band);
    11ba:	88 8d       	ldd	r24, Y+24	; 0x18
    11bc:	99 8d       	ldd	r25, Y+25	; 0x19
    11be:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_ZN3vfo16getTxDisplayFreqEPc5_band>
    11c2:	34 01       	movw	r6, r8
    11c4:	d1 2c       	mov	r13, r1
				for (size_t i = 0; i < strlen(buf); i++) {
    11c6:	f2 01       	movw	r30, r4
    11c8:	01 90       	ld	r0, Z+
    11ca:	00 20       	and	r0, r0
    11cc:	e9 f7       	brne	.-6      	; 0x11c8 <_Z6mymainv+0x2ac>
    11ce:	31 97       	sbiw	r30, 0x01	; 1
    11d0:	e4 19       	sub	r30, r4
    11d2:	f5 09       	sbc	r31, r5
    11d4:	c3 01       	movw	r24, r6
    11d6:	88 19       	sub	r24, r8
    11d8:	99 09       	sbc	r25, r9
    11da:	8e 17       	cp	r24, r30
    11dc:	9f 07       	cpc	r25, r31
    11de:	a0 f4       	brcc	.+40     	; 0x1208 <_Z6mymainv+0x2ec>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f,b);
    11e0:	f3 01       	movw	r30, r6
    11e2:	61 91       	ld	r22, Z+
    11e4:	3f 01       	movw	r6, r30
    11e6:	a1 2c       	mov	r10, r1
    11e8:	b1 2c       	mov	r11, r1
    11ea:	7c e4       	ldi	r23, 0x4C	; 76
    11ec:	c7 2e       	mov	r12, r23
    11ee:	e1 2c       	mov	r14, r1
    11f0:	ec ef       	ldi	r30, 0xFC	; 252
    11f2:	fe 2e       	mov	r15, r30
    11f4:	00 e0       	ldi	r16, 0x00	; 0
    11f6:	2d 2d       	mov	r18, r13
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	8e 89       	ldd	r24, Y+22	; 0x16
    11fc:	9f 89       	ldd	r25, Y+23	; 0x17
    11fe:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
    1202:	f0 e1       	ldi	r31, 0x10	; 16
    1204:	df 0e       	add	r13, r31
			band = param->getBand();

			if (param->getVfo() == VFOA) {
				curVfo = vfoA;
				vfoA->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
    1206:	df cf       	rjmp	.-66     	; 0x11c6 <_Z6mymainv+0x2aa>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f,b);
				}

				vfoB->getTxDisplayFreq(buf, band);
    1208:	41 2f       	mov	r20, r17
    120a:	b2 01       	movw	r22, r4
    120c:	8d a1       	ldd	r24, Y+37	; 0x25
    120e:	9e a1       	ldd	r25, Y+38	; 0x26
    1210:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_ZN3vfo16getTxDisplayFreqEPc5_band>
    1214:	34 01       	movw	r6, r8
    1216:	d1 2c       	mov	r13, r1
				for (size_t i = 0; i < strlen(buf); i++) {
    1218:	f2 01       	movw	r30, r4
    121a:	01 90       	ld	r0, Z+
    121c:	00 20       	and	r0, r0
    121e:	e9 f7       	brne	.-6      	; 0x121a <_Z6mymainv+0x2fe>
    1220:	31 97       	sbiw	r30, 0x01	; 1
    1222:	e4 19       	sub	r30, r4
    1224:	f5 09       	sbc	r31, r5
    1226:	c3 01       	movw	r24, r6
    1228:	88 19       	sub	r24, r8
    122a:	99 09       	sbc	r25, r9
    122c:	8e 17       	cp	r24, r30
    122e:	9f 07       	cpc	r25, r31
    1230:	08 f0       	brcs	.+2      	; 0x1234 <_Z6mymainv+0x318>
    1232:	62 c0       	rjmp	.+196    	; 0x12f8 <_Z6mymainv+0x3dc>
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey,b);
    1234:	f3 01       	movw	r30, r6
    1236:	61 91       	ld	r22, Z+
    1238:	3f 01       	movw	r6, r30
    123a:	a1 2c       	mov	r10, r1
    123c:	b1 2c       	mov	r11, r1
    123e:	5c e4       	ldi	r21, 0x4C	; 76
    1240:	c5 2e       	mov	r12, r21
    1242:	ed a4       	ldd	r14, Y+45	; 0x2d
    1244:	fe a4       	ldd	r15, Y+46	; 0x2e
    1246:	0f a5       	ldd	r16, Y+47	; 0x2f
    1248:	2d 2d       	mov	r18, r13
    124a:	44 e2       	ldi	r20, 0x24	; 36
    124c:	8e 89       	ldd	r24, Y+22	; 0x16
    124e:	9f 89       	ldd	r25, Y+23	; 0x17
    1250:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
    1254:	f0 e1       	ldi	r31, 0x10	; 16
    1256:	df 0e       	add	r13, r31
				for (size_t i = 0; i < strlen(buf); i++) {
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f,b);
				}

				vfoB->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
    1258:	df cf       	rjmp	.-66     	; 0x1218 <_Z6mymainv+0x2fc>
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey,b);
				}

			} else {
				curVfo = vfoB;
				vfoA->getTxDisplayFreq(buf, band);
    125a:	88 8d       	ldd	r24, Y+24	; 0x18
    125c:	99 8d       	ldd	r25, Y+25	; 0x19
    125e:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_ZN3vfo16getTxDisplayFreqEPc5_band>
    1262:	34 01       	movw	r6, r8
    1264:	d1 2c       	mov	r13, r1
				for (size_t i = 0; i < strlen(buf); i++) {
    1266:	f2 01       	movw	r30, r4
    1268:	01 90       	ld	r0, Z+
    126a:	00 20       	and	r0, r0
    126c:	e9 f7       	brne	.-6      	; 0x1268 <_Z6mymainv+0x34c>
    126e:	31 97       	sbiw	r30, 0x01	; 1
    1270:	e4 19       	sub	r30, r4
    1272:	f5 09       	sbc	r31, r5
    1274:	c3 01       	movw	r24, r6
    1276:	88 19       	sub	r24, r8
    1278:	99 09       	sbc	r25, r9
    127a:	8e 17       	cp	r24, r30
    127c:	9f 07       	cpc	r25, r31
    127e:	98 f4       	brcc	.+38     	; 0x12a6 <_Z6mymainv+0x38a>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, fg_grey,b);
    1280:	f3 01       	movw	r30, r6
    1282:	61 91       	ld	r22, Z+
    1284:	3f 01       	movw	r6, r30
    1286:	a1 2c       	mov	r10, r1
    1288:	b1 2c       	mov	r11, r1
    128a:	4c e4       	ldi	r20, 0x4C	; 76
    128c:	c4 2e       	mov	r12, r20
    128e:	ed a4       	ldd	r14, Y+45	; 0x2d
    1290:	fe a4       	ldd	r15, Y+46	; 0x2e
    1292:	0f a5       	ldd	r16, Y+47	; 0x2f
    1294:	2d 2d       	mov	r18, r13
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	8e 89       	ldd	r24, Y+22	; 0x16
    129a:	9f 89       	ldd	r25, Y+23	; 0x17
    129c:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
    12a0:	f0 e1       	ldi	r31, 0x10	; 16
    12a2:	df 0e       	add	r13, r31
				}

			} else {
				curVfo = vfoB;
				vfoA->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
    12a4:	e0 cf       	rjmp	.-64     	; 0x1266 <_Z6mymainv+0x34a>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, fg_grey,b);
				}

				vfoB->getTxDisplayFreq(buf, band);
    12a6:	41 2f       	mov	r20, r17
    12a8:	b2 01       	movw	r22, r4
    12aa:	8d a1       	ldd	r24, Y+37	; 0x25
    12ac:	9e a1       	ldd	r25, Y+38	; 0x26
    12ae:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_ZN3vfo16getTxDisplayFreqEPc5_band>
    12b2:	34 01       	movw	r6, r8
    12b4:	d1 2c       	mov	r13, r1
				for (size_t i = 0; i < strlen(buf); i++) {
    12b6:	f2 01       	movw	r30, r4
    12b8:	01 90       	ld	r0, Z+
    12ba:	00 20       	and	r0, r0
    12bc:	e9 f7       	brne	.-6      	; 0x12b8 <_Z6mymainv+0x39c>
    12be:	31 97       	sbiw	r30, 0x01	; 1
    12c0:	e4 19       	sub	r30, r4
    12c2:	f5 09       	sbc	r31, r5
    12c4:	c3 01       	movw	r24, r6
    12c6:	88 19       	sub	r24, r8
    12c8:	99 09       	sbc	r25, r9
    12ca:	8e 17       	cp	r24, r30
    12cc:	9f 07       	cpc	r25, r31
    12ce:	b8 f4       	brcc	.+46     	; 0x12fe <_Z6mymainv+0x3e2>
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, f,b);
    12d0:	f3 01       	movw	r30, r6
    12d2:	61 91       	ld	r22, Z+
    12d4:	3f 01       	movw	r6, r30
    12d6:	a1 2c       	mov	r10, r1
    12d8:	b1 2c       	mov	r11, r1
    12da:	2c e4       	ldi	r18, 0x4C	; 76
    12dc:	c2 2e       	mov	r12, r18
    12de:	e1 2c       	mov	r14, r1
    12e0:	3c ef       	ldi	r19, 0xFC	; 252
    12e2:	f3 2e       	mov	r15, r19
    12e4:	00 e0       	ldi	r16, 0x00	; 0
    12e6:	2d 2d       	mov	r18, r13
    12e8:	44 e2       	ldi	r20, 0x24	; 36
    12ea:	8e 89       	ldd	r24, Y+22	; 0x16
    12ec:	9f 89       	ldd	r25, Y+23	; 0x17
    12ee:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
    12f2:	f0 e1       	ldi	r31, 0x10	; 16
    12f4:	df 0e       	add	r13, r31
				for (size_t i = 0; i < strlen(buf); i++) {
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, fg_grey,b);
				}

				vfoB->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
    12f6:	df cf       	rjmp	.-66     	; 0x12b6 <_Z6mymainv+0x39a>
		if ( (curMode == MODE_PARAMS) && (newMode == MODE_NORMAL)) {

			band = param->getBand();

			if (param->getVfo() == VFOA) {
				curVfo = vfoA;
    12f8:	d8 8c       	ldd	r13, Y+24	; 0x18
    12fa:	79 8c       	ldd	r7, Y+25	; 0x19
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <_Z6mymainv+0x3e6>
				for (size_t i = 0; i < strlen(buf); i++) {
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey,b);
				}

			} else {
				curVfo = vfoB;
    12fe:	dd a0       	ldd	r13, Y+37	; 0x25
    1300:	7e a0       	ldd	r7, Y+38	; 0x26
				for (size_t i = 0; i < strlen(buf); i++) {
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, f,b);
				}

			}
			curVfo->setStep(param->getStep());
    1302:	c1 01       	movw	r24, r2
    1304:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <_ZN6params7getStepEv>
    1308:	68 2f       	mov	r22, r24
    130a:	8d 2d       	mov	r24, r13
    130c:	97 2d       	mov	r25, r7
    130e:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_ZN3vfo7setStepE6step_t>
			if (param->getActiveVfo() == RX) {
    1312:	c1 01       	movw	r24, r2
    1314:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_ZN6params12getActiveVfoEv>
    1318:	81 11       	cpse	r24, r1
    131a:	0a c0       	rjmp	.+20     	; 0x1330 <_Z6mymainv+0x414>
				freq = curVfo->getRxFreq(band);
    131c:	61 2f       	mov	r22, r17
    131e:	8d 2d       	mov	r24, r13
    1320:	97 2d       	mov	r25, r7
    1322:	0e 94 13 14 	call	0x2826	; 0x2826 <_ZN3vfo9getRxFreqE5_band>
    1326:	69 8b       	std	Y+17, r22	; 0x11
    1328:	7a 8b       	std	Y+18, r23	; 0x12
    132a:	8b 8b       	std	Y+19, r24	; 0x13
    132c:	9c 8b       	std	Y+20, r25	; 0x14
    132e:	09 c0       	rjmp	.+18     	; 0x1342 <_Z6mymainv+0x426>
				dds(freq);
			} else {
				freq - curVfo->getTxFreq(band);
    1330:	89 89       	ldd	r24, Y+17	; 0x11
    1332:	9a 89       	ldd	r25, Y+18	; 0x12
    1334:	ab 89       	ldd	r26, Y+19	; 0x13
    1336:	bc 89       	ldd	r27, Y+20	; 0x14
    1338:	61 2f       	mov	r22, r17
    133a:	8d 2d       	mov	r24, r13
    133c:	97 2d       	mov	r25, r7
    133e:	0e 94 38 14 	call	0x2870	; 0x2870 <_ZN3vfo9getTxFreqE5_band>
				dds(freq);
    1342:	69 89       	ldd	r22, Y+17	; 0x11
    1344:	7a 89       	ldd	r23, Y+18	; 0x12
    1346:	8b 89       	ldd	r24, Y+19	; 0x13
    1348:	9c 89       	ldd	r25, Y+20	; 0x14
    134a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <dds>
			}
			
			//
			// update the keyer
			//
			kyr->setSpeed(param->getSpeed());
    134e:	c1 01       	movw	r24, r2
    1350:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <_ZN6params8getSpeedEv>
    1354:	68 2f       	mov	r22, r24
    1356:	8b a1       	ldd	r24, Y+35	; 0x23
    1358:	9c a1       	ldd	r25, Y+36	; 0x24
    135a:	0e 94 7e 07 	call	0xefc	; 0xefc <_ZN5keyer8setSpeedEh>
			kyr->setMode(param->getKey()); 
    135e:	c1 01       	movw	r24, r2
    1360:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZN6params6getKeyEv>
    1364:	68 2f       	mov	r22, r24
    1366:	8b a1       	ldd	r24, Y+35	; 0x23
    1368:	9c a1       	ldd	r25, Y+36	; 0x24
    136a:	0e 94 8b 07 	call	0xf16	; 0xf16 <_ZN5keyer7setModeE6_key_t>
			rly->setBand(band);
    136e:	61 2f       	mov	r22, r17
    1370:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1372:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1374:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5relay7setBandE5_band>
			rly->setVfo(curVfo);		
    1378:	6d 2d       	mov	r22, r13
    137a:	77 2d       	mov	r23, r7
    137c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    137e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1380:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN5relay6setVfoEP3vfo>
			
			curMode = newMode;
    1384:	8e c0       	rjmp	.+284    	; 0x14a2 <_Z6mymainv+0x586>

		} else if ((newMode == MODE_PARAMS) && (curMode == MODE_NORMAL)) {
    1386:	88 a1       	ldd	r24, Y+32	; 0x20
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	79 f4       	brne	.+30     	; 0x13aa <_Z6mymainv+0x48e>
    138c:	01 11       	cpse	r16, r1
    138e:	13 c0       	rjmp	.+38     	; 0x13b6 <_Z6mymainv+0x49a>
				param->updateEnter(enc, pb, l);
    1390:	29 a5       	ldd	r18, Y+41	; 0x29
    1392:	3a a5       	ldd	r19, Y+42	; 0x2a
    1394:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1396:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1398:	6c 8d       	ldd	r22, Y+28	; 0x1c
    139a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    139c:	c1 01       	movw	r24, r2
    139e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_ZN6params11updateEnterEP7EncoderP2SwP3Lcd>
				curMode = newMode;
    13a2:	7f c0       	rjmp	.+254    	; 0x14a2 <_Z6mymainv+0x586>
			rly->setBand(band);
			rly->setVfo(curVfo);		
			
			curMode = newMode;

		} else if ((newMode == MODE_PARAMS) && (curMode == MODE_NORMAL)) {
    13a4:	88 a1       	ldd	r24, Y+32	; 0x20
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	31 f0       	breq	.+12     	; 0x13b6 <_Z6mymainv+0x49a>

		} else {

			curMode = newMode;
		
			switch (curMode) {
    13aa:	98 a1       	ldd	r25, Y+32	; 0x20
    13ac:	99 23       	and	r25, r25
    13ae:	69 f0       	breq	.+26     	; 0x13ca <_Z6mymainv+0x4ae>
    13b0:	91 30       	cpi	r25, 0x01	; 1
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <_Z6mymainv+0x49a>
    13b4:	76 c0       	rjmp	.+236    	; 0x14a2 <_Z6mymainv+0x586>

				case MODE_PARAMS:
						param->update(enc, pb, l);
    13b6:	29 a5       	ldd	r18, Y+41	; 0x29
    13b8:	3a a5       	ldd	r19, Y+42	; 0x2a
    13ba:	4a 8d       	ldd	r20, Y+26	; 0x1a
    13bc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    13be:	6c 8d       	ldd	r22, Y+28	; 0x1c
    13c0:	7d 8d       	ldd	r23, Y+29	; 0x1d
    13c2:	c1 01       	movw	r24, r2
    13c4:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <_ZN6params6updateEP7EncoderP2SwP3Lcd>
					break;
    13c8:	6c c0       	rjmp	.+216    	; 0x14a2 <_Z6mymainv+0x586>
				//
				// for now, no keyer, just straight key
				//

				case MODE_NORMAL:
					if (pb->hasEvent()) {
    13ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13ce:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN2Sw8hasEventEv>
    13d2:	88 23       	and	r24, r24
    13d4:	a9 f0       	breq	.+42     	; 0x1400 <_Z6mymainv+0x4e4>
						if (pb->getEvent() == EV_CLOSE) {
    13d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13da:	0e 94 87 12 	call	0x250e	; 0x250e <_ZN2Sw8getEventEv>
    13de:	82 30       	cpi	r24, 0x02	; 2
    13e0:	51 f0       	breq	.+20     	; 0x13f6 <_Z6mymainv+0x4da>

						} else if (pb->getEvent() == EV_OPEN) {
    13e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13e4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13e6:	0e 94 87 12 	call	0x250e	; 0x250e <_ZN2Sw8getEventEv>
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	21 f4       	brne	.+8      	; 0x13f6 <_Z6mymainv+0x4da>
							param->setMode(MODE_PARAMS);
    13ee:	61 e0       	ldi	r22, 0x01	; 1
    13f0:	c1 01       	movw	r24, r2
    13f2:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <_ZN6params7setModeE7_mode_t>
						}
						pb->clearEvent();
    13f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13fa:	0e 94 8a 12 	call	0x2514	; 0x2514 <_ZN2Sw10clearEventEv>
						break;
    13fe:	51 c0       	rjmp	.+162    	; 0x14a2 <_Z6mymainv+0x586>
					}

					if (enc->hasEvent()) {
    1400:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1402:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1404:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_ZN7Encoder8hasEventEv>
    1408:	88 23       	and	r24, r24
    140a:	09 f4       	brne	.+2      	; 0x140e <_Z6mymainv+0x4f2>
    140c:	4a c0       	rjmp	.+148    	; 0x14a2 <_Z6mymainv+0x586>
						uint16_t line;

						curVfo->update(band);
    140e:	61 2f       	mov	r22, r17
    1410:	8d 2d       	mov	r24, r13
    1412:	97 2d       	mov	r25, r7
    1414:	0e 94 80 13 	call	0x2700	; 0x2700 <_ZN3vfo6updateEh>
						enc->clearEvent();
    1418:	8c 8d       	ldd	r24, Y+28	; 0x1c
    141a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    141c:	0e 94 0a 06 	call	0xc14	; 0xc14 <_ZN7Encoder10clearEventEv>
						freq = curVfo->getTxFreq(band);
    1420:	61 2f       	mov	r22, r17
    1422:	8d 2d       	mov	r24, r13
    1424:	97 2d       	mov	r25, r7
    1426:	0e 94 38 14 	call	0x2870	; 0x2870 <_ZN3vfo9getTxFreqE5_band>
    142a:	69 8b       	std	Y+17, r22	; 0x11
    142c:	7a 8b       	std	Y+18, r23	; 0x12
    142e:	8b 8b       	std	Y+19, r24	; 0x13
    1430:	9c 8b       	std	Y+20, r25	; 0x14
						dds(freq);
    1432:	69 89       	ldd	r22, Y+17	; 0x11
    1434:	7a 89       	ldd	r23, Y+18	; 0x12
    1436:	8b 89       	ldd	r24, Y+19	; 0x13
    1438:	9c 89       	ldd	r25, Y+20	; 0x14
    143a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <dds>
						curVfo->getTxDisplayFreq(buf, band);
    143e:	41 2f       	mov	r20, r17
    1440:	b2 01       	movw	r22, r4
    1442:	8d 2d       	mov	r24, r13
    1444:	97 2d       	mov	r25, r7
    1446:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_ZN3vfo16getTxDisplayFreqEPc5_band>
						line = curVfo->getLine();
    144a:	8d 2d       	mov	r24, r13
    144c:	97 2d       	mov	r25, r7
    144e:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN3vfo7getLineEv>
    1452:	88 ab       	std	Y+48, r24	; 0x30
    1454:	9c a6       	std	Y+44, r9	; 0x2c
    1456:	8b a6       	std	Y+43, r8	; 0x2b
    1458:	61 2c       	mov	r6, r1
						for (size_t i = 0; i < strlen(buf); i++) {
    145a:	f2 01       	movw	r30, r4
    145c:	01 90       	ld	r0, Z+
    145e:	00 20       	and	r0, r0
    1460:	e9 f7       	brne	.-6      	; 0x145c <_Z6mymainv+0x540>
    1462:	31 97       	sbiw	r30, 0x01	; 1
    1464:	e4 19       	sub	r30, r4
    1466:	f5 09       	sbc	r31, r5
    1468:	8b a5       	ldd	r24, Y+43	; 0x2b
    146a:	9c a5       	ldd	r25, Y+44	; 0x2c
    146c:	88 19       	sub	r24, r8
    146e:	99 09       	sbc	r25, r9
    1470:	8e 17       	cp	r24, r30
    1472:	9f 07       	cpc	r25, r31
    1474:	b0 f4       	brcc	.+44     	; 0x14a2 <_Z6mymainv+0x586>
							g->draw2xChar(buf[i], line, i*2*CHAR_WIDTH, f,b);
    1476:	eb a5       	ldd	r30, Y+43	; 0x2b
    1478:	fc a5       	ldd	r31, Y+44	; 0x2c
    147a:	61 91       	ld	r22, Z+
    147c:	fc a7       	std	Y+44, r31	; 0x2c
    147e:	eb a7       	std	Y+43, r30	; 0x2b
    1480:	a1 2c       	mov	r10, r1
    1482:	b1 2c       	mov	r11, r1
    1484:	8c e4       	ldi	r24, 0x4C	; 76
    1486:	c8 2e       	mov	r12, r24
    1488:	e1 2c       	mov	r14, r1
    148a:	9c ef       	ldi	r25, 0xFC	; 252
    148c:	f9 2e       	mov	r15, r25
    148e:	00 e0       	ldi	r16, 0x00	; 0
    1490:	26 2d       	mov	r18, r6
    1492:	48 a9       	ldd	r20, Y+48	; 0x30
    1494:	8e 89       	ldd	r24, Y+22	; 0x16
    1496:	9f 89       	ldd	r25, Y+23	; 0x17
    1498:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
    149c:	f0 e1       	ldi	r31, 0x10	; 16
    149e:	6f 0e       	add	r6, r31
						enc->clearEvent();
						freq = curVfo->getTxFreq(band);
						dds(freq);
						curVfo->getTxDisplayFreq(buf, band);
						line = curVfo->getLine();
						for (size_t i = 0; i < strlen(buf); i++) {
    14a0:	dc cf       	rjmp	.-72     	; 0x145a <_Z6mymainv+0x53e>
				case MODE_SETUP:
					break;
			}
		}

		if (param->getKey() == KEY_ST) {
    14a2:	c1 01       	movw	r24, r2
    14a4:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZN6params6getKeyEv>
    14a8:	81 11       	cpse	r24, r1
    14aa:	19 c0       	rjmp	.+50     	; 0x14de <_Z6mymainv+0x5c2>
			if (dot->getEvent() == EV_CLOSE) {
    14ac:	89 a1       	ldd	r24, Y+33	; 0x21
    14ae:	9a a1       	ldd	r25, Y+34	; 0x22
    14b0:	0e 94 87 12 	call	0x250e	; 0x250e <_ZN2Sw8getEventEv>
    14b4:	82 30       	cpi	r24, 0x02	; 2
    14b6:	29 f4       	brne	.+10     	; 0x14c2 <_Z6mymainv+0x5a6>
				rly->selectTx();
    14b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    14bc:	0e 94 df 11 	call	0x23be	; 0x23be <_ZN5relay8selectTxEv>
    14c0:	04 c0       	rjmp	.+8      	; 0x14ca <_Z6mymainv+0x5ae>
			} else {
				rly->selectRx();
    14c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    14c6:	0e 94 00 12 	call	0x2400	; 0x2400 <_ZN5relay8selectRxEv>
			}
			dot->clearEvent();
    14ca:	89 a1       	ldd	r24, Y+33	; 0x21
    14cc:	9a a1       	ldd	r25, Y+34	; 0x22
    14ce:	0e 94 8a 12 	call	0x2514	; 0x2514 <_ZN2Sw10clearEventEv>
			dash->clearEvent();
    14d2:	8f a1       	ldd	r24, Y+39	; 0x27
    14d4:	98 a5       	ldd	r25, Y+40	; 0x28
    14d6:	0e 94 8a 12 	call	0x2514	; 0x2514 <_ZN2Sw10clearEventEv>
	g->gotoxy(9,0);
	fprintf(lcdfp, "AA6DQ");

	while(1) {
		
		mode_t newMode = param->getMode();
    14da:	08 a1       	ldd	r16, Y+32	; 0x20
    14dc:	5a ce       	rjmp	.-844    	; 0x1192 <_Z6mymainv+0x276>
				rly->selectRx();
			}
			dot->clearEvent();
			dash->clearEvent();
			
		} else if (param->getKey() == KEY_PDLS) {
    14de:	c1 01       	movw	r24, r2
    14e0:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZN6params6getKeyEv>
    14e4:	82 30       	cpi	r24, 0x02	; 2
    14e6:	c9 f7       	brne	.-14     	; 0x14da <_Z6mymainv+0x5be>
			if (kyr->isIdle()) {
    14e8:	8b a1       	ldd	r24, Y+35	; 0x23
    14ea:	9c a1       	ldd	r25, Y+36	; 0x24
    14ec:	0e 94 6a 07 	call	0xed4	; 0xed4 <_ZN5keyer6isIdleEv>
    14f0:	88 23       	and	r24, r24
    14f2:	99 f3       	breq	.-26     	; 0x14da <_Z6mymainv+0x5be>
				if ( dot->hasEvent() || dash->hasEvent() ) { 		
    14f4:	89 a1       	ldd	r24, Y+33	; 0x21
    14f6:	9a a1       	ldd	r25, Y+34	; 0x22
    14f8:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN2Sw8hasEventEv>
    14fc:	88 23       	and	r24, r24
    14fe:	29 f0       	breq	.+10     	; 0x150a <_Z6mymainv+0x5ee>
					kyr->update();
    1500:	8b a1       	ldd	r24, Y+35	; 0x23
    1502:	9c a1       	ldd	r25, Y+36	; 0x24
    1504:	0e 94 71 07 	call	0xee2	; 0xee2 <_ZN5keyer6updateEv>
    1508:	e8 cf       	rjmp	.-48     	; 0x14da <_Z6mymainv+0x5be>
			dot->clearEvent();
			dash->clearEvent();
			
		} else if (param->getKey() == KEY_PDLS) {
			if (kyr->isIdle()) {
				if ( dot->hasEvent() || dash->hasEvent() ) { 		
    150a:	8f a1       	ldd	r24, Y+39	; 0x27
    150c:	98 a5       	ldd	r25, Y+40	; 0x28
    150e:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN2Sw8hasEventEv>
    1512:	81 11       	cpse	r24, r1
    1514:	f5 cf       	rjmp	.-22     	; 0x1500 <_Z6mymainv+0x5e4>
    1516:	e1 cf       	rjmp	.-62     	; 0x14da <_Z6mymainv+0x5be>

00001518 <setup>:
	delete led;
#endif
}


void setup() {
    1518:	08 95       	ret

0000151a <loop>:

}


void loop() {
  mymain();
    151a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_Z6mymainv>

0000151e <_ZN3Lcd5resetEv>:
  if (erase) {
    drawChar(' ', 1, cursor.line, cursor.col, fgColor, bgColor);    
  } else {
  	drawChar(' ', 1, cursor.line, cursor.col, bgColor, fgColor);
  }
}
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	1f 92       	push	r1
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	8b b1       	in	r24, 0x0b	; 11
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	8f 7d       	andi	r24, 0xDF	; 223
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	8b b9       	out	0x0b, r24	; 11
    1536:	80 ea       	ldi	r24, 0xA0	; 160
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 ac 04 	call	0x958	; 0x958 <_Z7usecDlyi>
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	80 62       	ori	r24, 0x20	; 32
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	8b b9       	out	0x0b, r24	; 11
    1548:	6d e0       	ldi	r22, 0x0D	; 13
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 94 16 04 	call	0x82c	; 0x82c <_ZN5Clock5delayEm>
    1554:	0f 90       	pop	r0
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

0000155c <_ZN3Lcd8sendByteEh>:
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	00 d0       	rcall	.+0      	; 0x1562 <_ZN3Lcd8sendByteEh+0x6>
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	9b b1       	in	r25, 0x0b	; 11
    1568:	9a 83       	std	Y+2, r25	; 0x02
    156a:	9a 81       	ldd	r25, Y+2	; 0x02
    156c:	99 83       	std	Y+1, r25	; 0x01
    156e:	28 e0       	ldi	r18, 0x08	; 8
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	99 81       	ldd	r25, Y+1	; 0x01
    1574:	87 ff       	sbrs	r24, 7
    1576:	02 c0       	rjmp	.+4      	; 0x157c <_ZN3Lcd8sendByteEh+0x20>
    1578:	98 60       	ori	r25, 0x08	; 8
    157a:	01 c0       	rjmp	.+2      	; 0x157e <_ZN3Lcd8sendByteEh+0x22>
    157c:	97 7f       	andi	r25, 0xF7	; 247
    157e:	99 83       	std	Y+1, r25	; 0x01
    1580:	99 81       	ldd	r25, Y+1	; 0x01
    1582:	9b b9       	out	0x0b, r25	; 11
    1584:	99 81       	ldd	r25, Y+1	; 0x01
    1586:	94 60       	ori	r25, 0x04	; 4
    1588:	9b b9       	out	0x0b, r25	; 11
    158a:	99 81       	ldd	r25, Y+1	; 0x01
    158c:	9b b9       	out	0x0b, r25	; 11
    158e:	88 0f       	add	r24, r24
    1590:	21 50       	subi	r18, 0x01	; 1
    1592:	31 09       	sbc	r19, r1
    1594:	71 f7       	brne	.-36     	; 0x1572 <_ZN3Lcd8sendByteEh+0x16>
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	8b b9       	out	0x0b, r24	; 11
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	08 95       	ret

000015a4 <_ZN3Lcd7sendCmdEh>:
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	1f 92       	push	r1
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	9b b1       	in	r25, 0x0b	; 11
    15b0:	99 83       	std	Y+1, r25	; 0x01
    15b2:	99 81       	ldd	r25, Y+1	; 0x01
    15b4:	9f 7a       	andi	r25, 0xAF	; 175
    15b6:	99 83       	std	Y+1, r25	; 0x01
    15b8:	99 81       	ldd	r25, Y+1	; 0x01
    15ba:	9b b9       	out	0x0b, r25	; 11
    15bc:	0e 94 ae 0a 	call	0x155c	; 0x155c <_ZN3Lcd8sendByteEh>
    15c0:	0f 90       	pop	r0
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	08 95       	ret

000015c8 <_ZN3Lcd8sendDataEPhh>:
    15c8:	cf 92       	push	r12
    15ca:	df 92       	push	r13
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	1f 92       	push	r1
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	6c 01       	movw	r12, r24
    15e0:	8b b1       	in	r24, 0x0b	; 11
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	80 61       	ori	r24, 0x10	; 16
    15e8:	8b b9       	out	0x0b, r24	; 11
    15ea:	86 01       	movw	r16, r12
    15ec:	e6 2e       	mov	r14, r22
    15ee:	f1 2c       	mov	r15, r1
    15f0:	c8 01       	movw	r24, r16
    15f2:	8c 19       	sub	r24, r12
    15f4:	9d 09       	sbc	r25, r13
    15f6:	8e 15       	cp	r24, r14
    15f8:	9f 05       	cpc	r25, r15
    15fa:	34 f4       	brge	.+12     	; 0x1608 <_ZN3Lcd8sendDataEPhh+0x40>
    15fc:	f8 01       	movw	r30, r16
    15fe:	81 91       	ld	r24, Z+
    1600:	8f 01       	movw	r16, r30
    1602:	0e 94 ae 0a 	call	0x155c	; 0x155c <_ZN3Lcd8sendByteEh>
    1606:	f4 cf       	rjmp	.-24     	; 0x15f0 <_ZN3Lcd8sendDataEPhh+0x28>
    1608:	0f 90       	pop	r0
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	ff 90       	pop	r15
    1614:	ef 90       	pop	r14
    1616:	df 90       	pop	r13
    1618:	cf 90       	pop	r12
    161a:	08 95       	ret

0000161c <_ZN3Lcd8cmpltCmdEv>:
    161c:	8b b1       	in	r24, 0x0b	; 11
    161e:	83 78       	andi	r24, 0x83	; 131
    1620:	80 66       	ori	r24, 0x60	; 96
    1622:	8b b9       	out	0x0b, r24	; 11
    1624:	08 95       	ret

00001626 <_ZN3Lcd2onEv>:
    1626:	f8 94       	cli
    1628:	89 e2       	ldi	r24, 0x29	; 41
    162a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3Lcd7sendCmdEh>
    162e:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN3Lcd8cmpltCmdEv>
    1632:	78 94       	sei
    1634:	08 95       	ret

00001636 <_ZN3Lcd9sleep_outEv>:
    1636:	f8 94       	cli
    1638:	81 e1       	ldi	r24, 0x11	; 17
    163a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3Lcd7sendCmdEh>
    163e:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN3Lcd8cmpltCmdEv>
    1642:	78 94       	sei
    1644:	08 95       	ret

00001646 <_ZN3Lcd10mem_accessEv>:
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	1f 92       	push	r1
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	80 ea       	ldi	r24, 0xA0	; 160
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	f8 94       	cli
    1656:	86 e3       	ldi	r24, 0x36	; 54
    1658:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3Lcd7sendCmdEh>
    165c:	61 e0       	ldi	r22, 0x01	; 1
    165e:	ce 01       	movw	r24, r28
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN3Lcd8sendDataEPhh>
    1666:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN3Lcd8cmpltCmdEv>
    166a:	8a e3       	ldi	r24, 0x3A	; 58
    166c:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3Lcd7sendCmdEh>
    1670:	86 e0       	ldi	r24, 0x06	; 6
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	ce 01       	movw	r24, r28
    1678:	01 96       	adiw	r24, 0x01	; 1
    167a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN3Lcd8sendDataEPhh>
    167e:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN3Lcd8cmpltCmdEv>
    1682:	78 94       	sei
    1684:	0f 90       	pop	r0
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <_ZN3Lcd11lcd_putcharEc>:
    168c:	ef 92       	push	r14
    168e:	ff 92       	push	r15
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	a4 97       	sbiw	r28, 0x24	; 36
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	08 2f       	mov	r16, r24
    16aa:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <_ZN3Lcd6cursorE>
    16ae:	1c e0       	ldi	r17, 0x0C	; 12
    16b0:	81 9f       	mul	r24, r17
    16b2:	10 2d       	mov	r17, r0
    16b4:	11 24       	eor	r1, r1
    16b6:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <_ZN3Lcd6cursorE+0x2>
    16ba:	88 0f       	add	r24, r24
    16bc:	88 0f       	add	r24, r24
    16be:	88 0f       	add	r24, r24
    16c0:	f8 94       	cli
    16c2:	19 82       	std	Y+1, r1	; 0x01
    16c4:	8a 83       	std	Y+2, r24	; 0x02
    16c6:	1b 82       	std	Y+3, r1	; 0x03
    16c8:	89 5f       	subi	r24, 0xF9	; 249
    16ca:	8c 83       	std	Y+4, r24	; 0x04
    16cc:	8a e2       	ldi	r24, 0x2A	; 42
    16ce:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3Lcd7sendCmdEh>
    16d2:	64 e0       	ldi	r22, 0x04	; 4
    16d4:	ce 01       	movw	r24, r28
    16d6:	01 96       	adiw	r24, 0x01	; 1
    16d8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN3Lcd8sendDataEPhh>
    16dc:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN3Lcd8cmpltCmdEv>
    16e0:	19 82       	std	Y+1, r1	; 0x01
    16e2:	1a 83       	std	Y+2, r17	; 0x02
    16e4:	1b 82       	std	Y+3, r1	; 0x03
    16e6:	15 5f       	subi	r17, 0xF5	; 245
    16e8:	1c 83       	std	Y+4, r17	; 0x04
    16ea:	8b e2       	ldi	r24, 0x2B	; 43
    16ec:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3Lcd7sendCmdEh>
    16f0:	64 e0       	ldi	r22, 0x04	; 4
    16f2:	ce 01       	movw	r24, r28
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN3Lcd8sendDataEPhh>
    16fa:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN3Lcd8cmpltCmdEv>
    16fe:	be 01       	movw	r22, r28
    1700:	67 5e       	subi	r22, 0xE7	; 231
    1702:	7f 4f       	sbci	r23, 0xFF	; 255
    1704:	80 2f       	mov	r24, r16
    1706:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_getPixels>
    170a:	8c e2       	ldi	r24, 0x2C	; 44
    170c:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3Lcd7sendCmdEh>
    1710:	8e 01       	movw	r16, r28
    1712:	07 5e       	subi	r16, 0xE7	; 231
    1714:	1f 4f       	sbci	r17, 0xFF	; 255
    1716:	7e 01       	movw	r14, r28
    1718:	85 e2       	ldi	r24, 0x25	; 37
    171a:	e8 0e       	add	r14, r24
    171c:	f1 1c       	adc	r15, r1
    171e:	f8 01       	movw	r30, r16
    1720:	91 91       	ld	r25, Z+
    1722:	8f 01       	movw	r16, r30
    1724:	20 91 49 03 	lds	r18, 0x0349	; 0x800349 <_ZN3Lcd7fgColorE>
    1728:	30 91 4a 03 	lds	r19, 0x034A	; 0x80034a <_ZN3Lcd7fgColorE+0x1>
    172c:	40 91 4b 03 	lds	r20, 0x034B	; 0x80034b <_ZN3Lcd7fgColorE+0x2>
    1730:	50 91 46 03 	lds	r21, 0x0346	; 0x800346 <_ZN3Lcd7bgColorE>
    1734:	60 91 47 03 	lds	r22, 0x0347	; 0x800347 <_ZN3Lcd7bgColorE+0x1>
    1738:	70 91 48 03 	lds	r23, 0x0348	; 0x800348 <_ZN3Lcd7bgColorE+0x2>
    173c:	fe 01       	movw	r30, r28
    173e:	31 96       	adiw	r30, 0x01	; 1
    1740:	83 e0       	ldi	r24, 0x03	; 3
    1742:	90 ff       	sbrs	r25, 0
    1744:	04 c0       	rjmp	.+8      	; 0x174e <_ZN3Lcd11lcd_putcharEc+0xc2>
    1746:	20 83       	st	Z, r18
    1748:	31 83       	std	Z+1, r19	; 0x01
    174a:	42 83       	std	Z+2, r20	; 0x02
    174c:	03 c0       	rjmp	.+6      	; 0x1754 <_ZN3Lcd11lcd_putcharEc+0xc8>
    174e:	50 83       	st	Z, r21
    1750:	61 83       	std	Z+1, r22	; 0x01
    1752:	72 83       	std	Z+2, r23	; 0x02
    1754:	96 95       	lsr	r25
    1756:	8d 5f       	subi	r24, 0xFD	; 253
    1758:	33 96       	adiw	r30, 0x03	; 3
    175a:	8b 31       	cpi	r24, 0x1B	; 27
    175c:	91 f7       	brne	.-28     	; 0x1742 <_ZN3Lcd11lcd_putcharEc+0xb6>
    175e:	68 e1       	ldi	r22, 0x18	; 24
    1760:	ce 01       	movw	r24, r28
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN3Lcd8sendDataEPhh>
    1768:	0e 15       	cp	r16, r14
    176a:	1f 05       	cpc	r17, r15
    176c:	c1 f6       	brne	.-80     	; 0x171e <_ZN3Lcd11lcd_putcharEc+0x92>
    176e:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN3Lcd8cmpltCmdEv>
    1772:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <_ZN3Lcd6cursorE+0x2>
    1776:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <_ZN3Lcd6cursorE+0x3>
    177a:	01 96       	adiw	r24, 0x01	; 1
    177c:	84 31       	cpi	r24, 0x14	; 20
    177e:	91 05       	cpc	r25, r1
    1780:	29 f0       	breq	.+10     	; 0x178c <_ZN3Lcd11lcd_putcharEc+0x100>
    1782:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <_ZN3Lcd6cursorE+0x3>
    1786:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <_ZN3Lcd6cursorE+0x2>
    178a:	15 c0       	rjmp	.+42     	; 0x17b6 <_ZN3Lcd11lcd_putcharEc+0x12a>
    178c:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <_ZN3Lcd6cursorE+0x3>
    1790:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <_ZN3Lcd6cursorE+0x2>
    1794:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <_ZN3Lcd6cursorE>
    1798:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <_ZN3Lcd6cursorE+0x1>
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	8a 30       	cpi	r24, 0x0A	; 10
    17a0:	91 05       	cpc	r25, r1
    17a2:	29 f0       	breq	.+10     	; 0x17ae <_ZN3Lcd11lcd_putcharEc+0x122>
    17a4:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <_ZN3Lcd6cursorE+0x1>
    17a8:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <_ZN3Lcd6cursorE>
    17ac:	04 c0       	rjmp	.+8      	; 0x17b6 <_ZN3Lcd11lcd_putcharEc+0x12a>
    17ae:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <_ZN3Lcd6cursorE+0x1>
    17b2:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <_ZN3Lcd6cursorE>
    17b6:	78 94       	sei
    17b8:	a4 96       	adiw	r28, 0x24	; 36
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	ff 90       	pop	r15
    17ce:	ef 90       	pop	r14
    17d0:	08 95       	ret

000017d2 <_ZN3Lcd8drawCharEchhh9_pixColorS0_>:
    17d2:	6f 92       	push	r6
    17d4:	7f 92       	push	r7
    17d6:	8f 92       	push	r8
    17d8:	9f 92       	push	r9
    17da:	af 92       	push	r10
    17dc:	cf 92       	push	r12
    17de:	df 92       	push	r13
    17e0:	ef 92       	push	r14
    17e2:	ff 92       	push	r15
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	a4 97       	sbiw	r28, 0x24	; 36
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	76 2e       	mov	r7, r22
    17fe:	f4 2e       	mov	r15, r20
    1800:	12 2f       	mov	r17, r18
    1802:	44 23       	and	r20, r20
    1804:	59 f0       	breq	.+22     	; 0x181c <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x4a>
    1806:	10 91 42 03 	lds	r17, 0x0342	; 0x800342 <_ZN3Lcd6cursorE>
    180a:	8c e0       	ldi	r24, 0x0C	; 12
    180c:	18 9f       	mul	r17, r24
    180e:	10 2d       	mov	r17, r0
    1810:	11 24       	eor	r1, r1
    1812:	00 91 44 03 	lds	r16, 0x0344	; 0x800344 <_ZN3Lcd6cursorE+0x2>
    1816:	00 0f       	add	r16, r16
    1818:	00 0f       	add	r16, r16
    181a:	00 0f       	add	r16, r16
    181c:	f8 94       	cli
    181e:	19 82       	std	Y+1, r1	; 0x01
    1820:	0a 83       	std	Y+2, r16	; 0x02
    1822:	1b 82       	std	Y+3, r1	; 0x03
    1824:	09 5f       	subi	r16, 0xF9	; 249
    1826:	0c 83       	std	Y+4, r16	; 0x04
    1828:	8a e2       	ldi	r24, 0x2A	; 42
    182a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3Lcd7sendCmdEh>
    182e:	64 e0       	ldi	r22, 0x04	; 4
    1830:	ce 01       	movw	r24, r28
    1832:	01 96       	adiw	r24, 0x01	; 1
    1834:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN3Lcd8sendDataEPhh>
    1838:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN3Lcd8cmpltCmdEv>
    183c:	19 82       	std	Y+1, r1	; 0x01
    183e:	1a 83       	std	Y+2, r17	; 0x02
    1840:	1b 82       	std	Y+3, r1	; 0x03
    1842:	15 5f       	subi	r17, 0xF5	; 245
    1844:	1c 83       	std	Y+4, r17	; 0x04
    1846:	8b e2       	ldi	r24, 0x2B	; 43
    1848:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3Lcd7sendCmdEh>
    184c:	64 e0       	ldi	r22, 0x04	; 4
    184e:	ce 01       	movw	r24, r28
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN3Lcd8sendDataEPhh>
    1856:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN3Lcd8cmpltCmdEv>
    185a:	be 01       	movw	r22, r28
    185c:	67 5e       	subi	r22, 0xE7	; 231
    185e:	7f 4f       	sbci	r23, 0xFF	; 255
    1860:	87 2d       	mov	r24, r7
    1862:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_getPixels>
    1866:	8c e2       	ldi	r24, 0x2C	; 44
    1868:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3Lcd7sendCmdEh>
    186c:	8e 01       	movw	r16, r28
    186e:	07 5e       	subi	r16, 0xE7	; 231
    1870:	1f 4f       	sbci	r17, 0xFF	; 255
    1872:	3e 01       	movw	r6, r28
    1874:	85 e2       	ldi	r24, 0x25	; 37
    1876:	68 0e       	add	r6, r24
    1878:	71 1c       	adc	r7, r1
    187a:	f8 01       	movw	r30, r16
    187c:	91 91       	ld	r25, Z+
    187e:	8f 01       	movw	r16, r30
    1880:	fe 01       	movw	r30, r28
    1882:	31 96       	adiw	r30, 0x01	; 1
    1884:	83 e0       	ldi	r24, 0x03	; 3
    1886:	90 ff       	sbrs	r25, 0
    1888:	04 c0       	rjmp	.+8      	; 0x1892 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0xc0>
    188a:	c0 82       	st	Z, r12
    188c:	d1 82       	std	Z+1, r13	; 0x01
    188e:	e2 82       	std	Z+2, r14	; 0x02
    1890:	03 c0       	rjmp	.+6      	; 0x1898 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0xc6>
    1892:	80 82       	st	Z, r8
    1894:	91 82       	std	Z+1, r9	; 0x01
    1896:	a2 82       	std	Z+2, r10	; 0x02
    1898:	96 95       	lsr	r25
    189a:	8d 5f       	subi	r24, 0xFD	; 253
    189c:	33 96       	adiw	r30, 0x03	; 3
    189e:	8b 31       	cpi	r24, 0x1B	; 27
    18a0:	91 f7       	brne	.-28     	; 0x1886 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0xb4>
    18a2:	68 e1       	ldi	r22, 0x18	; 24
    18a4:	ce 01       	movw	r24, r28
    18a6:	01 96       	adiw	r24, 0x01	; 1
    18a8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN3Lcd8sendDataEPhh>
    18ac:	06 15       	cp	r16, r6
    18ae:	17 05       	cpc	r17, r7
    18b0:	21 f7       	brne	.-56     	; 0x187a <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0xa8>
    18b2:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN3Lcd8cmpltCmdEv>
    18b6:	ff 20       	and	r15, r15
    18b8:	11 f1       	breq	.+68     	; 0x18fe <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x12c>
    18ba:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <_ZN3Lcd6cursorE+0x2>
    18be:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <_ZN3Lcd6cursorE+0x3>
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	84 31       	cpi	r24, 0x14	; 20
    18c6:	91 05       	cpc	r25, r1
    18c8:	29 f0       	breq	.+10     	; 0x18d4 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x102>
    18ca:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <_ZN3Lcd6cursorE+0x3>
    18ce:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <_ZN3Lcd6cursorE+0x2>
    18d2:	15 c0       	rjmp	.+42     	; 0x18fe <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x12c>
    18d4:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <_ZN3Lcd6cursorE+0x3>
    18d8:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <_ZN3Lcd6cursorE+0x2>
    18dc:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <_ZN3Lcd6cursorE>
    18e0:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <_ZN3Lcd6cursorE+0x1>
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	8a 30       	cpi	r24, 0x0A	; 10
    18e8:	91 05       	cpc	r25, r1
    18ea:	29 f0       	breq	.+10     	; 0x18f6 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x124>
    18ec:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <_ZN3Lcd6cursorE+0x1>
    18f0:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <_ZN3Lcd6cursorE>
    18f4:	04 c0       	rjmp	.+8      	; 0x18fe <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x12c>
    18f6:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <_ZN3Lcd6cursorE+0x1>
    18fa:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <_ZN3Lcd6cursorE>
    18fe:	78 94       	sei
    1900:	a4 96       	adiw	r28, 0x24	; 36
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	ff 90       	pop	r15
    1916:	ef 90       	pop	r14
    1918:	df 90       	pop	r13
    191a:	cf 90       	pop	r12
    191c:	af 90       	pop	r10
    191e:	9f 90       	pop	r9
    1920:	8f 90       	pop	r8
    1922:	7f 90       	pop	r7
    1924:	6f 90       	pop	r6
    1926:	08 95       	ret

00001928 <_ZN3Lcd7clrScrnEv>:
    1928:	6f 92       	push	r6
    192a:	7f 92       	push	r7
    192c:	8f 92       	push	r8
    192e:	ef 92       	push	r14
    1930:	ff 92       	push	r15
    1932:	0f 93       	push	r16
    1934:	1f 93       	push	r17
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	27 97       	sbiw	r28, 0x07	; 7
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	60 90 46 03 	lds	r6, 0x0346	; 0x800346 <_ZN3Lcd7bgColorE>
    194e:	70 90 47 03 	lds	r7, 0x0347	; 0x800347 <_ZN3Lcd7bgColorE+0x1>
    1952:	80 90 48 03 	lds	r8, 0x0348	; 0x800348 <_ZN3Lcd7bgColorE+0x2>
    1956:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <_ZN3Lcd7bgColorE>
    195a:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <_ZN3Lcd7bgColorE+0x1>
    195e:	8c e4       	ldi	r24, 0x4C	; 76
    1960:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <_ZN3Lcd7bgColorE+0x2>
    1964:	f8 94       	cli
    1966:	19 82       	std	Y+1, r1	; 0x01
    1968:	1a 82       	std	Y+2, r1	; 0x02
    196a:	1b 82       	std	Y+3, r1	; 0x03
    196c:	80 ea       	ldi	r24, 0xA0	; 160
    196e:	8c 83       	std	Y+4, r24	; 0x04
    1970:	8a e2       	ldi	r24, 0x2A	; 42
    1972:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3Lcd7sendCmdEh>
    1976:	64 e0       	ldi	r22, 0x04	; 4
    1978:	ce 01       	movw	r24, r28
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN3Lcd8sendDataEPhh>
    1980:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN3Lcd8cmpltCmdEv>
    1984:	19 82       	std	Y+1, r1	; 0x01
    1986:	1a 82       	std	Y+2, r1	; 0x02
    1988:	1b 82       	std	Y+3, r1	; 0x03
    198a:	80 e8       	ldi	r24, 0x80	; 128
    198c:	8c 83       	std	Y+4, r24	; 0x04
    198e:	8b e2       	ldi	r24, 0x2B	; 43
    1990:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3Lcd7sendCmdEh>
    1994:	64 e0       	ldi	r22, 0x04	; 4
    1996:	ce 01       	movw	r24, r28
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN3Lcd8sendDataEPhh>
    199e:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN3Lcd8cmpltCmdEv>
    19a2:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <_ZN3Lcd7bgColorE>
    19a6:	8d 83       	std	Y+5, r24	; 0x05
    19a8:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <_ZN3Lcd7bgColorE+0x1>
    19ac:	8e 83       	std	Y+6, r24	; 0x06
    19ae:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <_ZN3Lcd7bgColorE+0x2>
    19b2:	8f 83       	std	Y+7, r24	; 0x07
    19b4:	8c e2       	ldi	r24, 0x2C	; 44
    19b6:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3Lcd7sendCmdEh>
    19ba:	00 e8       	ldi	r16, 0x80	; 128
    19bc:	10 e0       	ldi	r17, 0x00	; 0
    19be:	80 ea       	ldi	r24, 0xA0	; 160
    19c0:	e8 2e       	mov	r14, r24
    19c2:	f1 2c       	mov	r15, r1
    19c4:	63 e0       	ldi	r22, 0x03	; 3
    19c6:	ce 01       	movw	r24, r28
    19c8:	05 96       	adiw	r24, 0x05	; 5
    19ca:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN3Lcd8sendDataEPhh>
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	e8 1a       	sub	r14, r24
    19d2:	f1 08       	sbc	r15, r1
    19d4:	b9 f7       	brne	.-18     	; 0x19c4 <_ZN3Lcd7clrScrnEv+0x9c>
    19d6:	01 50       	subi	r16, 0x01	; 1
    19d8:	11 09       	sbc	r17, r1
    19da:	89 f7       	brne	.-30     	; 0x19be <_ZN3Lcd7clrScrnEv+0x96>
    19dc:	78 94       	sei
    19de:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <_ZN3Lcd6cursorE+0x1>
    19e2:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <_ZN3Lcd6cursorE>
    19e6:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <_ZN3Lcd6cursorE+0x3>
    19ea:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <_ZN3Lcd6cursorE+0x2>
    19ee:	60 92 46 03 	sts	0x0346, r6	; 0x800346 <_ZN3Lcd7bgColorE>
    19f2:	70 92 47 03 	sts	0x0347, r7	; 0x800347 <_ZN3Lcd7bgColorE+0x1>
    19f6:	80 92 48 03 	sts	0x0348, r8	; 0x800348 <_ZN3Lcd7bgColorE+0x2>
    19fa:	27 96       	adiw	r28, 0x07	; 7
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	ff 90       	pop	r15
    1a10:	ef 90       	pop	r14
    1a12:	8f 90       	pop	r8
    1a14:	7f 90       	pop	r7
    1a16:	6f 90       	pop	r6
    1a18:	08 95       	ret

00001a1a <_ZN3LcdC1Ev>:
    1a1a:	0f 93       	push	r16
    1a1c:	1f 93       	push	r17
    1a1e:	cf 93       	push	r28
    1a20:	df 93       	push	r29
    1a22:	1f 92       	push	r1
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	20 91 41 03 	lds	r18, 0x0341	; 0x800341 <_ZN3Lcd14lcdInitializedE>
    1a2c:	21 11       	cpse	r18, r1
    1a2e:	4b c0       	rjmp	.+150    	; 0x1ac6 <_ZN3LcdC1Ev+0xac>
    1a30:	8c 01       	movw	r16, r24
    1a32:	8a b1       	in	r24, 0x0a	; 10
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	8c 67       	ori	r24, 0x7C	; 124
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	8a b9       	out	0x0a, r24	; 10
    1a40:	8b b1       	in	r24, 0x0b	; 11
    1a42:	89 83       	std	Y+1, r24	; 0x01
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	83 78       	andi	r24, 0x83	; 131
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	80 66       	ori	r24, 0x60	; 96
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	8b b9       	out	0x0b, r24	; 11
    1a54:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <vfoDataConst+0xa5>
    1a58:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <vfoDataConst+0xa6>
    1a5c:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <vfoDataConst+0xa7>
    1a60:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <_ZN3Lcd7fgColorE>
    1a64:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <_ZN3Lcd7fgColorE+0x1>
    1a68:	a0 93 4b 03 	sts	0x034B, r26	; 0x80034b <_ZN3Lcd7fgColorE+0x2>
    1a6c:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <_ZN3Lcd7bgColorE>
    1a70:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <_ZN3Lcd7bgColorE+0x1>
    1a74:	8c e4       	ldi	r24, 0x4C	; 76
    1a76:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <_ZN3Lcd7bgColorE+0x2>
    1a7a:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <_ZN3Lcd6cursorE+0x3>
    1a7e:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <_ZN3Lcd6cursorE+0x2>
    1a82:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <_ZN3Lcd6cursorE+0x1>
    1a86:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <_ZN3Lcd6cursorE>
    1a8a:	c8 01       	movw	r24, r16
    1a8c:	0e 94 8f 0a 	call	0x151e	; 0x151e <_ZN3Lcd5resetEv>
    1a90:	c8 01       	movw	r24, r16
    1a92:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN3Lcd10mem_accessEv>
    1a96:	6c e0       	ldi	r22, 0x0C	; 12
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	0e 94 16 04 	call	0x82c	; 0x82c <_ZN5Clock5delayEm>
    1aa2:	c8 01       	movw	r24, r16
    1aa4:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN3Lcd9sleep_outEv>
    1aa8:	6c e0       	ldi	r22, 0x0C	; 12
    1aaa:	70 e0       	ldi	r23, 0x00	; 0
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 16 04 	call	0x82c	; 0x82c <_ZN5Clock5delayEm>
    1ab4:	c8 01       	movw	r24, r16
    1ab6:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3Lcd2onEv>
    1aba:	c8 01       	movw	r24, r16
    1abc:	0e 94 94 0c 	call	0x1928	; 0x1928 <_ZN3Lcd7clrScrnEv>
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <_ZN3Lcd14lcdInitializedE>
    1ac6:	0f 90       	pop	r0
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	08 95       	ret

00001ad2 <_ZN3Lcd4putsEPc9_pixColorS1_>:
    1ad2:	2f 92       	push	r2
    1ad4:	3f 92       	push	r3
    1ad6:	4f 92       	push	r4
    1ad8:	5f 92       	push	r5
    1ada:	6f 92       	push	r6
    1adc:	8f 92       	push	r8
    1ade:	9f 92       	push	r9
    1ae0:	af 92       	push	r10
    1ae2:	cf 92       	push	r12
    1ae4:	df 92       	push	r13
    1ae6:	ef 92       	push	r14
    1ae8:	ff 92       	push	r15
    1aea:	0f 93       	push	r16
    1aec:	cf 93       	push	r28
    1aee:	df 93       	push	r29
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <_ZN3Lcd4putsEPc9_pixColorS1_+0x20>
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <_ZN3Lcd4putsEPc9_pixColorS1_+0x22>
    1af4:	1f 92       	push	r1
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	9d 83       	std	Y+5, r25	; 0x05
    1afc:	8c 83       	std	Y+4, r24	; 0x04
    1afe:	29 01       	movw	r4, r18
    1b00:	64 2e       	mov	r6, r20
    1b02:	e9 82       	std	Y+1, r14	; 0x01
    1b04:	fa 82       	std	Y+2, r15	; 0x02
    1b06:	0b 83       	std	Y+3, r16	; 0x03
    1b08:	1b 01       	movw	r2, r22
    1b0a:	f1 01       	movw	r30, r2
    1b0c:	61 91       	ld	r22, Z+
    1b0e:	1f 01       	movw	r2, r30
    1b10:	66 23       	and	r22, r22
    1b12:	79 f0       	breq	.+30     	; 0x1b32 <_ZN3Lcd4putsEPc9_pixColorS1_+0x60>
    1b14:	89 80       	ldd	r8, Y+1	; 0x01
    1b16:	9a 80       	ldd	r9, Y+2	; 0x02
    1b18:	ab 80       	ldd	r10, Y+3	; 0x03
    1b1a:	e6 2c       	mov	r14, r6
    1b1c:	62 01       	movw	r12, r4
    1b1e:	00 91 44 03 	lds	r16, 0x0344	; 0x800344 <_ZN3Lcd6cursorE+0x2>
    1b22:	20 91 42 03 	lds	r18, 0x0342	; 0x800342 <_ZN3Lcd6cursorE>
    1b26:	41 e0       	ldi	r20, 0x01	; 1
    1b28:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN3Lcd8drawCharEchhh9_pixColorS0_>
    1b30:	ec cf       	rjmp	.-40     	; 0x1b0a <_ZN3Lcd4putsEPc9_pixColorS1_+0x38>
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	0f 91       	pop	r16
    1b42:	ff 90       	pop	r15
    1b44:	ef 90       	pop	r14
    1b46:	df 90       	pop	r13
    1b48:	cf 90       	pop	r12
    1b4a:	af 90       	pop	r10
    1b4c:	9f 90       	pop	r9
    1b4e:	8f 90       	pop	r8
    1b50:	6f 90       	pop	r6
    1b52:	5f 90       	pop	r5
    1b54:	4f 90       	pop	r4
    1b56:	3f 90       	pop	r3
    1b58:	2f 90       	pop	r2
    1b5a:	08 95       	ret

00001b5c <_ZN3Lcd6gotoxyEhh>:
    1b5c:	e2 e4       	ldi	r30, 0x42	; 66
    1b5e:	f3 e0       	ldi	r31, 0x03	; 3
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	71 83       	std	Z+1, r23	; 0x01
    1b64:	60 83       	st	Z, r22
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	53 83       	std	Z+3, r21	; 0x03
    1b6a:	42 83       	std	Z+2, r20	; 0x02
    1b6c:	08 95       	ret

00001b6e <_Z8lcd_putccP6__file>:

//
// fprintf wrapper
//
int lcd_putc(char c, FILE *f) {
	Lcd::lcd_putchar(c);
    1b6e:	0e 94 46 0b 	call	0x168c	; 0x168c <_ZN3Lcd11lcd_putcharEc>
	return 0;
}
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	08 95       	ret

00001b78 <_ZN6params8callbackEv>:
	initParams(l);
}


void params::callback(void) {
	exitParamMode = true;
    1b78:	84 5b       	subi	r24, 0xB4	; 180
    1b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7c:	21 e0       	ldi	r18, 0x01	; 1
    1b7e:	fc 01       	movw	r30, r24
    1b80:	20 83       	st	Z, r18
    1b82:	08 95       	ret

00001b84 <_Z6memcpyPvPKvj>:
	"PD"
};



void * memcpy(void *dest, const void* src, size_t cnt) {
    1b84:	fb 01       	movw	r30, r22
    1b86:	dc 01       	movw	r26, r24
    1b88:	48 0f       	add	r20, r24
    1b8a:	59 1f       	adc	r21, r25
	char *pdst = (char *) dest;
	char *psrc = (char *)src;

	while (cnt--) {
    1b8c:	a4 17       	cp	r26, r20
    1b8e:	b5 07       	cpc	r27, r21
    1b90:	19 f0       	breq	.+6      	; 0x1b98 <_Z6memcpyPvPKvj+0x14>
		*pdst++ = *psrc++;
    1b92:	21 91       	ld	r18, Z+
    1b94:	2d 93       	st	X+, r18

void * memcpy(void *dest, const void* src, size_t cnt) {
	char *pdst = (char *) dest;
	char *psrc = (char *)src;

	while (cnt--) {
    1b96:	fa cf       	rjmp	.-12     	; 0x1b8c <_Z6memcpyPvPKvj+0x8>
		*pdst++ = *psrc++;
	}
	return dest;
}
    1b98:	08 95       	ret

00001b9a <_ZN6params10initParamsEP3Lcd>:

void params::callback(void) {
	exitParamMode = true;
}

void params::initParams(Lcd *lcd) {
    1b9a:	2f 92       	push	r2
    1b9c:	3f 92       	push	r3
    1b9e:	4f 92       	push	r4
    1ba0:	5f 92       	push	r5
    1ba2:	6f 92       	push	r6
    1ba4:	7f 92       	push	r7
    1ba6:	8f 92       	push	r8
    1ba8:	9f 92       	push	r9
    1baa:	af 92       	push	r10
    1bac:	bf 92       	push	r11
    1bae:	cf 92       	push	r12
    1bb0:	df 92       	push	r13
    1bb2:	ef 92       	push	r14
    1bb4:	ff 92       	push	r15
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	62 97       	sbiw	r28, 0x12	; 18
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	6c 01       	movw	r12, r24
    1bd0:	4b 01       	movw	r8, r22
	uint16_t line;
	uint16_t col;
	char *valp = NULL;
	char buf[16];

	curParam = PARAM_STEP;
    1bd2:	5c 01       	movw	r10, r24
    1bd4:	2b e4       	ldi	r18, 0x4B	; 75
    1bd6:	a2 0e       	add	r10, r18
    1bd8:	b1 1c       	adc	r11, r1
    1bda:	d5 01       	movw	r26, r10
    1bdc:	1c 92       	st	X, r1
}

void params::initParams(Lcd *lcd) {
	uint16_t line;
	uint16_t col;
	char *valp = NULL;
    1bde:	31 2c       	mov	r3, r1
    1be0:	10 e0       	ldi	r17, 0x00	; 0

	curParam = PARAM_STEP;

	while (curParam != PARAM_END) {
		line = param_display[curParam].label_psn.line;
		col =  param_display[curParam].label_psn.col;
    1be2:	5b e0       	ldi	r21, 0x0B	; 11
    1be4:	25 2e       	mov	r2, r21
		lcd->gotoxy(line,col);
		lcd->puts(param_display[curParam].label, fgc, bgc);
    1be6:	2c 01       	movw	r4, r24
    1be8:	b5 e5       	ldi	r27, 0x55	; 85
    1bea:	4b 0e       	add	r4, r27
    1bec:	51 1c       	adc	r5, r1
    1bee:	fc 01       	movw	r30, r24
    1bf0:	ee 5a       	subi	r30, 0xAE	; 174
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	fa 8b       	std	Y+18, r31	; 0x12
    1bf6:	e9 8b       	std	Y+17, r30	; 0x11
			case PARAM_KEY:
				valp = key_strings[key];
				break;
				
			case PARAM_KEY_SPEED:
				sprintf(buf,"%d", speed);
    1bf8:	ce 01       	movw	r24, r28
    1bfa:	01 96       	adiw	r24, 0x01	; 1
    1bfc:	3c 01       	movw	r6, r24
	char *valp = NULL;
	char buf[16];

	curParam = PARAM_STEP;

	while (curParam != PARAM_END) {
    1bfe:	d5 01       	movw	r26, r10
    1c00:	8c 91       	ld	r24, X
    1c02:	86 30       	cpi	r24, 0x06	; 6
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <_ZN6params10initParamsEP3Lcd+0x6e>
    1c06:	91 c0       	rjmp	.+290    	; 0x1d2a <_ZN6params10initParamsEP3Lcd+0x190>
		line = param_display[curParam].label_psn.line;
		col =  param_display[curParam].label_psn.col;
    1c08:	f6 01       	movw	r30, r12
    1c0a:	28 9e       	mul	r2, r24
    1c0c:	e0 0d       	add	r30, r0
    1c0e:	f1 1d       	adc	r31, r1
    1c10:	11 24       	eor	r1, r1
		lcd->gotoxy(line,col);
    1c12:	44 85       	ldd	r20, Z+12	; 0x0c
    1c14:	62 85       	ldd	r22, Z+10	; 0x0a
    1c16:	c4 01       	movw	r24, r8
    1c18:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_ZN3Lcd6gotoxyEhh>
		lcd->puts(param_display[curParam].label, fgc, bgc);
    1c1c:	f2 01       	movw	r30, r4
    1c1e:	e0 80       	ld	r14, Z
    1c20:	f1 80       	ldd	r15, Z+1	; 0x01
    1c22:	02 81       	ldd	r16, Z+2	; 0x02
    1c24:	a9 89       	ldd	r26, Y+17	; 0x11
    1c26:	ba 89       	ldd	r27, Y+18	; 0x12
    1c28:	2d 91       	ld	r18, X+
    1c2a:	3d 91       	ld	r19, X+
    1c2c:	4c 91       	ld	r20, X
    1c2e:	f5 01       	movw	r30, r10
    1c30:	80 81       	ld	r24, Z
    1c32:	f6 01       	movw	r30, r12
    1c34:	28 9e       	mul	r2, r24
    1c36:	e0 0d       	add	r30, r0
    1c38:	f1 1d       	adc	r31, r1
    1c3a:	11 24       	eor	r1, r1
    1c3c:	66 85       	ldd	r22, Z+14	; 0x0e
    1c3e:	77 85       	ldd	r23, Z+15	; 0x0f
    1c40:	c4 01       	movw	r24, r8
    1c42:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <_ZN3Lcd4putsEPc9_pixColorS1_>

		line = param_display[curParam].val_psn.line;
    1c46:	d5 01       	movw	r26, r10
    1c48:	8c 91       	ld	r24, X
		col =  param_display[curParam].val_psn.col;
    1c4a:	f6 01       	movw	r30, r12
    1c4c:	28 9e       	mul	r2, r24
    1c4e:	e0 0d       	add	r30, r0
    1c50:	f1 1d       	adc	r31, r1
    1c52:	11 24       	eor	r1, r1
		lcd->gotoxy(line,col);
    1c54:	42 89       	ldd	r20, Z+18	; 0x12
    1c56:	60 89       	ldd	r22, Z+16	; 0x10
    1c58:	c4 01       	movw	r24, r8
    1c5a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_ZN3Lcd6gotoxyEhh>
		switch(curParam) {
    1c5e:	f5 01       	movw	r30, r10
    1c60:	80 81       	ld	r24, Z
    1c62:	82 30       	cpi	r24, 0x02	; 2
    1c64:	31 f1       	breq	.+76     	; 0x1cb2 <_ZN6params10initParamsEP3Lcd+0x118>
    1c66:	70 f4       	brcc	.+28     	; 0x1c84 <_ZN6params10initParamsEP3Lcd+0xea>
    1c68:	88 23       	and	r24, r24
    1c6a:	d1 f0       	breq	.+52     	; 0x1ca0 <_ZN6params10initParamsEP3Lcd+0x106>
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <_ZN6params10initParamsEP3Lcd+0xd8>
    1c70:	49 c0       	rjmp	.+146    	; 0x1d04 <_ZN6params10initParamsEP3Lcd+0x16a>
			case PARAM_STEP:
				valp = step_strings[step];
				break;	
				
			case PARAM_BAND:
				valp = band_strings[band];
    1c72:	d6 01       	movw	r26, r12
    1c74:	13 96       	adiw	r26, 0x03	; 3
    1c76:	ec 91       	ld	r30, X
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	ee 0f       	add	r30, r30
    1c7c:	ff 1f       	adc	r31, r31
    1c7e:	e2 5c       	subi	r30, 0xC2	; 194
    1c80:	fe 4f       	sbci	r31, 0xFE	; 254
    1c82:	3e c0       	rjmp	.+124    	; 0x1d00 <_ZN6params10initParamsEP3Lcd+0x166>
		lcd->puts(param_display[curParam].label, fgc, bgc);

		line = param_display[curParam].val_psn.line;
		col =  param_display[curParam].val_psn.col;
		lcd->gotoxy(line,col);
		switch(curParam) {
    1c84:	84 30       	cpi	r24, 0x04	; 4
    1c86:	39 f1       	breq	.+78     	; 0x1cd6 <_ZN6params10initParamsEP3Lcd+0x13c>
    1c88:	e8 f0       	brcs	.+58     	; 0x1cc4 <_ZN6params10initParamsEP3Lcd+0x12a>
    1c8a:	85 30       	cpi	r24, 0x05	; 5
    1c8c:	d9 f5       	brne	.+118    	; 0x1d04 <_ZN6params10initParamsEP3Lcd+0x16a>
				sprintf(buf,"%d", speed);
				valp = buf;
				break;
				
			case PARAM_ACT_VFO:
				valp =  vfoact_strings[activeVfo];
    1c8e:	d6 01       	movw	r26, r12
    1c90:	15 96       	adiw	r26, 0x05	; 5
    1c92:	ec 91       	ld	r30, X
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	ee 0f       	add	r30, r30
    1c98:	ff 1f       	adc	r31, r31
    1c9a:	e6 5d       	subi	r30, 0xD6	; 214
    1c9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c9e:	30 c0       	rjmp	.+96     	; 0x1d00 <_ZN6params10initParamsEP3Lcd+0x166>
		line = param_display[curParam].val_psn.line;
		col =  param_display[curParam].val_psn.col;
		lcd->gotoxy(line,col);
		switch(curParam) {
			case PARAM_STEP:
				valp = step_strings[step];
    1ca0:	d6 01       	movw	r26, r12
    1ca2:	12 96       	adiw	r26, 0x02	; 2
    1ca4:	ec 91       	ld	r30, X
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	ee 0f       	add	r30, r30
    1caa:	ff 1f       	adc	r31, r31
    1cac:	ec 5c       	subi	r30, 0xCC	; 204
    1cae:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb0:	27 c0       	rjmp	.+78     	; 0x1d00 <_ZN6params10initParamsEP3Lcd+0x166>
			case PARAM_BAND:
				valp = band_strings[band];
				break;
				
			case PARAM_VFO:
				valp = vfo_strings[vfo];
    1cb2:	d6 01       	movw	r26, r12
    1cb4:	14 96       	adiw	r26, 0x04	; 4
    1cb6:	ec 91       	ld	r30, X
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	ee 0f       	add	r30, r30
    1cbc:	ff 1f       	adc	r31, r31
    1cbe:	e2 5d       	subi	r30, 0xD2	; 210
    1cc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc2:	1e c0       	rjmp	.+60     	; 0x1d00 <_ZN6params10initParamsEP3Lcd+0x166>
				break;
			
			case PARAM_KEY:
				valp = key_strings[key];
    1cc4:	d6 01       	movw	r26, r12
    1cc6:	17 96       	adiw	r26, 0x07	; 7
    1cc8:	ec 91       	ld	r30, X
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	ee 0f       	add	r30, r30
    1cce:	ff 1f       	adc	r31, r31
    1cd0:	ec 5d       	subi	r30, 0xDC	; 220
    1cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd4:	15 c0       	rjmp	.+42     	; 0x1d00 <_ZN6params10initParamsEP3Lcd+0x166>
				break;
				
			case PARAM_KEY_SPEED:
				sprintf(buf,"%d", speed);
    1cd6:	f6 01       	movw	r30, r12
    1cd8:	80 85       	ldd	r24, Z+8	; 0x08
    1cda:	1f 92       	push	r1
    1cdc:	8f 93       	push	r24
    1cde:	83 e6       	ldi	r24, 0x63	; 99
    1ce0:	92 e0       	ldi	r25, 0x02	; 2
    1ce2:	9f 93       	push	r25
    1ce4:	8f 93       	push	r24
    1ce6:	7f 92       	push	r7
    1ce8:	6f 92       	push	r6
    1cea:	0e 94 2c 19 	call	0x3258	; 0x3258 <sprintf>
				valp = buf;
				break;
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
				valp = key_strings[key];
				break;
				
			case PARAM_KEY_SPEED:
				sprintf(buf,"%d", speed);
				valp = buf;
    1cfa:	36 2c       	mov	r3, r6
    1cfc:	17 2d       	mov	r17, r7
				break;
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <_ZN6params10initParamsEP3Lcd+0x16a>
				
			case PARAM_ACT_VFO:
				valp =  vfoact_strings[activeVfo];
    1d00:	30 80       	ld	r3, Z
    1d02:	11 81       	ldd	r17, Z+1	; 0x01
				break;
						
			default:
				break;
		}
		lcd->puts(valp, fgc,bgc);
    1d04:	f2 01       	movw	r30, r4
    1d06:	e0 80       	ld	r14, Z
    1d08:	f1 80       	ldd	r15, Z+1	; 0x01
    1d0a:	02 81       	ldd	r16, Z+2	; 0x02
    1d0c:	a9 89       	ldd	r26, Y+17	; 0x11
    1d0e:	ba 89       	ldd	r27, Y+18	; 0x12
    1d10:	2d 91       	ld	r18, X+
    1d12:	3d 91       	ld	r19, X+
    1d14:	4c 91       	ld	r20, X
    1d16:	63 2d       	mov	r22, r3
    1d18:	71 2f       	mov	r23, r17
    1d1a:	c4 01       	movw	r24, r8
    1d1c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <_ZN3Lcd4putsEPc9_pixColorS1_>
		curParam = (param_t)((int)curParam + 1);
    1d20:	f5 01       	movw	r30, r10
    1d22:	80 81       	ld	r24, Z
    1d24:	8f 5f       	subi	r24, 0xFF	; 255
    1d26:	80 83       	st	Z, r24
	char *valp = NULL;
	char buf[16];

	curParam = PARAM_STEP;

	while (curParam != PARAM_END) {
    1d28:	6a cf       	rjmp	.-300    	; 0x1bfe <_ZN6params10initParamsEP3Lcd+0x64>
				break;
		}
		lcd->puts(valp, fgc,bgc);
		curParam = (param_t)((int)curParam + 1);
	}	
	curParam = PARAM_STEP;
    1d2a:	d5 01       	movw	r26, r10
    1d2c:	1c 92       	st	X, r1
}
    1d2e:	62 96       	adiw	r28, 0x12	; 18
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	df 90       	pop	r13
    1d48:	cf 90       	pop	r12
    1d4a:	bf 90       	pop	r11
    1d4c:	af 90       	pop	r10
    1d4e:	9f 90       	pop	r9
    1d50:	8f 90       	pop	r8
    1d52:	7f 90       	pop	r7
    1d54:	6f 90       	pop	r6
    1d56:	5f 90       	pop	r5
    1d58:	4f 90       	pop	r4
    1d5a:	3f 90       	pop	r3
    1d5c:	2f 90       	pop	r2
    1d5e:	08 95       	ret

00001d60 <_ZN6paramsC1EP8Graphics>:
	}
	return dest;
}


params::params(Graphics *l) {
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	ec 01       	movw	r28, r24
    1d6a:	8b 01       	movw	r16, r22
    1d6c:	8f ed       	ldi	r24, 0xDF	; 223
    1d6e:	92 e0       	ldi	r25, 0x02	; 2
    1d70:	99 83       	std	Y+1, r25	; 0x01
    1d72:	88 83       	st	Y, r24
	step = STEP_100HZ;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	8a 83       	std	Y+2, r24	; 0x02
	band = BAND_40;
    1d78:	82 e0       	ldi	r24, 0x02	; 2
    1d7a:	8b 83       	std	Y+3, r24	; 0x03
	vfo = VFOA;
    1d7c:	1c 82       	std	Y+4, r1	; 0x04
	activeVfo = RX;
    1d7e:	1d 82       	std	Y+5, r1	; 0x05
	mode = MODE_NORMAL;
    1d80:	1e 82       	std	Y+6, r1	; 0x06
	key = KEY_ST;
    1d82:	1f 82       	std	Y+7, r1	; 0x07
	speed = 18;
    1d84:	82 e1       	ldi	r24, 0x12	; 18
    1d86:	88 87       	std	Y+8, r24	; 0x08
	exitParamMode = false;
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e4 5b       	subi	r30, 0xB4	; 180
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	10 82       	st	Z, r1
	lcd = l;
    1d90:	34 96       	adiw	r30, 0x04	; 4
    1d92:	71 83       	std	Z+1, r23	; 0x01
    1d94:	60 83       	st	Z, r22
	tc = BLACK;
    1d96:	38 96       	adiw	r30, 0x08	; 8
    1d98:	10 82       	st	Z, r1
    1d9a:	31 96       	adiw	r30, 0x01	; 1
    1d9c:	10 82       	st	Z, r1
    1d9e:	31 96       	adiw	r30, 0x01	; 1
    1da0:	10 82       	st	Z, r1
	fgc = WHITE;
    1da2:	38 97       	sbiw	r30, 0x08	; 8
    1da4:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <vfoDataConst+0xa8>
    1da8:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <vfoDataConst+0xa9>
    1dac:	a0 91 3c 02 	lds	r26, 0x023C	; 0x80023c <vfoDataConst+0xaa>
    1db0:	80 83       	st	Z, r24
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	a2 83       	std	Z+2, r26	; 0x02
	bgc = LTGREEN;
    1db6:	33 96       	adiw	r30, 0x03	; 3
    1db8:	10 82       	st	Z, r1
    1dba:	31 96       	adiw	r30, 0x01	; 1
    1dbc:	10 82       	st	Z, r1
    1dbe:	31 96       	adiw	r30, 0x01	; 1
    1dc0:	8c e4       	ldi	r24, 0x4C	; 76
    1dc2:	80 83       	st	Z, r24

	memcpy(param_display,default_param_display, sizeof(param_display));
    1dc4:	42 e4       	ldi	r20, 0x42	; 66
    1dc6:	50 e0       	ldi	r21, 0x00	; 0
    1dc8:	60 e5       	ldi	r22, 0x50	; 80
    1dca:	71 e0       	ldi	r23, 0x01	; 1
    1dcc:	ce 01       	movw	r24, r28
    1dce:	09 96       	adiw	r24, 0x09	; 9
    1dd0:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <_Z6memcpyPvPKvj>
	initParams(l);
    1dd4:	b8 01       	movw	r22, r16
    1dd6:	ce 01       	movw	r24, r28
}
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	1f 91       	pop	r17
    1dde:	0f 91       	pop	r16
	tc = BLACK;
	fgc = WHITE;
	bgc = LTGREEN;

	memcpy(param_display,default_param_display, sizeof(param_display));
	initParams(l);
    1de0:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <_ZN6params10initParamsEP3Lcd>

00001de4 <_ZN6params7getStepEv>:
	curParam = PARAM_STEP;
}

step_t params::getStep(void) {
	return step;
}
    1de4:	fc 01       	movw	r30, r24
    1de6:	82 81       	ldd	r24, Z+2	; 0x02
    1de8:	08 95       	ret

00001dea <_ZN6params7getBandEv>:
 	
	
band_t params::getBand(void) {
	return band;
}
    1dea:	fc 01       	movw	r30, r24
    1dec:	83 81       	ldd	r24, Z+3	; 0x03
    1dee:	08 95       	ret

00001df0 <_ZN6params6getVfoEv>:
 	
	
vfo_select_t params::getVfo(void) {
	return vfo;
}
    1df0:	fc 01       	movw	r30, r24
    1df2:	84 81       	ldd	r24, Z+4	; 0x04
    1df4:	08 95       	ret

00001df6 <_ZN6params12getActiveVfoEv>:


vfo_actv_t params::getActiveVfo(void) {
	return activeVfo;
}
    1df6:	fc 01       	movw	r30, r24
    1df8:	85 81       	ldd	r24, Z+5	; 0x05
    1dfa:	08 95       	ret

00001dfc <_ZN6params7getModeEv>:
 	
	
mode_t	params::getMode(void) {
	return mode;
}
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	86 81       	ldd	r24, Z+6	; 0x06
    1e00:	08 95       	ret

00001e02 <_ZN6params7setModeE7_mode_t>:


void	params::setMode(mode_t newMode) {
	mode = newMode;
    1e02:	fc 01       	movw	r30, r24
    1e04:	66 83       	std	Z+6, r22	; 0x06
    1e06:	08 95       	ret

00001e08 <_ZN6params8getSpeedEv>:
}


uint8_t params::getSpeed(void) {
	return speed;
}
    1e08:	fc 01       	movw	r30, r24
    1e0a:	80 85       	ldd	r24, Z+8	; 0x08
    1e0c:	08 95       	ret

00001e0e <_ZN6params6getKeyEv>:
	

key_t params::getKey(void) {
	return key;
}
    1e0e:	fc 01       	movw	r30, r24
    1e10:	87 81       	ldd	r24, Z+7	; 0x07
    1e12:	08 95       	ret

00001e14 <_ZN6params12setActiveVfoE10vfo_actv_t>:

void params::setActiveVfo(vfo_actv_t rxtx) {
    1e14:	af 92       	push	r10
    1e16:	bf 92       	push	r11
    1e18:	cf 92       	push	r12
    1e1a:	df 92       	push	r13
    1e1c:	ef 92       	push	r14
    1e1e:	ff 92       	push	r15
    1e20:	0f 93       	push	r16
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	ec 01       	movw	r28, r24
char *valp = NULL;
uint16_t line;
uint16_t col;
pixColor pc;
	activeVfo = rxtx;
    1e28:	6d 83       	std	Y+5, r22	; 0x05
	valp =  vfoact_strings[activeVfo];
    1e2a:	e6 2f       	mov	r30, r22
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	ee 0f       	add	r30, r30
    1e30:	ff 1f       	adc	r31, r31
    1e32:	e6 5d       	subi	r30, 0xD6	; 214
    1e34:	fe 4f       	sbci	r31, 0xFE	; 254
    1e36:	a0 80       	ld	r10, Z
    1e38:	b1 80       	ldd	r11, Z+1	; 0x01
	line = param_display[PARAM_ACT_VFO].val_psn.line;
	col =  param_display[PARAM_ACT_VFO].val_psn.col;
    1e3a:	de 01       	movw	r26, r28
    1e3c:	a7 5b       	subi	r26, 0xB7	; 183
    1e3e:	bf 4f       	sbci	r27, 0xFF	; 255
uint16_t line;
uint16_t col;
pixColor pc;
	activeVfo = rxtx;
	valp =  vfoact_strings[activeVfo];
	line = param_display[PARAM_ACT_VFO].val_psn.line;
    1e40:	fe 01       	movw	r30, r28
    1e42:	e9 5b       	subi	r30, 0xB9	; 185
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
	col =  param_display[PARAM_ACT_VFO].val_psn.col;
	lcd->gotoxy(line,col);
    1e46:	6e 01       	movw	r12, r28
    1e48:	80 e5       	ldi	r24, 0x50	; 80
    1e4a:	c8 0e       	add	r12, r24
    1e4c:	d1 1c       	adc	r13, r1
    1e4e:	4c 91       	ld	r20, X
    1e50:	60 81       	ld	r22, Z
    1e52:	f6 01       	movw	r30, r12
    1e54:	80 81       	ld	r24, Z
    1e56:	91 81       	ldd	r25, Z+1	; 0x01
    1e58:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_ZN3Lcd6gotoxyEhh>
	if (activeVfo == RX) {
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	81 11       	cpse	r24, r1
    1e60:	03 c0       	rjmp	.+6      	; 0x1e68 <_ZN6params12setActiveVfoE10vfo_actv_t+0x54>
		pc = GREEN;
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	3c ef       	ldi	r19, 0xFC	; 252
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <_ZN6params12setActiveVfoE10vfo_actv_t+0x58>
	} else {
		pc = RED;
    1e68:	2c ef       	ldi	r18, 0xFC	; 252
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
	}
	lcd->puts(valp,pc,bgc);
    1e6c:	cb 5a       	subi	r28, 0xAB	; 171
    1e6e:	df 4f       	sbci	r29, 0xFF	; 255
    1e70:	e8 80       	ld	r14, Y
    1e72:	f9 80       	ldd	r15, Y+1	; 0x01
    1e74:	0a 81       	ldd	r16, Y+2	; 0x02
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	b5 01       	movw	r22, r10
    1e7a:	f6 01       	movw	r30, r12
    1e7c:	80 81       	ld	r24, Z
    1e7e:	91 81       	ldd	r25, Z+1	; 0x01
    1e80:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <_ZN3Lcd4putsEPc9_pixColorS1_>
} 
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	0f 91       	pop	r16
    1e8a:	ff 90       	pop	r15
    1e8c:	ef 90       	pop	r14
    1e8e:	df 90       	pop	r13
    1e90:	cf 90       	pop	r12
    1e92:	bf 90       	pop	r11
    1e94:	af 90       	pop	r10
    1e96:	08 95       	ret

00001e98 <_ZN6params6updateEP7EncoderP2SwP3Lcd>:
	waitForOpen = false;
	update(enc, pb, lcd);
}


void params::update(Encoder *enc, Sw *pb, Lcd *lcd) {
    1e98:	2f 92       	push	r2
    1e9a:	3f 92       	push	r3
    1e9c:	4f 92       	push	r4
    1e9e:	5f 92       	push	r5
    1ea0:	6f 92       	push	r6
    1ea2:	7f 92       	push	r7
    1ea4:	8f 92       	push	r8
    1ea6:	9f 92       	push	r9
    1ea8:	af 92       	push	r10
    1eaa:	bf 92       	push	r11
    1eac:	cf 92       	push	r12
    1eae:	df 92       	push	r13
    1eb0:	ef 92       	push	r14
    1eb2:	ff 92       	push	r15
    1eb4:	0f 93       	push	r16
    1eb6:	1f 93       	push	r17
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	60 97       	sbiw	r28, 0x10	; 16
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	6c 01       	movw	r12, r24
    1ece:	5b 01       	movw	r10, r22
    1ed0:	3a 01       	movw	r6, r20
    1ed2:	49 01       	movw	r8, r18
	uint16_t line;
	uint16_t col;
	char *valp = NULL;
	char buf[16];

	tc = RED;
    1ed4:	1c 01       	movw	r2, r24
    1ed6:	88 e5       	ldi	r24, 0x58	; 88
    1ed8:	28 0e       	add	r2, r24
    1eda:	31 1c       	adc	r3, r1
    1edc:	8c ef       	ldi	r24, 0xFC	; 252
    1ede:	d1 01       	movw	r26, r2
    1ee0:	8c 93       	st	X, r24
    1ee2:	f6 01       	movw	r30, r12
    1ee4:	e7 5a       	subi	r30, 0xA7	; 167
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	10 82       	st	Z, r1
    1eea:	31 96       	adiw	r30, 0x01	; 1
    1eec:	10 82       	st	Z, r1
	if(exitParamMode) {
    1eee:	26 01       	movw	r4, r12
    1ef0:	bc e4       	ldi	r27, 0x4C	; 76
    1ef2:	4b 0e       	add	r4, r27
    1ef4:	51 1c       	adc	r5, r1
    1ef6:	f2 01       	movw	r30, r4
    1ef8:	80 81       	ld	r24, Z
    1efa:	88 23       	and	r24, r24
    1efc:	99 f1       	breq	.+102    	; 0x1f64 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0xcc>
		exitParamMode = false;
    1efe:	10 82       	st	Z, r1
		uint16_t line = param_display[curParam].label_psn.line;
    1f00:	86 01       	movw	r16, r12
    1f02:	05 5b       	subi	r16, 0xB5	; 181
    1f04:	1f 4f       	sbci	r17, 0xFF	; 255
    1f06:	d8 01       	movw	r26, r16
    1f08:	8c 91       	ld	r24, X
		uint16_t col =  param_display[curParam].label_psn.col;
    1f0a:	5b e0       	ldi	r21, 0x0B	; 11
    1f0c:	f5 2e       	mov	r15, r21
    1f0e:	f6 01       	movw	r30, r12
    1f10:	f8 9e       	mul	r15, r24
    1f12:	e0 0d       	add	r30, r0
    1f14:	f1 1d       	adc	r31, r1
    1f16:	11 24       	eor	r1, r1

		lcd->gotoxy(line,col);
    1f18:	44 85       	ldd	r20, Z+12	; 0x0c
    1f1a:	62 85       	ldd	r22, Z+10	; 0x0a
    1f1c:	c9 01       	movw	r24, r18
    1f1e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_ZN3Lcd6gotoxyEhh>
		lcd->puts(param_display[curParam].label, fgc, bgc);
    1f22:	f6 01       	movw	r30, r12
    1f24:	eb 5a       	subi	r30, 0xAB	; 171
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	80 81       	ld	r24, Z
    1f2a:	91 81       	ldd	r25, Z+1	; 0x01
    1f2c:	a2 81       	ldd	r26, Z+2	; 0x02
    1f2e:	33 97       	sbiw	r30, 0x03	; 3
    1f30:	20 81       	ld	r18, Z
    1f32:	31 81       	ldd	r19, Z+1	; 0x01
    1f34:	42 81       	ldd	r20, Z+2	; 0x02
    1f36:	f8 01       	movw	r30, r16
    1f38:	50 81       	ld	r21, Z
    1f3a:	f6 01       	movw	r30, r12
    1f3c:	f5 9e       	mul	r15, r21
    1f3e:	e0 0d       	add	r30, r0
    1f40:	f1 1d       	adc	r31, r1
    1f42:	11 24       	eor	r1, r1
    1f44:	66 85       	ldd	r22, Z+14	; 0x0e
    1f46:	77 85       	ldd	r23, Z+15	; 0x0f
    1f48:	7c 01       	movw	r14, r24
    1f4a:	0a 2f       	mov	r16, r26
    1f4c:	c4 01       	movw	r24, r8
    1f4e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <_ZN3Lcd4putsEPc9_pixColorS1_>
		waitForOpen = true;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	f6 01       	movw	r30, r12
    1f56:	e1 5b       	subi	r30, 0xB1	; 177
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	80 83       	st	Z, r24
		enc->setEventRate(4);
    1f5c:	64 e0       	ldi	r22, 0x04	; 4
    1f5e:	c5 01       	movw	r24, r10
    1f60:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN7Encoder12setEventRateEh>
	}

	if (pb->hasEvent()) {
    1f64:	c3 01       	movw	r24, r6
    1f66:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN2Sw8hasEventEv>
    1f6a:	88 23       	and	r24, r24
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0xd8>
    1f6e:	81 c0       	rjmp	.+258    	; 0x2072 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1da>
		if (pb->getEvent() == EV_CLOSE) {
    1f70:	c3 01       	movw	r24, r6
    1f72:	0e 94 87 12 	call	0x250e	; 0x250e <_ZN2Sw8getEventEv>
    1f76:	82 30       	cpi	r24, 0x02	; 2
    1f78:	81 f4       	brne	.+32     	; 0x1f9a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x102>
			pb->clearEvent();
    1f7a:	c3 01       	movw	r24, r6
    1f7c:	0e 94 8a 12 	call	0x2514	; 0x2514 <_ZN2Sw10clearEventEv>
			timerHandle = Clock::registerOneshot(this,TWO_SEC);
    1f80:	68 ec       	ldi	r22, 0xC8	; 200
    1f82:	70 e0       	ldi	r23, 0x00	; 0
    1f84:	c6 01       	movw	r24, r12
    1f86:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN5Clock15registerOneshotEP8Callbackj>
    1f8a:	f6 01       	movw	r30, r12
    1f8c:	e3 5b       	subi	r30, 0xB3	; 179
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	91 83       	std	Z+1, r25	; 0x01
    1f92:	80 83       	st	Z, r24
			exitParamMode = false;
    1f94:	d2 01       	movw	r26, r4
    1f96:	1c 92       	st	X, r1
    1f98:	6c c0       	rjmp	.+216    	; 0x2072 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1da>

		} else if (pb->getEvent() == EV_OPEN) {
    1f9a:	c3 01       	movw	r24, r6
    1f9c:	0e 94 87 12 	call	0x250e	; 0x250e <_ZN2Sw8getEventEv>
    1fa0:	81 30       	cpi	r24, 0x01	; 1
    1fa2:	09 f0       	breq	.+2      	; 0x1fa6 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x10e>
    1fa4:	66 c0       	rjmp	.+204    	; 0x2072 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1da>
			pb->clearEvent();
    1fa6:	c3 01       	movw	r24, r6
    1fa8:	0e 94 8a 12 	call	0x2514	; 0x2514 <_ZN2Sw10clearEventEv>
			if (waitForOpen) {
    1fac:	f6 01       	movw	r30, r12
    1fae:	e1 5b       	subi	r30, 0xB1	; 177
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 81       	ld	r24, Z
    1fb4:	88 23       	and	r24, r24
    1fb6:	21 f0       	breq	.+8      	; 0x1fc0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x128>
				waitForOpen = false;
    1fb8:	10 82       	st	Z, r1
				mode = MODE_NORMAL;
    1fba:	f6 01       	movw	r30, r12
    1fbc:	16 82       	std	Z+6, r1	; 0x06
    1fbe:	79 c1       	rjmp	.+754    	; 0x22b2 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x41a>
				return;

			} else {
				Clock::cancelOneshot(timerHandle);
    1fc0:	f6 01       	movw	r30, r12
    1fc2:	e3 5b       	subi	r30, 0xB3	; 179
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	80 81       	ld	r24, Z
    1fc8:	91 81       	ldd	r25, Z+1	; 0x01
    1fca:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN5Clock13cancelOneshotEi>
				uint16_t line = param_display[curParam].label_psn.line;
    1fce:	36 01       	movw	r6, r12
    1fd0:	fb e4       	ldi	r31, 0x4B	; 75
    1fd2:	6f 0e       	add	r6, r31
    1fd4:	71 1c       	adc	r7, r1
    1fd6:	d3 01       	movw	r26, r6
    1fd8:	8c 91       	ld	r24, X
				uint16_t col =  param_display[curParam].label_psn.col;
    1fda:	1b e0       	ldi	r17, 0x0B	; 11
    1fdc:	f6 01       	movw	r30, r12
    1fde:	18 9f       	mul	r17, r24
    1fe0:	e0 0d       	add	r30, r0
    1fe2:	f1 1d       	adc	r31, r1
    1fe4:	11 24       	eor	r1, r1

				lcd->gotoxy(line,col);
    1fe6:	44 85       	ldd	r20, Z+12	; 0x0c
    1fe8:	62 85       	ldd	r22, Z+10	; 0x0a
    1fea:	c4 01       	movw	r24, r8
    1fec:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_ZN3Lcd6gotoxyEhh>
				lcd->puts(param_display[curParam].label, fgc, bgc);
    1ff0:	26 01       	movw	r4, r12
    1ff2:	b5 e5       	ldi	r27, 0x55	; 85
    1ff4:	4b 0e       	add	r4, r27
    1ff6:	51 1c       	adc	r5, r1
    1ff8:	f2 01       	movw	r30, r4
    1ffa:	e0 80       	ld	r14, Z
    1ffc:	f1 80       	ldd	r15, Z+1	; 0x01
    1ffe:	02 81       	ldd	r16, Z+2	; 0x02
    2000:	33 97       	sbiw	r30, 0x03	; 3
    2002:	20 81       	ld	r18, Z
    2004:	31 81       	ldd	r19, Z+1	; 0x01
    2006:	42 81       	ldd	r20, Z+2	; 0x02
    2008:	d3 01       	movw	r26, r6
    200a:	8c 91       	ld	r24, X
    200c:	f6 01       	movw	r30, r12
    200e:	18 9f       	mul	r17, r24
    2010:	e0 0d       	add	r30, r0
    2012:	f1 1d       	adc	r31, r1
    2014:	11 24       	eor	r1, r1
    2016:	66 85       	ldd	r22, Z+14	; 0x0e
    2018:	77 85       	ldd	r23, Z+15	; 0x0f
    201a:	c4 01       	movw	r24, r8
    201c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <_ZN3Lcd4putsEPc9_pixColorS1_>
				curParam = (param_t)((int)curParam + 1);
    2020:	f3 01       	movw	r30, r6
    2022:	80 81       	ld	r24, Z
    2024:	8f 5f       	subi	r24, 0xFF	; 255
				if (curParam == PARAM_END) {
    2026:	86 30       	cpi	r24, 0x06	; 6
    2028:	11 f0       	breq	.+4      	; 0x202e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x196>
				uint16_t line = param_display[curParam].label_psn.line;
				uint16_t col =  param_display[curParam].label_psn.col;

				lcd->gotoxy(line,col);
				lcd->puts(param_display[curParam].label, fgc, bgc);
				curParam = (param_t)((int)curParam + 1);
    202a:	80 83       	st	Z, r24
    202c:	01 c0       	rjmp	.+2      	; 0x2030 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x198>
				if (curParam == PARAM_END) {
					curParam = PARAM_STEP;
    202e:	10 82       	st	Z, r1
				}					
				line = param_display[curParam].label_psn.line;
    2030:	f3 01       	movw	r30, r6
    2032:	80 81       	ld	r24, Z
				col =  param_display[curParam].label_psn.col;
    2034:	1b e0       	ldi	r17, 0x0B	; 11
    2036:	f6 01       	movw	r30, r12
    2038:	18 9f       	mul	r17, r24
    203a:	e0 0d       	add	r30, r0
    203c:	f1 1d       	adc	r31, r1
    203e:	11 24       	eor	r1, r1
				lcd->gotoxy(line,col);
    2040:	44 85       	ldd	r20, Z+12	; 0x0c
    2042:	62 85       	ldd	r22, Z+10	; 0x0a
    2044:	c4 01       	movw	r24, r8
    2046:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_ZN3Lcd6gotoxyEhh>
				lcd->puts(param_display[curParam].label, tc, bgc);
    204a:	d2 01       	movw	r26, r4
    204c:	ed 90       	ld	r14, X+
    204e:	fd 90       	ld	r15, X+
    2050:	0c 91       	ld	r16, X
    2052:	f1 01       	movw	r30, r2
    2054:	20 81       	ld	r18, Z
    2056:	31 81       	ldd	r19, Z+1	; 0x01
    2058:	42 81       	ldd	r20, Z+2	; 0x02
    205a:	d3 01       	movw	r26, r6
    205c:	8c 91       	ld	r24, X
    205e:	f6 01       	movw	r30, r12
    2060:	18 9f       	mul	r17, r24
    2062:	e0 0d       	add	r30, r0
    2064:	f1 1d       	adc	r31, r1
    2066:	11 24       	eor	r1, r1
    2068:	66 85       	ldd	r22, Z+14	; 0x0e
    206a:	77 85       	ldd	r23, Z+15	; 0x0f
    206c:	c4 01       	movw	r24, r8
    206e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <_ZN3Lcd4putsEPc9_pixColorS1_>
		}
	}
	//		
	// now process encoder events which change the actual parameter value
	//
	if (enc->hasEvent()) {
    2072:	c5 01       	movw	r24, r10
    2074:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_ZN7Encoder8hasEventEv>
    2078:	88 23       	and	r24, r24
    207a:	09 f4       	brne	.+2      	; 0x207e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1e6>
    207c:	1a c1       	rjmp	.+564    	; 0x22b2 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x41a>
		switch(curParam) {
    207e:	36 01       	movw	r6, r12
    2080:	bb e4       	ldi	r27, 0x4B	; 75
    2082:	6b 0e       	add	r6, r27
    2084:	71 1c       	adc	r7, r1
    2086:	f3 01       	movw	r30, r6
    2088:	80 81       	ld	r24, Z
    208a:	82 30       	cpi	r24, 0x02	; 2
    208c:	09 f4       	brne	.+2      	; 0x2090 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1f8>
    208e:	5e c0       	rjmp	.+188    	; 0x214c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2b4>
    2090:	28 f4       	brcc	.+10     	; 0x209c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x204>
    2092:	88 23       	and	r24, r24
    2094:	61 f0       	breq	.+24     	; 0x20ae <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x216>
    2096:	81 30       	cpi	r24, 0x01	; 1
    2098:	a1 f1       	breq	.+104    	; 0x2102 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x26a>
    209a:	ea c0       	rjmp	.+468    	; 0x2270 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3d8>
    209c:	84 30       	cpi	r24, 0x04	; 4
    209e:	09 f4       	brne	.+2      	; 0x20a2 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x20a>
    20a0:	99 c0       	rjmp	.+306    	; 0x21d4 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x33c>
    20a2:	08 f4       	brcc	.+2      	; 0x20a6 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x20e>
    20a4:	75 c0       	rjmp	.+234    	; 0x2190 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2f8>
    20a6:	85 30       	cpi	r24, 0x05	; 5
    20a8:	09 f4       	brne	.+2      	; 0x20ac <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x214>
    20aa:	c8 c0       	rjmp	.+400    	; 0x223c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3a4>
    20ac:	e1 c0       	rjmp	.+450    	; 0x2270 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3d8>
			case PARAM_STEP:
				if (enc->getEvent() == ENC_CW_EVENT) {
    20ae:	c5 01       	movw	r24, r10
    20b0:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    20b4:	81 30       	cpi	r24, 0x01	; 1
    20b6:	51 f4       	brne	.+20     	; 0x20cc <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x234>
					step = (step_t)((int)step + 1);
    20b8:	d6 01       	movw	r26, r12
    20ba:	12 96       	adiw	r26, 0x02	; 2
    20bc:	8c 91       	ld	r24, X
    20be:	12 97       	sbiw	r26, 0x02	; 2
    20c0:	8f 5f       	subi	r24, 0xFF	; 255
					if (step == END_OF_STEP) {
    20c2:	85 30       	cpi	r24, 0x05	; 5
    20c4:	79 f4       	brne	.+30     	; 0x20e4 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x24c>
						step = STEP_10HZ;
    20c6:	f6 01       	movw	r30, r12
    20c8:	12 82       	std	Z+2, r1	; 0x02
    20ca:	12 c0       	rjmp	.+36     	; 0x20f0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x258>
					}

				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    20cc:	c5 01       	movw	r24, r10
    20ce:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    20d2:	82 30       	cpi	r24, 0x02	; 2
    20d4:	69 f4       	brne	.+26     	; 0x20f0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x258>
					if (step == STEP_10HZ) {
    20d6:	d6 01       	movw	r26, r12
    20d8:	12 96       	adiw	r26, 0x02	; 2
    20da:	8c 91       	ld	r24, X
    20dc:	12 97       	sbiw	r26, 0x02	; 2
    20de:	81 11       	cpse	r24, r1
    20e0:	04 c0       	rjmp	.+8      	; 0x20ea <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x252>
						step = STEP_1MHZ;
    20e2:	84 e0       	ldi	r24, 0x04	; 4
    20e4:	12 96       	adiw	r26, 0x02	; 2
    20e6:	8c 93       	st	X, r24
    20e8:	03 c0       	rjmp	.+6      	; 0x20f0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x258>
					} else {
						step = (step_t)((int)step - 1);
    20ea:	81 50       	subi	r24, 0x01	; 1
    20ec:	f6 01       	movw	r30, r12
    20ee:	82 83       	std	Z+2, r24	; 0x02
					}
				}
				valp = step_strings[step];
    20f0:	d6 01       	movw	r26, r12
    20f2:	12 96       	adiw	r26, 0x02	; 2
    20f4:	ec 91       	ld	r30, X
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	ee 0f       	add	r30, r30
    20fa:	ff 1f       	adc	r31, r31
    20fc:	ec 5c       	subi	r30, 0xCC	; 204
    20fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2100:	22 c0       	rjmp	.+68     	; 0x2146 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2ae>
				break;

			case PARAM_BAND:
				if (enc->getEvent() == ENC_CW_EVENT) {
    2102:	c5 01       	movw	r24, r10
    2104:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    2108:	81 30       	cpi	r24, 0x01	; 1
    210a:	39 f4       	brne	.+14     	; 0x211a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x282>
					band = (band_t)((int)band + 1);
    210c:	f6 01       	movw	r30, r12
    210e:	83 81       	ldd	r24, Z+3	; 0x03
    2110:	8f 5f       	subi	r24, 0xFF	; 255
					if (band == END_OF_BAND) {
    2112:	89 30       	cpi	r24, 0x09	; 9
    2114:	61 f4       	brne	.+24     	; 0x212e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x296>
						band = BAND_160;
    2116:	13 82       	std	Z+3, r1	; 0x03
    2118:	0e c0       	rjmp	.+28     	; 0x2136 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x29e>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    211a:	c5 01       	movw	r24, r10
    211c:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    2120:	82 30       	cpi	r24, 0x02	; 2
    2122:	49 f4       	brne	.+18     	; 0x2136 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x29e>
					if (band == BAND_160) {
    2124:	f6 01       	movw	r30, r12
    2126:	83 81       	ldd	r24, Z+3	; 0x03
    2128:	81 11       	cpse	r24, r1
    212a:	03 c0       	rjmp	.+6      	; 0x2132 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x29a>
						band = BAND_10;
    212c:	88 e0       	ldi	r24, 0x08	; 8
    212e:	83 83       	std	Z+3, r24	; 0x03
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x29e>
					} else {
						band = (band_t)((int)band - 1);
    2132:	81 50       	subi	r24, 0x01	; 1
    2134:	83 83       	std	Z+3, r24	; 0x03
					}
				}
				valp = band_strings[band];
    2136:	d6 01       	movw	r26, r12
    2138:	13 96       	adiw	r26, 0x03	; 3
    213a:	ec 91       	ld	r30, X
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	ee 0f       	add	r30, r30
    2140:	ff 1f       	adc	r31, r31
    2142:	e2 5c       	subi	r30, 0xC2	; 194
    2144:	fe 4f       	sbci	r31, 0xFE	; 254
    2146:	50 80       	ld	r5, Z
    2148:	41 80       	ldd	r4, Z+1	; 0x01
				break;
    214a:	94 c0       	rjmp	.+296    	; 0x2274 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3dc>

			case PARAM_VFO:
				if (enc->getEvent() == ENC_CW_EVENT) {
    214c:	c5 01       	movw	r24, r10
    214e:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    2152:	81 30       	cpi	r24, 0x01	; 1
    2154:	39 f4       	brne	.+14     	; 0x2164 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2cc>
					vfo = (vfo_select_t)((int)vfo + 1);
    2156:	f6 01       	movw	r30, r12
    2158:	84 81       	ldd	r24, Z+4	; 0x04
    215a:	8f 5f       	subi	r24, 0xFF	; 255
					if (vfo == END_OF_VFO) {
    215c:	83 30       	cpi	r24, 0x03	; 3
    215e:	59 f4       	brne	.+22     	; 0x2176 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2de>
						vfo = VFOA;
    2160:	14 82       	std	Z+4, r1	; 0x04
    2162:	0d c0       	rjmp	.+26     	; 0x217e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2e6>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    2164:	c5 01       	movw	r24, r10
    2166:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    216a:	82 30       	cpi	r24, 0x02	; 2
    216c:	41 f4       	brne	.+16     	; 0x217e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2e6>
					if (vfo == VFOA) {
    216e:	f6 01       	movw	r30, r12
    2170:	94 81       	ldd	r25, Z+4	; 0x04
    2172:	91 11       	cpse	r25, r1
    2174:	02 c0       	rjmp	.+4      	; 0x217a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2e2>
						vfo = SPLIT;
    2176:	84 83       	std	Z+4, r24	; 0x04
    2178:	02 c0       	rjmp	.+4      	; 0x217e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2e6>
					} else {
						vfo = (vfo_select_t)((int)vfo - 1);
    217a:	91 50       	subi	r25, 0x01	; 1
    217c:	94 83       	std	Z+4, r25	; 0x04
					}
				}
				valp = vfo_strings[vfo];
    217e:	d6 01       	movw	r26, r12
    2180:	14 96       	adiw	r26, 0x04	; 4
    2182:	ec 91       	ld	r30, X
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	ee 0f       	add	r30, r30
    2188:	ff 1f       	adc	r31, r31
    218a:	e2 5d       	subi	r30, 0xD2	; 210
    218c:	fe 4f       	sbci	r31, 0xFE	; 254
    218e:	db cf       	rjmp	.-74     	; 0x2146 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2ae>
				break;

			case PARAM_KEY:
				if (enc->getEvent() == ENC_CW_EVENT) {
    2190:	c5 01       	movw	r24, r10
    2192:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	39 f4       	brne	.+14     	; 0x21a8 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x310>
					key = (key_t)((int)key + 1);
    219a:	f6 01       	movw	r30, r12
    219c:	87 81       	ldd	r24, Z+7	; 0x07
    219e:	8f 5f       	subi	r24, 0xFF	; 255
					if (key == END_OF_KEY) {
    21a0:	83 30       	cpi	r24, 0x03	; 3
    21a2:	59 f4       	brne	.+22     	; 0x21ba <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x322>
						key = KEY_ST;
    21a4:	17 82       	std	Z+7, r1	; 0x07
    21a6:	0d c0       	rjmp	.+26     	; 0x21c2 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x32a>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    21a8:	c5 01       	movw	r24, r10
    21aa:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    21ae:	82 30       	cpi	r24, 0x02	; 2
    21b0:	41 f4       	brne	.+16     	; 0x21c2 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x32a>
					if (key == KEY_ST) {
    21b2:	f6 01       	movw	r30, r12
    21b4:	97 81       	ldd	r25, Z+7	; 0x07
    21b6:	91 11       	cpse	r25, r1
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x326>
						key = KEY_PDLS;
    21ba:	87 83       	std	Z+7, r24	; 0x07
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x32a>
					} else {
						key = (key_t)((int)key - 1);
    21be:	91 50       	subi	r25, 0x01	; 1
    21c0:	97 83       	std	Z+7, r25	; 0x07
					}
				}
				valp = key_strings[key];
    21c2:	d6 01       	movw	r26, r12
    21c4:	17 96       	adiw	r26, 0x07	; 7
    21c6:	ec 91       	ld	r30, X
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	ee 0f       	add	r30, r30
    21cc:	ff 1f       	adc	r31, r31
    21ce:	ec 5d       	subi	r30, 0xDC	; 220
    21d0:	fe 4f       	sbci	r31, 0xFE	; 254
    21d2:	b9 cf       	rjmp	.-142    	; 0x2146 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2ae>
				break;

			case PARAM_KEY_SPEED:
				if (enc->getEvent() == ENC_CW_EVENT) {
    21d4:	c5 01       	movw	r24, r10
    21d6:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    21da:	81 30       	cpi	r24, 0x01	; 1
    21dc:	39 f4       	brne	.+14     	; 0x21ec <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x354>
					speed++;
    21de:	f6 01       	movw	r30, r12
    21e0:	80 85       	ldd	r24, Z+8	; 0x08
    21e2:	8f 5f       	subi	r24, 0xFF	; 255
					if (speed > 25) {
    21e4:	8a 31       	cpi	r24, 0x1A	; 26
    21e6:	60 f0       	brcs	.+24     	; 0x2200 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x368>
						speed = 25;
    21e8:	89 e1       	ldi	r24, 0x19	; 25
    21ea:	0d c0       	rjmp	.+26     	; 0x2206 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x36e>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    21ec:	c5 01       	movw	r24, r10
    21ee:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    21f2:	82 30       	cpi	r24, 0x02	; 2
    21f4:	59 f4       	brne	.+22     	; 0x220c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x374>
					speed--;
    21f6:	f6 01       	movw	r30, r12
    21f8:	80 85       	ldd	r24, Z+8	; 0x08
    21fa:	81 50       	subi	r24, 0x01	; 1
					if (speed < 5) {
    21fc:	85 30       	cpi	r24, 0x05	; 5
    21fe:	10 f0       	brcs	.+4      	; 0x2204 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x36c>
					speed++;
					if (speed > 25) {
						speed = 25;
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
					speed--;
    2200:	80 87       	std	Z+8, r24	; 0x08
    2202:	04 c0       	rjmp	.+8      	; 0x220c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x374>
					if (speed < 5) {
						speed = 5;
    2204:	85 e0       	ldi	r24, 0x05	; 5
    2206:	d6 01       	movw	r26, r12
    2208:	18 96       	adiw	r26, 0x08	; 8
    220a:	8c 93       	st	X, r24
					}
				}
				sprintf(buf,"%2i", speed);
    220c:	f6 01       	movw	r30, r12
    220e:	80 85       	ldd	r24, Z+8	; 0x08
    2210:	1f 92       	push	r1
    2212:	8f 93       	push	r24
    2214:	86 e6       	ldi	r24, 0x66	; 102
    2216:	92 e0       	ldi	r25, 0x02	; 2
    2218:	9f 93       	push	r25
    221a:	8f 93       	push	r24
    221c:	8e 01       	movw	r16, r28
    221e:	0f 5f       	subi	r16, 0xFF	; 255
    2220:	1f 4f       	sbci	r17, 0xFF	; 255
    2222:	1f 93       	push	r17
    2224:	0f 93       	push	r16
    2226:	0e 94 2c 19 	call	0x3258	; 0x3258 <sprintf>
				valp = buf;
				break;
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
					if (speed < 5) {
						speed = 5;
					}
				}
				sprintf(buf,"%2i", speed);
				valp = buf;
    2236:	50 2e       	mov	r5, r16
    2238:	41 2e       	mov	r4, r17
				break;
    223a:	1c c0       	rjmp	.+56     	; 0x2274 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3dc>

			case PARAM_ACT_VFO:
				if (enc->getEvent() != ENC_NO_EVENT) {
    223c:	c5 01       	movw	r24, r10
    223e:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    2242:	88 23       	and	r24, r24
    2244:	61 f0       	breq	.+24     	; 0x225e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3c6>
					if (activeVfo == RX) {
    2246:	d6 01       	movw	r26, r12
    2248:	15 96       	adiw	r26, 0x05	; 5
    224a:	8c 91       	ld	r24, X
    224c:	15 97       	sbiw	r26, 0x05	; 5
    224e:	81 11       	cpse	r24, r1
    2250:	04 c0       	rjmp	.+8      	; 0x225a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3c2>
						activeVfo = TX;
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	15 96       	adiw	r26, 0x05	; 5
    2256:	8c 93       	st	X, r24
    2258:	02 c0       	rjmp	.+4      	; 0x225e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3c6>
					} else {
						activeVfo = RX;
    225a:	f6 01       	movw	r30, r12
    225c:	15 82       	std	Z+5, r1	; 0x05
					}
				}
				valp =  vfoact_strings[activeVfo];
    225e:	d6 01       	movw	r26, r12
    2260:	15 96       	adiw	r26, 0x05	; 5
    2262:	ec 91       	ld	r30, X
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	ee 0f       	add	r30, r30
    2268:	ff 1f       	adc	r31, r31
    226a:	e6 5d       	subi	r30, 0xD6	; 214
    226c:	fe 4f       	sbci	r31, 0xFE	; 254
    226e:	6b cf       	rjmp	.-298    	; 0x2146 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2ae>


void params::update(Encoder *enc, Sw *pb, Lcd *lcd) {
	uint16_t line;
	uint16_t col;
	char *valp = NULL;
    2270:	51 2c       	mov	r5, r1
    2272:	41 2c       	mov	r4, r1
				break;

			default:
				break;
		}
		enc->clearEvent();
    2274:	c5 01       	movw	r24, r10
    2276:	0e 94 0a 06 	call	0xc14	; 0xc14 <_ZN7Encoder10clearEventEv>
		line = param_display[curParam].val_psn.line;
    227a:	f3 01       	movw	r30, r6
    227c:	80 81       	ld	r24, Z
		col =  param_display[curParam].val_psn.col;
    227e:	f6 01       	movw	r30, r12
    2280:	9b e0       	ldi	r25, 0x0B	; 11
    2282:	89 9f       	mul	r24, r25
    2284:	e0 0d       	add	r30, r0
    2286:	f1 1d       	adc	r31, r1
    2288:	11 24       	eor	r1, r1
		lcd->gotoxy(line,col);
    228a:	42 89       	ldd	r20, Z+18	; 0x12
    228c:	60 89       	ldd	r22, Z+16	; 0x10
    228e:	c4 01       	movw	r24, r8
    2290:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_ZN3Lcd6gotoxyEhh>
		lcd->puts(valp, fgc, bgc);
    2294:	f6 01       	movw	r30, r12
    2296:	eb 5a       	subi	r30, 0xAB	; 171
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	e0 80       	ld	r14, Z
    229c:	f1 80       	ldd	r15, Z+1	; 0x01
    229e:	02 81       	ldd	r16, Z+2	; 0x02
    22a0:	33 97       	sbiw	r30, 0x03	; 3
    22a2:	20 81       	ld	r18, Z
    22a4:	31 81       	ldd	r19, Z+1	; 0x01
    22a6:	42 81       	ldd	r20, Z+2	; 0x02
    22a8:	65 2d       	mov	r22, r5
    22aa:	74 2d       	mov	r23, r4
    22ac:	c4 01       	movw	r24, r8
    22ae:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <_ZN3Lcd4putsEPc9_pixColorS1_>
	}


}
    22b2:	60 96       	adiw	r28, 0x10	; 16
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	1f 91       	pop	r17
    22c4:	0f 91       	pop	r16
    22c6:	ff 90       	pop	r15
    22c8:	ef 90       	pop	r14
    22ca:	df 90       	pop	r13
    22cc:	cf 90       	pop	r12
    22ce:	bf 90       	pop	r11
    22d0:	af 90       	pop	r10
    22d2:	9f 90       	pop	r9
    22d4:	8f 90       	pop	r8
    22d6:	7f 90       	pop	r7
    22d8:	6f 90       	pop	r6
    22da:	5f 90       	pop	r5
    22dc:	4f 90       	pop	r4
    22de:	3f 90       	pop	r3
    22e0:	2f 90       	pop	r2
    22e2:	08 95       	ret

000022e4 <_ZN6params11updateEnterEP7EncoderP2SwP3Lcd>:
	lcd->puts(valp,pc,bgc);
} 



void params::updateEnter(Encoder *enc, Sw *pb, Lcd *lcd) {
    22e4:	6f 92       	push	r6
    22e6:	7f 92       	push	r7
    22e8:	8f 92       	push	r8
    22ea:	9f 92       	push	r9
    22ec:	af 92       	push	r10
    22ee:	bf 92       	push	r11
    22f0:	cf 92       	push	r12
    22f2:	df 92       	push	r13
    22f4:	ef 92       	push	r14
    22f6:	ff 92       	push	r15
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	ec 01       	movw	r28, r24
    2302:	5b 01       	movw	r10, r22
    2304:	4a 01       	movw	r8, r20
    2306:	69 01       	movw	r12, r18
	//
	// hilight current parameter on entry to update
	//
	uint16_t line = param_display[curParam].label_psn.line;
    2308:	8c 01       	movw	r16, r24
    230a:	05 5b       	subi	r16, 0xB5	; 181
    230c:	1f 4f       	sbci	r17, 0xFF	; 255
    230e:	f8 01       	movw	r30, r16
    2310:	80 81       	ld	r24, Z
    2312:	9b e0       	ldi	r25, 0x0B	; 11
    2314:	f9 2e       	mov	r15, r25
    2316:	fe 01       	movw	r30, r28
    2318:	f8 9e       	mul	r15, r24
    231a:	e0 0d       	add	r30, r0
    231c:	f1 1d       	adc	r31, r1
    231e:	11 24       	eor	r1, r1
    2320:	62 85       	ldd	r22, Z+10	; 0x0a
	uint16_t col =  param_display[curParam].label_psn.col;
    2322:	44 85       	ldd	r20, Z+12	; 0x0c

	tc = RED;
    2324:	3e 01       	movw	r6, r28
    2326:	f8 e5       	ldi	r31, 0x58	; 88
    2328:	6f 0e       	add	r6, r31
    232a:	71 1c       	adc	r7, r1
    232c:	8c ef       	ldi	r24, 0xFC	; 252
    232e:	f3 01       	movw	r30, r6
    2330:	80 83       	st	Z, r24
    2332:	31 96       	adiw	r30, 0x01	; 1
    2334:	10 82       	st	Z, r1
    2336:	31 96       	adiw	r30, 0x01	; 1
    2338:	10 82       	st	Z, r1
	lcd->gotoxy(line,col);
    233a:	c9 01       	movw	r24, r18
    233c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_ZN3Lcd6gotoxyEhh>
	lcd->puts(param_display[curParam].label, tc, bgc);
    2340:	fe 01       	movw	r30, r28
    2342:	eb 5a       	subi	r30, 0xAB	; 171
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	80 81       	ld	r24, Z
    2348:	91 81       	ldd	r25, Z+1	; 0x01
    234a:	a2 81       	ldd	r26, Z+2	; 0x02
    234c:	f3 01       	movw	r30, r6
    234e:	20 81       	ld	r18, Z
    2350:	31 81       	ldd	r19, Z+1	; 0x01
    2352:	42 81       	ldd	r20, Z+2	; 0x02
    2354:	f8 01       	movw	r30, r16
    2356:	50 81       	ld	r21, Z
    2358:	fe 01       	movw	r30, r28
    235a:	f5 9e       	mul	r15, r21
    235c:	e0 0d       	add	r30, r0
    235e:	f1 1d       	adc	r31, r1
    2360:	11 24       	eor	r1, r1
    2362:	66 85       	ldd	r22, Z+14	; 0x0e
    2364:	77 85       	ldd	r23, Z+15	; 0x0f
    2366:	7c 01       	movw	r14, r24
    2368:	0a 2f       	mov	r16, r26
    236a:	c6 01       	movw	r24, r12
    236c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <_ZN3Lcd4putsEPc9_pixColorS1_>
	enc->setEventRate(1);
    2370:	61 e0       	ldi	r22, 0x01	; 1
    2372:	c5 01       	movw	r24, r10
    2374:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN7Encoder12setEventRateEh>
	waitForOpen = false;
    2378:	fe 01       	movw	r30, r28
    237a:	e1 5b       	subi	r30, 0xB1	; 177
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	10 82       	st	Z, r1
	update(enc, pb, lcd);
    2380:	96 01       	movw	r18, r12
    2382:	a4 01       	movw	r20, r8
    2384:	b5 01       	movw	r22, r10
    2386:	ce 01       	movw	r24, r28
}
    2388:	df 91       	pop	r29
    238a:	cf 91       	pop	r28
    238c:	1f 91       	pop	r17
    238e:	0f 91       	pop	r16
    2390:	ff 90       	pop	r15
    2392:	ef 90       	pop	r14
    2394:	df 90       	pop	r13
    2396:	cf 90       	pop	r12
    2398:	bf 90       	pop	r11
    239a:	af 90       	pop	r10
    239c:	9f 90       	pop	r9
    239e:	8f 90       	pop	r8
    23a0:	7f 90       	pop	r7
    23a2:	6f 90       	pop	r6
	tc = RED;
	lcd->gotoxy(line,col);
	lcd->puts(param_display[curParam].label, tc, bgc);
	enc->setEventRate(1);
	waitForOpen = false;
	update(enc, pb, lcd);
    23a4:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <_ZN6params6updateEP7EncoderP2SwP3Lcd>

000023a8 <_ZN5relayC1EP6params>:
#include "params.h"
#include "relay.h"


relay::relay(params *prm) {
	param = prm;
    23a8:	fc 01       	movw	r30, r24
    23aa:	71 83       	std	Z+1, r23	; 0x01
    23ac:	60 83       	st	Z, r22
    23ae:	08 95       	ret

000023b0 <_ZN5relay6setVfoEP3vfo>:
}


void relay::setVfo(vfo *v) {
	curVfo = v;
    23b0:	fc 01       	movw	r30, r24
    23b2:	73 83       	std	Z+3, r23	; 0x03
    23b4:	62 83       	std	Z+2, r22	; 0x02
    23b6:	08 95       	ret

000023b8 <_ZN5relay7setBandE5_band>:
}


void relay::setBand(band_t b) {
	band = b;
    23b8:	fc 01       	movw	r30, r24
    23ba:	64 83       	std	Z+4, r22	; 0x04
    23bc:	08 95       	ret

000023be <_ZN5relay8selectTxEv>:
}


void relay::selectTx(void) {
    23be:	0f 93       	push	r16
    23c0:	1f 93       	push	r17
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	1f 92       	push	r1
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	8c 01       	movw	r16, r24
	float freq;
	volatile uint8_t reg;

	freq = curVfo->getTxFreq(band);
    23ce:	fc 01       	movw	r30, r24
    23d0:	64 81       	ldd	r22, Z+4	; 0x04
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	0e 94 38 14 	call	0x2870	; 0x2870 <_ZN3vfo9getTxFreqE5_band>
	dds(freq);
    23da:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <dds>
	reg = PORTD;
    23de:	8b b1       	in	r24, 0x0b	; 11
    23e0:	89 83       	std	Y+1, r24	; 0x01
	PORTD = reg | RLY_MSK;
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	80 64       	ori	r24, 0x40	; 64
    23e6:	8b b9       	out	0x0b, r24	; 11
	param->setActiveVfo(TX);
    23e8:	61 e0       	ldi	r22, 0x01	; 1
    23ea:	f8 01       	movw	r30, r16
    23ec:	80 81       	ld	r24, Z
    23ee:	91 81       	ldd	r25, Z+1	; 0x01
    23f0:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_ZN6params12setActiveVfoE10vfo_actv_t>
}
    23f4:	0f 90       	pop	r0
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	1f 91       	pop	r17
    23fc:	0f 91       	pop	r16
    23fe:	08 95       	ret

00002400 <_ZN5relay8selectRxEv>:


void relay::selectRx(void) {
    2400:	0f 93       	push	r16
    2402:	1f 93       	push	r17
    2404:	cf 93       	push	r28
    2406:	df 93       	push	r29
    2408:	1f 92       	push	r1
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	8c 01       	movw	r16, r24
	float freq;
	volatile uint8_t reg;

	freq = curVfo->getRxFreq(band);
    2410:	fc 01       	movw	r30, r24
    2412:	64 81       	ldd	r22, Z+4	; 0x04
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	0e 94 13 14 	call	0x2826	; 0x2826 <_ZN3vfo9getRxFreqE5_band>
	dds(freq);
    241c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <dds>
	reg = PORTD;
    2420:	8b b1       	in	r24, 0x0b	; 11
    2422:	89 83       	std	Y+1, r24	; 0x01
	PORTD = reg & ~RLY_MSK;
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	8f 7b       	andi	r24, 0xBF	; 191
    2428:	8b b9       	out	0x0b, r24	; 11
	param->setActiveVfo(RX);
    242a:	60 e0       	ldi	r22, 0x00	; 0
    242c:	f8 01       	movw	r30, r16
    242e:	80 81       	ld	r24, Z
    2430:	91 81       	ldd	r25, Z+1	; 0x01
    2432:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_ZN6params12setActiveVfoE10vfo_actv_t>
}
    2436:	0f 90       	pop	r0
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	1f 91       	pop	r17
    243e:	0f 91       	pop	r16
    2440:	08 95       	ret

00002442 <_ZN2SwC1Ehh>:


//
// initialize switches
//
Sw::Sw(uint8_t s, volatile uint8_t p) {
    2442:	fc 01       	movw	r30, r24
    2444:	85 ee       	ldi	r24, 0xE5	; 229
    2446:	92 e0       	ldi	r25, 0x02	; 2
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	80 83       	st	Z, r24
	uint8_t temp;
	uint8_t msk = (1 << s);
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	06 2e       	mov	r0, r22
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <_ZN2SwC1Ehh+0x14>
    2454:	88 0f       	add	r24, r24
    2456:	0a 94       	dec	r0
    2458:	ea f7       	brpl	.-6      	; 0x2454 <_ZN2SwC1Ehh+0x12>

	port = (volatile uint8_t *)p;
    245a:	a4 2f       	mov	r26, r20
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	b4 83       	std	Z+4, r27	; 0x04
    2460:	a3 83       	std	Z+3, r26	; 0x03
	pin = (volatile uint8_t *)(p-2);
    2462:	9d 01       	movw	r18, r26
    2464:	22 50       	subi	r18, 0x02	; 2
    2466:	31 09       	sbc	r19, r1
    2468:	36 83       	std	Z+6, r19	; 0x06
    246a:	25 83       	std	Z+5, r18	; 0x05
	ddr = (volatile uint8_t *)(p-1);
    246c:	11 97       	sbiw	r26, 0x01	; 1
    246e:	b0 87       	std	Z+8, r27	; 0x08
    2470:	a7 83       	std	Z+7, r26	; 0x07
	swNum = s;
    2472:	62 83       	std	Z+2, r22	; 0x02

	// set bit as input
	temp = *ddr;
    2474:	9c 91       	ld	r25, X
	temp &= ~msk;
    2476:	28 2f       	mov	r18, r24
    2478:	20 95       	com	r18
    247a:	92 23       	and	r25, r18
	*ddr = temp;
    247c:	9c 93       	st	X, r25

	// enable input pullup
	temp = *port;
    247e:	a3 81       	ldd	r26, Z+3	; 0x03
    2480:	b4 81       	ldd	r27, Z+4	; 0x04
    2482:	9c 91       	ld	r25, X
	temp |= msk;
    2484:	98 2b       	or	r25, r24
	*port = temp;
    2486:	9c 93       	st	X, r25

	// get the current state of the switch
	temp = *pin & msk;
    2488:	a5 81       	ldd	r26, Z+5	; 0x05
    248a:	b6 81       	ldd	r27, Z+6	; 0x06
    248c:	9c 91       	ld	r25, X
	if (temp) {
    248e:	89 23       	and	r24, r25
    2490:	11 f0       	breq	.+4      	; 0x2496 <_ZN2SwC1Ehh+0x54>
		state = PB_OPEN;
    2492:	11 86       	std	Z+9, r1	; 0x09
    2494:	02 c0       	rjmp	.+4      	; 0x249a <_ZN2SwC1Ehh+0x58>
	}	else {
		state = PB_CLOSE;
    2496:	82 e0       	ldi	r24, 0x02	; 2
    2498:	81 87       	std	Z+9, r24	; 0x09
	}
	lastEvent = EV_NONE;
    249a:	12 86       	std	Z+10, r1	; 0x0a
	Clock::registerPeriodic(this, TEN_MSEC);
    249c:	61 e0       	ldi	r22, 0x01	; 1
    249e:	70 e0       	ldi	r23, 0x00	; 0
    24a0:	cf 01       	movw	r24, r30
    24a2:	0c 94 2b 04 	jmp	0x856	; 0x856 <_ZN5Clock16registerPeriodicEP8Callbackj>

000024a6 <_ZN2Sw6updateEv>:
}


void Sw::update(void) {
    24a6:	fc 01       	movw	r30, r24

uint8_t temp = *pin & (1 << swNum);
    24a8:	a5 81       	ldd	r26, Z+5	; 0x05
    24aa:	b6 81       	ldd	r27, Z+6	; 0x06
    24ac:	2c 91       	ld	r18, X
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	02 80       	ldd	r0, Z+2	; 0x02
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <_ZN2Sw6updateEv+0x14>
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	0a 94       	dec	r0
    24bc:	e2 f7       	brpl	.-8      	; 0x24b6 <_ZN2Sw6updateEv+0x10>
    24be:	82 23       	and	r24, r18

	switch (state) {
    24c0:	91 85       	ldd	r25, Z+9	; 0x09
    24c2:	91 30       	cpi	r25, 0x01	; 1
    24c4:	51 f0       	breq	.+20     	; 0x24da <_ZN2Sw6updateEv+0x34>
    24c6:	28 f0       	brcs	.+10     	; 0x24d2 <_ZN2Sw6updateEv+0x2c>
    24c8:	92 30       	cpi	r25, 0x02	; 2
    24ca:	61 f0       	breq	.+24     	; 0x24e4 <_ZN2Sw6updateEv+0x3e>
    24cc:	93 30       	cpi	r25, 0x03	; 3
    24ce:	79 f0       	breq	.+30     	; 0x24ee <_ZN2Sw6updateEv+0x48>
    24d0:	08 95       	ret
	
		case PB_OPEN:
			if (!temp) {
    24d2:	81 11       	cpse	r24, r1
    24d4:	11 c0       	rjmp	.+34     	; 0x24f8 <_ZN2Sw6updateEv+0x52>
				state = PB_CLOSE_DLY;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	08 c0       	rjmp	.+16     	; 0x24ea <_ZN2Sw6updateEv+0x44>
			}
			break;

		case PB_CLOSE_DLY:
			if (!temp) {
    24da:	81 11       	cpse	r24, r1
    24dc:	0d c0       	rjmp	.+26     	; 0x24f8 <_ZN2Sw6updateEv+0x52>
				state = PB_CLOSE;
    24de:	82 e0       	ldi	r24, 0x02	; 2
    24e0:	81 87       	std	Z+9, r24	; 0x09
    24e2:	09 c0       	rjmp	.+18     	; 0x24f6 <_ZN2Sw6updateEv+0x50>
				lastEvent = EV_CLOSE;
			}
			break;	
	
		case PB_CLOSE:
			if (temp) {
    24e4:	88 23       	and	r24, r24
    24e6:	41 f0       	breq	.+16     	; 0x24f8 <_ZN2Sw6updateEv+0x52>
				state = PB_OPEN_DLY;
    24e8:	83 e0       	ldi	r24, 0x03	; 3
    24ea:	81 87       	std	Z+9, r24	; 0x09
    24ec:	08 95       	ret
			}	
			break;

		case PB_OPEN_DLY:
			if (temp) {
    24ee:	88 23       	and	r24, r24
    24f0:	19 f0       	breq	.+6      	; 0x24f8 <_ZN2Sw6updateEv+0x52>
				state = PB_OPEN;
    24f2:	11 86       	std	Z+9, r1	; 0x09
				lastEvent = EV_OPEN;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	82 87       	std	Z+10, r24	; 0x0a
    24f8:	08 95       	ret

000024fa <_ZN2Sw8callbackEv>:
	lastEvent = EV_NONE;
}


void Sw::callback(void) {
	update();
    24fa:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <_ZN2Sw6updateEv>

000024fe <_ZN2Sw8hasEventEv>:
	}				
	
}


bool	Sw::hasEvent(void) {
    24fe:	21 e0       	ldi	r18, 0x01	; 1
    2500:	fc 01       	movw	r30, r24
    2502:	82 85       	ldd	r24, Z+10	; 0x0a
    2504:	81 11       	cpse	r24, r1
    2506:	01 c0       	rjmp	.+2      	; 0x250a <_ZN2Sw8hasEventEv+0xc>
    2508:	20 e0       	ldi	r18, 0x00	; 0
	if (lastEvent != EV_NONE) {
		return true;
	}
	return false;
}
    250a:	82 2f       	mov	r24, r18
    250c:	08 95       	ret

0000250e <_ZN2Sw8getEventEv>:


event Sw::getEvent(void) {
	return lastEvent;
}
    250e:	fc 01       	movw	r30, r24
    2510:	82 85       	ldd	r24, Z+10	; 0x0a
    2512:	08 95       	ret

00002514 <_ZN2Sw10clearEventEv>:

void Sw::clearEvent(void) {
	lastEvent = EV_NONE;
    2514:	fc 01       	movw	r30, r24
    2516:	12 86       	std	Z+10, r1	; 0x0a
    2518:	08 95       	ret

0000251a <_ZN2Sw8isClosedEv>:
}


bool Sw::isClosed(void) {

	return ((state == PB_CLOSE) || (state == PB_OPEN_DLY));
    251a:	fc 01       	movw	r30, r24
    251c:	91 85       	ldd	r25, Z+9	; 0x09
    251e:	92 50       	subi	r25, 0x02	; 2
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	92 30       	cpi	r25, 0x02	; 2
    2524:	08 f0       	brcs	.+2      	; 0x2528 <_ZN2Sw8isClosedEv+0xe>
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	08 95       	ret

0000252a <_ZN5TimerC1Ev>:

//
// disable timer by setting clock source to 0
//
	TCCR1B = (1 << WGM12);   // clock off, WGM30 = 4, CTC mode
	TIMSK1 = 0;
    252a:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <_ZN5Timer11initializedE>
    252e:	81 11       	cpse	r24, r1
    2530:	11 c0       	rjmp	.+34     	; 0x2554 <_ZN5TimerC1Ev+0x2a>
    2532:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2536:	88 e0       	ldi	r24, 0x08	; 8
    2538:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    253c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    2540:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2544:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    2548:	82 e0       	ldi	r24, 0x02	; 2
    254a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <_ZN5Timer11initializedE>
    2554:	08 95       	ret

00002556 <_ZN5Timer10startTimerEP8Callbackj>:
    2556:	ac 01       	movw	r20, r24
    2558:	9b 01       	movw	r18, r22
    255a:	a8 ee       	ldi	r26, 0xE8	; 232
    255c:	b3 e0       	ldi	r27, 0x03	; 3
    255e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__umulhisi3>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	26 e0       	ldi	r18, 0x06	; 6
    2568:	b6 95       	lsr	r27
    256a:	a7 95       	ror	r26
    256c:	97 95       	ror	r25
    256e:	87 95       	ror	r24
    2570:	2a 95       	dec	r18
    2572:	d1 f7       	brne	.-12     	; 0x2568 <_ZN5Timer10startTimerEP8Callbackj+0x12>
    2574:	50 93 4d 03 	sts	0x034D, r21	; 0x80034d <_ZN5Timer2cbE+0x1>
    2578:	40 93 4c 03 	sts	0x034C, r20	; 0x80034c <_ZN5Timer2cbE>
    257c:	2d e0       	ldi	r18, 0x0D	; 13
    257e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    2582:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2586:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    258a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    258e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2592:	82 e0       	ldi	r24, 0x02	; 2
    2594:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    2598:	08 95       	ret

0000259a <_ZN5Timer7expiredEv>:


void Timer::expired(void) {

	// disable timer
	TCCR1B = (1 << WGM12);   // clock off, WGM30 = 4, CTC mode
    259a:	88 e0       	ldi	r24, 0x08	; 8
    259c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = 0;
    25a0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	// callback	
	if (cb) {
    25a4:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <_ZN5Timer2cbE>
    25a8:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <_ZN5Timer2cbE+0x1>
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	39 f0       	breq	.+14     	; 0x25be <_ZN5Timer7expiredEv+0x24>
		cb->callback();
    25b0:	dc 01       	movw	r26, r24
    25b2:	ed 91       	ld	r30, X+
    25b4:	fc 91       	ld	r31, X
    25b6:	01 90       	ld	r0, Z+
    25b8:	f0 81       	ld	r31, Z
    25ba:	e0 2d       	mov	r30, r0
    25bc:	09 94       	ijmp
    25be:	08 95       	ret

000025c0 <__vector_11>:
Callback *Timer::cb;

//
// timer isr
//
ISR( TIMER1_COMPA_vect ) {
    25c0:	1f 92       	push	r1
    25c2:	0f 92       	push	r0
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	0f 92       	push	r0
    25c8:	11 24       	eor	r1, r1
    25ca:	2f 93       	push	r18
    25cc:	3f 93       	push	r19
    25ce:	4f 93       	push	r20
    25d0:	5f 93       	push	r21
    25d2:	6f 93       	push	r22
    25d4:	7f 93       	push	r23
    25d6:	8f 93       	push	r24
    25d8:	9f 93       	push	r25
    25da:	af 93       	push	r26
    25dc:	bf 93       	push	r27
    25de:	ef 93       	push	r30
    25e0:	ff 93       	push	r31
	Timer::expired();
    25e2:	0e 94 cd 12 	call	0x259a	; 0x259a <_ZN5Timer7expiredEv>
}
    25e6:	ff 91       	pop	r31
    25e8:	ef 91       	pop	r30
    25ea:	bf 91       	pop	r27
    25ec:	af 91       	pop	r26
    25ee:	9f 91       	pop	r25
    25f0:	8f 91       	pop	r24
    25f2:	7f 91       	pop	r23
    25f4:	6f 91       	pop	r22
    25f6:	5f 91       	pop	r21
    25f8:	4f 91       	pop	r20
    25fa:	3f 91       	pop	r19
    25fc:	2f 91       	pop	r18
    25fe:	0f 90       	pop	r0
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	0f 90       	pop	r0
    2604:	1f 90       	pop	r1
    2606:	18 95       	reti

00002608 <uart_init>:

 void uart_init( void)
 {
 
 //  Set baud rate for 115200 
 	 UBRR0H = (uint8_t)( UBRR_115200 >> 8);
    2608:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	 UBRR0L = (uint8_t) UBRR_115200	;
    260c:	88 e0       	ldi	r24, 0x08	; 8
    260e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

//	 Enable receiver and transmitter
	 UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    2612:	88 e1       	ldi	r24, 0x18	; 24
    2614:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

//	8data, 2 stop bits
	 UCSR0C = (1 << USBS0) | (3 << UCSZ00);
    2618:	8e e0       	ldi	r24, 0x0E	; 14
    261a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    261e:	08 95       	ret

00002620 <uart_getc>:
}

int uart_getc(FILE *f) {
	while (!(UCSR0A & (1 << RXC0)));
    2620:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    2624:	87 ff       	sbrs	r24, 7
    2626:	fc cf       	rjmp	.-8      	; 0x2620 <uart_getc>
	return UDR0;
    2628:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	08 95       	ret

00002630 <uart_putc>:


int  uart_putc(char c, FILE *f) {
    2630:	cf 93       	push	r28
    2632:	c8 2f       	mov	r28, r24
	if (c == '\n') {
    2634:	8a 30       	cpi	r24, 0x0A	; 10
    2636:	19 f4       	brne	.+6      	; 0x263e <uart_putc+0xe>
		uart_putc('\r', f);
    2638:	8d e0       	ldi	r24, 0x0D	; 13
    263a:	0e 94 18 13 	call	0x2630	; 0x2630 <uart_putc>
	}
	while (!(UCSR0A & (1 << UDRE0)));
    263e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    2642:	85 ff       	sbrs	r24, 5
    2644:	fc cf       	rjmp	.-8      	; 0x263e <uart_putc+0xe>
	UDR0 = c;
    2646:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	cf 91       	pop	r28
    2650:	08 95       	ret

00002652 <_ZN3vfoC1EP7EncoderP13vfoParametersj>:
uint32_t freq = vfoData[band].rxFreq;
char tbuf[16];

	intToString32(freq,tbuf);
	formatDisplayFreq(tbuf,buf);
}
    2652:	cf 92       	push	r12
    2654:	df 92       	push	r13
    2656:	ef 92       	push	r14
    2658:	ff 92       	push	r15
    265a:	cf 93       	push	r28
    265c:	fa 01       	movw	r30, r20
    265e:	dc 01       	movw	r26, r24
    2660:	4e 55       	subi	r20, 0x5E	; 94
    2662:	5f 4f       	sbci	r21, 0xFF	; 255
    2664:	c0 80       	ld	r12, Z
    2666:	d1 80       	ldd	r13, Z+1	; 0x01
    2668:	e2 80       	ldd	r14, Z+2	; 0x02
    266a:	f3 80       	ldd	r15, Z+3	; 0x03
    266c:	cd 92       	st	X+, r12
    266e:	dd 92       	st	X+, r13
    2670:	ed 92       	st	X+, r14
    2672:	fc 92       	st	X, r15
    2674:	13 97       	sbiw	r26, 0x03	; 3
    2676:	c4 80       	ldd	r12, Z+4	; 0x04
    2678:	d5 80       	ldd	r13, Z+5	; 0x05
    267a:	e6 80       	ldd	r14, Z+6	; 0x06
    267c:	f7 80       	ldd	r15, Z+7	; 0x07
    267e:	14 96       	adiw	r26, 0x04	; 4
    2680:	cd 92       	st	X+, r12
    2682:	dd 92       	st	X+, r13
    2684:	ed 92       	st	X+, r14
    2686:	fc 92       	st	X, r15
    2688:	17 97       	sbiw	r26, 0x07	; 7
    268a:	c0 85       	ldd	r28, Z+8	; 0x08
    268c:	18 96       	adiw	r26, 0x08	; 8
    268e:	cc 93       	st	X, r28
    2690:	18 97       	sbiw	r26, 0x08	; 8
    2692:	c1 84       	ldd	r12, Z+9	; 0x09
    2694:	d2 84       	ldd	r13, Z+10	; 0x0a
    2696:	e3 84       	ldd	r14, Z+11	; 0x0b
    2698:	f4 84       	ldd	r15, Z+12	; 0x0c
    269a:	19 96       	adiw	r26, 0x09	; 9
    269c:	cd 92       	st	X+, r12
    269e:	dd 92       	st	X+, r13
    26a0:	ed 92       	st	X+, r14
    26a2:	fc 92       	st	X, r15
    26a4:	1c 97       	sbiw	r26, 0x0c	; 12
    26a6:	c5 84       	ldd	r12, Z+13	; 0x0d
    26a8:	d6 84       	ldd	r13, Z+14	; 0x0e
    26aa:	e7 84       	ldd	r14, Z+15	; 0x0f
    26ac:	f0 88       	ldd	r15, Z+16	; 0x10
    26ae:	1d 96       	adiw	r26, 0x0d	; 13
    26b0:	cd 92       	st	X+, r12
    26b2:	dd 92       	st	X+, r13
    26b4:	ed 92       	st	X+, r14
    26b6:	fc 92       	st	X, r15
    26b8:	50 97       	sbiw	r26, 0x10	; 16
    26ba:	c1 89       	ldd	r28, Z+17	; 0x11
    26bc:	51 96       	adiw	r26, 0x11	; 17
    26be:	cc 93       	st	X, r28
    26c0:	51 97       	sbiw	r26, 0x11	; 17
    26c2:	72 96       	adiw	r30, 0x12	; 18
    26c4:	52 96       	adiw	r26, 0x12	; 18
    26c6:	e4 17       	cp	r30, r20
    26c8:	f5 07       	cpc	r31, r21
    26ca:	61 f6       	brne	.-104    	; 0x2664 <_ZN3vfoC1EP7EncoderP13vfoParametersj+0x12>
    26cc:	fc 01       	movw	r30, r24
    26ce:	e9 55       	subi	r30, 0x59	; 89
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	71 83       	std	Z+1, r23	; 0x01
    26d4:	60 83       	st	Z, r22
    26d6:	35 97       	sbiw	r30, 0x05	; 5
    26d8:	44 e6       	ldi	r20, 0x64	; 100
    26da:	50 e0       	ldi	r21, 0x00	; 0
    26dc:	60 e0       	ldi	r22, 0x00	; 0
    26de:	70 e0       	ldi	r23, 0x00	; 0
    26e0:	40 83       	st	Z, r20
    26e2:	51 83       	std	Z+1, r21	; 0x01
    26e4:	62 83       	std	Z+2, r22	; 0x02
    26e6:	73 83       	std	Z+3, r23	; 0x03
    26e8:	34 96       	adiw	r30, 0x04	; 4
    26ea:	41 e0       	ldi	r20, 0x01	; 1
    26ec:	40 83       	st	Z, r20
    26ee:	33 96       	adiw	r30, 0x03	; 3
    26f0:	31 83       	std	Z+1, r19	; 0x01
    26f2:	20 83       	st	Z, r18
    26f4:	cf 91       	pop	r28
    26f6:	ff 90       	pop	r15
    26f8:	ef 90       	pop	r14
    26fa:	df 90       	pop	r13
    26fc:	cf 90       	pop	r12
    26fe:	08 95       	ret

00002700 <_ZN3vfo6updateEh>:
    2700:	8f 92       	push	r8
    2702:	9f 92       	push	r9
    2704:	af 92       	push	r10
    2706:	bf 92       	push	r11
    2708:	cf 92       	push	r12
    270a:	df 92       	push	r13
    270c:	ef 92       	push	r14
    270e:	ff 92       	push	r15
    2710:	1f 93       	push	r17
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	ec 01       	movw	r28, r24
    2718:	16 2f       	mov	r17, r22
    271a:	7c 01       	movw	r14, r24
    271c:	27 ea       	ldi	r18, 0xA7	; 167
    271e:	e2 0e       	add	r14, r18
    2720:	f1 1c       	adc	r15, r1
    2722:	f7 01       	movw	r30, r14
    2724:	80 81       	ld	r24, Z
    2726:	91 81       	ldd	r25, Z+1	; 0x01
    2728:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_ZN7Encoder8hasEventEv>
    272c:	88 23       	and	r24, r24
    272e:	09 f4       	brne	.+2      	; 0x2732 <_ZN3vfo6updateEh+0x32>
    2730:	6e c0       	rjmp	.+220    	; 0x280e <_ZN3vfo6updateEh+0x10e>
    2732:	f7 01       	movw	r30, r14
    2734:	80 81       	ld	r24, Z
    2736:	91 81       	ldd	r25, Z+1	; 0x01
    2738:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    273c:	82 30       	cpi	r24, 0x02	; 2
    273e:	91 f5       	brne	.+100    	; 0x27a4 <_ZN3vfo6updateEh+0xa4>
    2740:	fe 01       	movw	r30, r28
    2742:	ee 55       	subi	r30, 0x5E	; 94
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	80 80       	ld	r8, Z
    2748:	91 80       	ldd	r9, Z+1	; 0x01
    274a:	a2 80       	ldd	r10, Z+2	; 0x02
    274c:	b3 80       	ldd	r11, Z+3	; 0x03
    274e:	f7 01       	movw	r30, r14
    2750:	80 81       	ld	r24, Z
    2752:	91 81       	ldd	r25, Z+1	; 0x01
    2754:	0e 94 13 06 	call	0xc26	; 0xc26 <_ZN7Encoder17getMissedCcwCountEv>
    2758:	dc 01       	movw	r26, r24
    275a:	11 96       	adiw	r26, 0x01	; 1
    275c:	a5 01       	movw	r20, r10
    275e:	94 01       	movw	r18, r8
    2760:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__mulshisi3>
    2764:	fe 01       	movw	r30, r28
    2766:	22 e1       	ldi	r18, 0x12	; 18
    2768:	12 9f       	mul	r17, r18
    276a:	e0 0d       	add	r30, r0
    276c:	f1 1d       	adc	r31, r1
    276e:	11 24       	eor	r1, r1
    2770:	c0 80       	ld	r12, Z
    2772:	d1 80       	ldd	r13, Z+1	; 0x01
    2774:	e2 80       	ldd	r14, Z+2	; 0x02
    2776:	f3 80       	ldd	r15, Z+3	; 0x03
    2778:	c6 1a       	sub	r12, r22
    277a:	d7 0a       	sbc	r13, r23
    277c:	e8 0a       	sbc	r14, r24
    277e:	f9 0a       	sbc	r15, r25
    2780:	c0 82       	st	Z, r12
    2782:	d1 82       	std	Z+1, r13	; 0x01
    2784:	e2 82       	std	Z+2, r14	; 0x02
    2786:	f3 82       	std	Z+3, r15	; 0x03
    2788:	ef 01       	movw	r28, r30
    278a:	c1 84       	ldd	r12, Z+9	; 0x09
    278c:	d2 84       	ldd	r13, Z+10	; 0x0a
    278e:	e3 84       	ldd	r14, Z+11	; 0x0b
    2790:	f4 84       	ldd	r15, Z+12	; 0x0c
    2792:	a7 01       	movw	r20, r14
    2794:	96 01       	movw	r18, r12
    2796:	26 1b       	sub	r18, r22
    2798:	37 0b       	sbc	r19, r23
    279a:	48 0b       	sbc	r20, r24
    279c:	59 0b       	sbc	r21, r25
    279e:	da 01       	movw	r26, r20
    27a0:	c9 01       	movw	r24, r18
    27a2:	31 c0       	rjmp	.+98     	; 0x2806 <_ZN3vfo6updateEh+0x106>
    27a4:	81 30       	cpi	r24, 0x01	; 1
    27a6:	99 f5       	brne	.+102    	; 0x280e <_ZN3vfo6updateEh+0x10e>
    27a8:	fe 01       	movw	r30, r28
    27aa:	ee 55       	subi	r30, 0x5E	; 94
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 80       	ld	r8, Z
    27b0:	91 80       	ldd	r9, Z+1	; 0x01
    27b2:	a2 80       	ldd	r10, Z+2	; 0x02
    27b4:	b3 80       	ldd	r11, Z+3	; 0x03
    27b6:	f7 01       	movw	r30, r14
    27b8:	80 81       	ld	r24, Z
    27ba:	91 81       	ldd	r25, Z+1	; 0x01
    27bc:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN7Encoder16getMissedCwCountEv>
    27c0:	dc 01       	movw	r26, r24
    27c2:	11 96       	adiw	r26, 0x01	; 1
    27c4:	a5 01       	movw	r20, r10
    27c6:	94 01       	movw	r18, r8
    27c8:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__mulshisi3>
    27cc:	fe 01       	movw	r30, r28
    27ce:	22 e1       	ldi	r18, 0x12	; 18
    27d0:	12 9f       	mul	r17, r18
    27d2:	e0 0d       	add	r30, r0
    27d4:	f1 1d       	adc	r31, r1
    27d6:	11 24       	eor	r1, r1
    27d8:	c0 80       	ld	r12, Z
    27da:	d1 80       	ldd	r13, Z+1	; 0x01
    27dc:	e2 80       	ldd	r14, Z+2	; 0x02
    27de:	f3 80       	ldd	r15, Z+3	; 0x03
    27e0:	c6 0e       	add	r12, r22
    27e2:	d7 1e       	adc	r13, r23
    27e4:	e8 1e       	adc	r14, r24
    27e6:	f9 1e       	adc	r15, r25
    27e8:	c0 82       	st	Z, r12
    27ea:	d1 82       	std	Z+1, r13	; 0x01
    27ec:	e2 82       	std	Z+2, r14	; 0x02
    27ee:	f3 82       	std	Z+3, r15	; 0x03
    27f0:	ef 01       	movw	r28, r30
    27f2:	c1 84       	ldd	r12, Z+9	; 0x09
    27f4:	d2 84       	ldd	r13, Z+10	; 0x0a
    27f6:	e3 84       	ldd	r14, Z+11	; 0x0b
    27f8:	f4 84       	ldd	r15, Z+12	; 0x0c
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	8c 0d       	add	r24, r12
    2800:	9d 1d       	adc	r25, r13
    2802:	ae 1d       	adc	r26, r14
    2804:	bf 1d       	adc	r27, r15
    2806:	89 87       	std	Y+9, r24	; 0x09
    2808:	9a 87       	std	Y+10, r25	; 0x0a
    280a:	ab 87       	std	Y+11, r26	; 0x0b
    280c:	bc 87       	std	Y+12, r27	; 0x0c
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	1f 91       	pop	r17
    2814:	ff 90       	pop	r15
    2816:	ef 90       	pop	r14
    2818:	df 90       	pop	r13
    281a:	cf 90       	pop	r12
    281c:	bf 90       	pop	r11
    281e:	af 90       	pop	r10
    2820:	9f 90       	pop	r9
    2822:	8f 90       	pop	r8
    2824:	08 95       	ret

00002826 <_ZN3vfo9getRxFreqE5_band>:
    2826:	0f 93       	push	r16
    2828:	1f 93       	push	r17
    282a:	fc 01       	movw	r30, r24
    282c:	02 e1       	ldi	r16, 0x12	; 18
    282e:	60 9f       	mul	r22, r16
    2830:	e0 0d       	add	r30, r0
    2832:	f1 1d       	adc	r31, r1
    2834:	11 24       	eor	r1, r1
    2836:	80 81       	ld	r24, Z
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	a2 81       	ldd	r26, Z+2	; 0x02
    283c:	b3 81       	ldd	r27, Z+3	; 0x03
    283e:	44 81       	ldd	r20, Z+4	; 0x04
    2840:	55 81       	ldd	r21, Z+5	; 0x05
    2842:	66 81       	ldd	r22, Z+6	; 0x06
    2844:	77 81       	ldd	r23, Z+7	; 0x07
    2846:	8c 01       	movw	r16, r24
    2848:	9d 01       	movw	r18, r26
    284a:	04 0f       	add	r16, r20
    284c:	15 1f       	adc	r17, r21
    284e:	26 1f       	adc	r18, r22
    2850:	37 1f       	adc	r19, r23
    2852:	c9 01       	movw	r24, r18
    2854:	b8 01       	movw	r22, r16
    2856:	20 85       	ldd	r18, Z+8	; 0x08
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	50 e0       	ldi	r21, 0x00	; 0
    285e:	0e 94 6d 17 	call	0x2eda	; 0x2eda <__udivmodsi4>
    2862:	ca 01       	movw	r24, r20
    2864:	b9 01       	movw	r22, r18
    2866:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatunsisf>
    286a:	1f 91       	pop	r17
    286c:	0f 91       	pop	r16
    286e:	08 95       	ret

00002870 <_ZN3vfo9getTxFreqE5_band>:
    2870:	0f 93       	push	r16
    2872:	1f 93       	push	r17
    2874:	fc 01       	movw	r30, r24
    2876:	02 e1       	ldi	r16, 0x12	; 18
    2878:	60 9f       	mul	r22, r16
    287a:	e0 0d       	add	r30, r0
    287c:	f1 1d       	adc	r31, r1
    287e:	11 24       	eor	r1, r1
    2880:	81 85       	ldd	r24, Z+9	; 0x09
    2882:	92 85       	ldd	r25, Z+10	; 0x0a
    2884:	a3 85       	ldd	r26, Z+11	; 0x0b
    2886:	b4 85       	ldd	r27, Z+12	; 0x0c
    2888:	45 85       	ldd	r20, Z+13	; 0x0d
    288a:	56 85       	ldd	r21, Z+14	; 0x0e
    288c:	67 85       	ldd	r22, Z+15	; 0x0f
    288e:	70 89       	ldd	r23, Z+16	; 0x10
    2890:	8c 01       	movw	r16, r24
    2892:	9d 01       	movw	r18, r26
    2894:	04 0f       	add	r16, r20
    2896:	15 1f       	adc	r17, r21
    2898:	26 1f       	adc	r18, r22
    289a:	37 1f       	adc	r19, r23
    289c:	c9 01       	movw	r24, r18
    289e:	b8 01       	movw	r22, r16
    28a0:	21 89       	ldd	r18, Z+17	; 0x11
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	40 e0       	ldi	r20, 0x00	; 0
    28a6:	50 e0       	ldi	r21, 0x00	; 0
    28a8:	0e 94 6d 17 	call	0x2eda	; 0x2eda <__udivmodsi4>
    28ac:	ca 01       	movw	r24, r20
    28ae:	b9 01       	movw	r22, r18
    28b0:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatunsisf>
    28b4:	1f 91       	pop	r17
    28b6:	0f 91       	pop	r16
    28b8:	08 95       	ret

000028ba <_ZN3vfo7setStepE6step_t>:
    28ba:	fc 01       	movw	r30, r24
    28bc:	ea 55       	subi	r30, 0x5A	; 90
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	60 83       	st	Z, r22
    28c2:	dc 01       	movw	r26, r24
    28c4:	ae 55       	subi	r26, 0x5E	; 94
    28c6:	bf 4f       	sbci	r27, 0xFF	; 255
    28c8:	84 e0       	ldi	r24, 0x04	; 4
    28ca:	68 9f       	mul	r22, r24
    28cc:	f0 01       	movw	r30, r0
    28ce:	11 24       	eor	r1, r1
    28d0:	e9 51       	subi	r30, 0x19	; 25
    28d2:	fd 4f       	sbci	r31, 0xFD	; 253
    28d4:	40 81       	ld	r20, Z
    28d6:	51 81       	ldd	r21, Z+1	; 0x01
    28d8:	62 81       	ldd	r22, Z+2	; 0x02
    28da:	73 81       	ldd	r23, Z+3	; 0x03
    28dc:	4d 93       	st	X+, r20
    28de:	5d 93       	st	X+, r21
    28e0:	6d 93       	st	X+, r22
    28e2:	7c 93       	st	X, r23
    28e4:	13 97       	sbiw	r26, 0x03	; 3
    28e6:	08 95       	ret

000028e8 <_ZN3vfo13intToString32EmPc>:
    28e8:	cf 92       	push	r12
    28ea:	df 92       	push	r13
    28ec:	ef 92       	push	r14
    28ee:	ff 92       	push	r15
    28f0:	cf 93       	push	r28
    28f2:	df 93       	push	r29
    28f4:	6a 01       	movw	r12, r20
    28f6:	7b 01       	movw	r14, r22
    28f8:	e9 01       	movw	r28, r18
    28fa:	cb 01       	movw	r24, r22
    28fc:	ba 01       	movw	r22, r20
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	31 ee       	ldi	r19, 0xE1	; 225
    2902:	45 ef       	ldi	r20, 0xF5	; 245
    2904:	55 e0       	ldi	r21, 0x05	; 5
    2906:	0e 94 6d 17 	call	0x2eda	; 0x2eda <__udivmodsi4>
    290a:	80 e3       	ldi	r24, 0x30	; 48
    290c:	82 0f       	add	r24, r18
    290e:	88 83       	st	Y, r24
    2910:	60 e0       	ldi	r22, 0x00	; 0
    2912:	71 ee       	ldi	r23, 0xE1	; 225
    2914:	85 ef       	ldi	r24, 0xF5	; 245
    2916:	95 e0       	ldi	r25, 0x05	; 5
    2918:	0e 94 49 17 	call	0x2e92	; 0x2e92 <__mulsi3>
    291c:	c6 1a       	sub	r12, r22
    291e:	d7 0a       	sbc	r13, r23
    2920:	e8 0a       	sbc	r14, r24
    2922:	f9 0a       	sbc	r15, r25
    2924:	c7 01       	movw	r24, r14
    2926:	b6 01       	movw	r22, r12
    2928:	20 e8       	ldi	r18, 0x80	; 128
    292a:	36 e9       	ldi	r19, 0x96	; 150
    292c:	48 e9       	ldi	r20, 0x98	; 152
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	0e 94 6d 17 	call	0x2eda	; 0x2eda <__udivmodsi4>
    2934:	80 e3       	ldi	r24, 0x30	; 48
    2936:	82 0f       	add	r24, r18
    2938:	89 83       	std	Y+1, r24	; 0x01
    293a:	60 e8       	ldi	r22, 0x80	; 128
    293c:	76 e9       	ldi	r23, 0x96	; 150
    293e:	88 e9       	ldi	r24, 0x98	; 152
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	0e 94 49 17 	call	0x2e92	; 0x2e92 <__mulsi3>
    2946:	c6 1a       	sub	r12, r22
    2948:	d7 0a       	sbc	r13, r23
    294a:	e8 0a       	sbc	r14, r24
    294c:	f9 0a       	sbc	r15, r25
    294e:	c7 01       	movw	r24, r14
    2950:	b6 01       	movw	r22, r12
    2952:	20 e4       	ldi	r18, 0x40	; 64
    2954:	32 e4       	ldi	r19, 0x42	; 66
    2956:	4f e0       	ldi	r20, 0x0F	; 15
    2958:	50 e0       	ldi	r21, 0x00	; 0
    295a:	0e 94 6d 17 	call	0x2eda	; 0x2eda <__udivmodsi4>
    295e:	80 e3       	ldi	r24, 0x30	; 48
    2960:	82 0f       	add	r24, r18
    2962:	8a 83       	std	Y+2, r24	; 0x02
    2964:	60 e4       	ldi	r22, 0x40	; 64
    2966:	72 e4       	ldi	r23, 0x42	; 66
    2968:	8f e0       	ldi	r24, 0x0F	; 15
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	0e 94 49 17 	call	0x2e92	; 0x2e92 <__mulsi3>
    2970:	c6 1a       	sub	r12, r22
    2972:	d7 0a       	sbc	r13, r23
    2974:	e8 0a       	sbc	r14, r24
    2976:	f9 0a       	sbc	r15, r25
    2978:	c7 01       	movw	r24, r14
    297a:	b6 01       	movw	r22, r12
    297c:	20 ea       	ldi	r18, 0xA0	; 160
    297e:	36 e8       	ldi	r19, 0x86	; 134
    2980:	41 e0       	ldi	r20, 0x01	; 1
    2982:	50 e0       	ldi	r21, 0x00	; 0
    2984:	0e 94 6d 17 	call	0x2eda	; 0x2eda <__udivmodsi4>
    2988:	80 e3       	ldi	r24, 0x30	; 48
    298a:	82 0f       	add	r24, r18
    298c:	8b 83       	std	Y+3, r24	; 0x03
    298e:	60 ea       	ldi	r22, 0xA0	; 160
    2990:	76 e8       	ldi	r23, 0x86	; 134
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	0e 94 49 17 	call	0x2e92	; 0x2e92 <__mulsi3>
    299a:	c6 1a       	sub	r12, r22
    299c:	d7 0a       	sbc	r13, r23
    299e:	e8 0a       	sbc	r14, r24
    29a0:	f9 0a       	sbc	r15, r25
    29a2:	c7 01       	movw	r24, r14
    29a4:	b6 01       	movw	r22, r12
    29a6:	20 e1       	ldi	r18, 0x10	; 16
    29a8:	37 e2       	ldi	r19, 0x27	; 39
    29aa:	40 e0       	ldi	r20, 0x00	; 0
    29ac:	50 e0       	ldi	r21, 0x00	; 0
    29ae:	0e 94 6d 17 	call	0x2eda	; 0x2eda <__udivmodsi4>
    29b2:	80 e3       	ldi	r24, 0x30	; 48
    29b4:	82 0f       	add	r24, r18
    29b6:	8c 83       	std	Y+4, r24	; 0x04
    29b8:	a0 e1       	ldi	r26, 0x10	; 16
    29ba:	b7 e2       	ldi	r27, 0x27	; 39
    29bc:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__muluhisi3>
    29c0:	c6 1a       	sub	r12, r22
    29c2:	d7 0a       	sbc	r13, r23
    29c4:	e8 0a       	sbc	r14, r24
    29c6:	f9 0a       	sbc	r15, r25
    29c8:	c7 01       	movw	r24, r14
    29ca:	b6 01       	movw	r22, r12
    29cc:	28 ee       	ldi	r18, 0xE8	; 232
    29ce:	33 e0       	ldi	r19, 0x03	; 3
    29d0:	40 e0       	ldi	r20, 0x00	; 0
    29d2:	50 e0       	ldi	r21, 0x00	; 0
    29d4:	0e 94 6d 17 	call	0x2eda	; 0x2eda <__udivmodsi4>
    29d8:	80 e3       	ldi	r24, 0x30	; 48
    29da:	82 0f       	add	r24, r18
    29dc:	8d 83       	std	Y+5, r24	; 0x05
    29de:	a8 ee       	ldi	r26, 0xE8	; 232
    29e0:	b3 e0       	ldi	r27, 0x03	; 3
    29e2:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__muluhisi3>
    29e6:	c6 1a       	sub	r12, r22
    29e8:	d7 0a       	sbc	r13, r23
    29ea:	e8 0a       	sbc	r14, r24
    29ec:	f9 0a       	sbc	r15, r25
    29ee:	c7 01       	movw	r24, r14
    29f0:	b6 01       	movw	r22, r12
    29f2:	24 e6       	ldi	r18, 0x64	; 100
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	50 e0       	ldi	r21, 0x00	; 0
    29fa:	0e 94 6d 17 	call	0x2eda	; 0x2eda <__udivmodsi4>
    29fe:	80 e3       	ldi	r24, 0x30	; 48
    2a00:	82 0f       	add	r24, r18
    2a02:	8e 83       	std	Y+6, r24	; 0x06
    2a04:	a4 e6       	ldi	r26, 0x64	; 100
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__muluhisi3>
    2a0c:	c6 1a       	sub	r12, r22
    2a0e:	d7 0a       	sbc	r13, r23
    2a10:	e8 0a       	sbc	r14, r24
    2a12:	f9 0a       	sbc	r15, r25
    2a14:	c7 01       	movw	r24, r14
    2a16:	b6 01       	movw	r22, r12
    2a18:	2a e0       	ldi	r18, 0x0A	; 10
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e0       	ldi	r20, 0x00	; 0
    2a1e:	50 e0       	ldi	r21, 0x00	; 0
    2a20:	0e 94 6d 17 	call	0x2eda	; 0x2eda <__udivmodsi4>
    2a24:	80 e3       	ldi	r24, 0x30	; 48
    2a26:	82 0f       	add	r24, r18
    2a28:	8f 83       	std	Y+7, r24	; 0x07
    2a2a:	aa e0       	ldi	r26, 0x0A	; 10
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__muluhisi3>
    2a32:	a7 01       	movw	r20, r14
    2a34:	96 01       	movw	r18, r12
    2a36:	26 1b       	sub	r18, r22
    2a38:	37 0b       	sbc	r19, r23
    2a3a:	48 0b       	sbc	r20, r24
    2a3c:	59 0b       	sbc	r21, r25
    2a3e:	da 01       	movw	r26, r20
    2a40:	c9 01       	movw	r24, r18
    2a42:	80 5d       	subi	r24, 0xD0	; 208
    2a44:	88 87       	std	Y+8, r24	; 0x08
    2a46:	19 86       	std	Y+9, r1	; 0x09
    2a48:	df 91       	pop	r29
    2a4a:	cf 91       	pop	r28
    2a4c:	ff 90       	pop	r15
    2a4e:	ef 90       	pop	r14
    2a50:	df 90       	pop	r13
    2a52:	cf 90       	pop	r12
    2a54:	08 95       	ret

00002a56 <_ZN3vfo17formatDisplayFreqEPcS0_>:
    2a56:	fa 01       	movw	r30, r20
    2a58:	db 01       	movw	r26, r22
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	5e e2       	ldi	r21, 0x2E	; 46
    2a64:	21 15       	cp	r18, r1
    2a66:	31 05       	cpc	r19, r1
    2a68:	59 f0       	breq	.+22     	; 0x2a80 <_ZN3vfo17formatDisplayFreqEPcS0_+0x2a>
    2a6a:	83 30       	cpi	r24, 0x03	; 3
    2a6c:	91 05       	cpc	r25, r1
    2a6e:	19 f0       	breq	.+6      	; 0x2a76 <_ZN3vfo17formatDisplayFreqEPcS0_+0x20>
    2a70:	86 30       	cpi	r24, 0x06	; 6
    2a72:	91 05       	cpc	r25, r1
    2a74:	11 f4       	brne	.+4      	; 0x2a7a <_ZN3vfo17formatDisplayFreqEPcS0_+0x24>
    2a76:	50 83       	st	Z, r21
    2a78:	31 96       	adiw	r30, 0x01	; 1
    2a7a:	2c 91       	ld	r18, X
    2a7c:	20 83       	st	Z, r18
    2a7e:	04 c0       	rjmp	.+8      	; 0x2a88 <_ZN3vfo17formatDisplayFreqEPcS0_+0x32>
    2a80:	4c 91       	ld	r20, X
    2a82:	40 33       	cpi	r20, 0x30	; 48
    2a84:	21 f0       	breq	.+8      	; 0x2a8e <_ZN3vfo17formatDisplayFreqEPcS0_+0x38>
    2a86:	40 83       	st	Z, r20
    2a88:	31 96       	adiw	r30, 0x01	; 1
    2a8a:	21 e0       	ldi	r18, 0x01	; 1
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	01 96       	adiw	r24, 0x01	; 1
    2a90:	11 96       	adiw	r26, 0x01	; 1
    2a92:	89 30       	cpi	r24, 0x09	; 9
    2a94:	91 05       	cpc	r25, r1
    2a96:	31 f7       	brne	.-52     	; 0x2a64 <_ZN3vfo17formatDisplayFreqEPcS0_+0xe>
    2a98:	10 82       	st	Z, r1
    2a9a:	08 95       	ret

00002a9c <_ZN3vfo16getTxDisplayFreqEPc5_band>:
	*dstptr = '\0';
}



void vfo::getTxDisplayFreq(char *buf, band_t band) {
    2a9c:	ef 92       	push	r14
    2a9e:	ff 92       	push	r15
    2aa0:	0f 93       	push	r16
    2aa2:	1f 93       	push	r17
    2aa4:	cf 93       	push	r28
    2aa6:	df 93       	push	r29
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	60 97       	sbiw	r28, 0x10	; 16
    2aae:	0f b6       	in	r0, 0x3f	; 63
    2ab0:	f8 94       	cli
    2ab2:	de bf       	out	0x3e, r29	; 62
    2ab4:	0f be       	out	0x3f, r0	; 63
    2ab6:	cd bf       	out	0x3d, r28	; 61
    2ab8:	8c 01       	movw	r16, r24
    2aba:	7b 01       	movw	r14, r22

uint32_t freq = vfoData[band].txFreq;
    2abc:	fc 01       	movw	r30, r24
    2abe:	82 e1       	ldi	r24, 0x12	; 18
    2ac0:	48 9f       	mul	r20, r24
    2ac2:	e0 0d       	add	r30, r0
    2ac4:	f1 1d       	adc	r31, r1
    2ac6:	11 24       	eor	r1, r1
char tbuf[16];

	intToString32(freq,tbuf);
    2ac8:	41 85       	ldd	r20, Z+9	; 0x09
    2aca:	52 85       	ldd	r21, Z+10	; 0x0a
    2acc:	63 85       	ldd	r22, Z+11	; 0x0b
    2ace:	74 85       	ldd	r23, Z+12	; 0x0c
    2ad0:	9e 01       	movw	r18, r28
    2ad2:	2f 5f       	subi	r18, 0xFF	; 255
    2ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad6:	c8 01       	movw	r24, r16
    2ad8:	0e 94 74 14 	call	0x28e8	; 0x28e8 <_ZN3vfo13intToString32EmPc>
	formatDisplayFreq(tbuf,buf);
    2adc:	a7 01       	movw	r20, r14
    2ade:	be 01       	movw	r22, r28
    2ae0:	6f 5f       	subi	r22, 0xFF	; 255
    2ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae4:	c8 01       	movw	r24, r16
    2ae6:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <_ZN3vfo17formatDisplayFreqEPcS0_>
}
    2aea:	60 96       	adiw	r28, 0x10	; 16
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	f8 94       	cli
    2af0:	de bf       	out	0x3e, r29	; 62
    2af2:	0f be       	out	0x3f, r0	; 63
    2af4:	cd bf       	out	0x3d, r28	; 61
    2af6:	df 91       	pop	r29
    2af8:	cf 91       	pop	r28
    2afa:	1f 91       	pop	r17
    2afc:	0f 91       	pop	r16
    2afe:	ff 90       	pop	r15
    2b00:	ef 90       	pop	r14
    2b02:	08 95       	ret

00002b04 <_ZN3vfo7getLineEv>:


uint16_t vfo::getLine(void) {
	return line;
    2b04:	87 55       	subi	r24, 0x57	; 87
    2b06:	9f 4f       	sbci	r25, 0xFF	; 255
}
    2b08:	fc 01       	movw	r30, r24
    2b0a:	80 81       	ld	r24, Z
    2b0c:	91 81       	ldd	r25, Z+1	; 0x01
    2b0e:	08 95       	ret

00002b10 <__fixunssfsi>:
    2b10:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__fp_splitA>
    2b14:	88 f0       	brcs	.+34     	; 0x2b38 <__fixunssfsi+0x28>
    2b16:	9f 57       	subi	r25, 0x7F	; 127
    2b18:	98 f0       	brcs	.+38     	; 0x2b40 <__fixunssfsi+0x30>
    2b1a:	b9 2f       	mov	r27, r25
    2b1c:	99 27       	eor	r25, r25
    2b1e:	b7 51       	subi	r27, 0x17	; 23
    2b20:	b0 f0       	brcs	.+44     	; 0x2b4e <__fixunssfsi+0x3e>
    2b22:	e1 f0       	breq	.+56     	; 0x2b5c <__fixunssfsi+0x4c>
    2b24:	66 0f       	add	r22, r22
    2b26:	77 1f       	adc	r23, r23
    2b28:	88 1f       	adc	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	1a f0       	brmi	.+6      	; 0x2b34 <__fixunssfsi+0x24>
    2b2e:	ba 95       	dec	r27
    2b30:	c9 f7       	brne	.-14     	; 0x2b24 <__fixunssfsi+0x14>
    2b32:	14 c0       	rjmp	.+40     	; 0x2b5c <__fixunssfsi+0x4c>
    2b34:	b1 30       	cpi	r27, 0x01	; 1
    2b36:	91 f0       	breq	.+36     	; 0x2b5c <__fixunssfsi+0x4c>
    2b38:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__fp_zero>
    2b3c:	b1 e0       	ldi	r27, 0x01	; 1
    2b3e:	08 95       	ret
    2b40:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__fp_zero>
    2b44:	67 2f       	mov	r22, r23
    2b46:	78 2f       	mov	r23, r24
    2b48:	88 27       	eor	r24, r24
    2b4a:	b8 5f       	subi	r27, 0xF8	; 248
    2b4c:	39 f0       	breq	.+14     	; 0x2b5c <__fixunssfsi+0x4c>
    2b4e:	b9 3f       	cpi	r27, 0xF9	; 249
    2b50:	cc f3       	brlt	.-14     	; 0x2b44 <__fixunssfsi+0x34>
    2b52:	86 95       	lsr	r24
    2b54:	77 95       	ror	r23
    2b56:	67 95       	ror	r22
    2b58:	b3 95       	inc	r27
    2b5a:	d9 f7       	brne	.-10     	; 0x2b52 <__fixunssfsi+0x42>
    2b5c:	3e f4       	brtc	.+14     	; 0x2b6c <__fixunssfsi+0x5c>
    2b5e:	90 95       	com	r25
    2b60:	80 95       	com	r24
    2b62:	70 95       	com	r23
    2b64:	61 95       	neg	r22
    2b66:	7f 4f       	sbci	r23, 0xFF	; 255
    2b68:	8f 4f       	sbci	r24, 0xFF	; 255
    2b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b6c:	08 95       	ret

00002b6e <__floatunsisf>:
    2b6e:	e8 94       	clt
    2b70:	09 c0       	rjmp	.+18     	; 0x2b84 <__floatsisf+0x12>

00002b72 <__floatsisf>:
    2b72:	97 fb       	bst	r25, 7
    2b74:	3e f4       	brtc	.+14     	; 0x2b84 <__floatsisf+0x12>
    2b76:	90 95       	com	r25
    2b78:	80 95       	com	r24
    2b7a:	70 95       	com	r23
    2b7c:	61 95       	neg	r22
    2b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b80:	8f 4f       	sbci	r24, 0xFF	; 255
    2b82:	9f 4f       	sbci	r25, 0xFF	; 255
    2b84:	99 23       	and	r25, r25
    2b86:	a9 f0       	breq	.+42     	; 0x2bb2 <__floatsisf+0x40>
    2b88:	f9 2f       	mov	r31, r25
    2b8a:	96 e9       	ldi	r25, 0x96	; 150
    2b8c:	bb 27       	eor	r27, r27
    2b8e:	93 95       	inc	r25
    2b90:	f6 95       	lsr	r31
    2b92:	87 95       	ror	r24
    2b94:	77 95       	ror	r23
    2b96:	67 95       	ror	r22
    2b98:	b7 95       	ror	r27
    2b9a:	f1 11       	cpse	r31, r1
    2b9c:	f8 cf       	rjmp	.-16     	; 0x2b8e <__floatsisf+0x1c>
    2b9e:	fa f4       	brpl	.+62     	; 0x2bde <__floatsisf+0x6c>
    2ba0:	bb 0f       	add	r27, r27
    2ba2:	11 f4       	brne	.+4      	; 0x2ba8 <__floatsisf+0x36>
    2ba4:	60 ff       	sbrs	r22, 0
    2ba6:	1b c0       	rjmp	.+54     	; 0x2bde <__floatsisf+0x6c>
    2ba8:	6f 5f       	subi	r22, 0xFF	; 255
    2baa:	7f 4f       	sbci	r23, 0xFF	; 255
    2bac:	8f 4f       	sbci	r24, 0xFF	; 255
    2bae:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb0:	16 c0       	rjmp	.+44     	; 0x2bde <__floatsisf+0x6c>
    2bb2:	88 23       	and	r24, r24
    2bb4:	11 f0       	breq	.+4      	; 0x2bba <__floatsisf+0x48>
    2bb6:	96 e9       	ldi	r25, 0x96	; 150
    2bb8:	11 c0       	rjmp	.+34     	; 0x2bdc <__floatsisf+0x6a>
    2bba:	77 23       	and	r23, r23
    2bbc:	21 f0       	breq	.+8      	; 0x2bc6 <__floatsisf+0x54>
    2bbe:	9e e8       	ldi	r25, 0x8E	; 142
    2bc0:	87 2f       	mov	r24, r23
    2bc2:	76 2f       	mov	r23, r22
    2bc4:	05 c0       	rjmp	.+10     	; 0x2bd0 <__floatsisf+0x5e>
    2bc6:	66 23       	and	r22, r22
    2bc8:	71 f0       	breq	.+28     	; 0x2be6 <__floatsisf+0x74>
    2bca:	96 e8       	ldi	r25, 0x86	; 134
    2bcc:	86 2f       	mov	r24, r22
    2bce:	70 e0       	ldi	r23, 0x00	; 0
    2bd0:	60 e0       	ldi	r22, 0x00	; 0
    2bd2:	2a f0       	brmi	.+10     	; 0x2bde <__floatsisf+0x6c>
    2bd4:	9a 95       	dec	r25
    2bd6:	66 0f       	add	r22, r22
    2bd8:	77 1f       	adc	r23, r23
    2bda:	88 1f       	adc	r24, r24
    2bdc:	da f7       	brpl	.-10     	; 0x2bd4 <__floatsisf+0x62>
    2bde:	88 0f       	add	r24, r24
    2be0:	96 95       	lsr	r25
    2be2:	87 95       	ror	r24
    2be4:	97 f9       	bld	r25, 7
    2be6:	08 95       	ret

00002be8 <__fp_split3>:
    2be8:	57 fd       	sbrc	r21, 7
    2bea:	90 58       	subi	r25, 0x80	; 128
    2bec:	44 0f       	add	r20, r20
    2bee:	55 1f       	adc	r21, r21
    2bf0:	59 f0       	breq	.+22     	; 0x2c08 <__fp_splitA+0x10>
    2bf2:	5f 3f       	cpi	r21, 0xFF	; 255
    2bf4:	71 f0       	breq	.+28     	; 0x2c12 <__fp_splitA+0x1a>
    2bf6:	47 95       	ror	r20

00002bf8 <__fp_splitA>:
    2bf8:	88 0f       	add	r24, r24
    2bfa:	97 fb       	bst	r25, 7
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	61 f0       	breq	.+24     	; 0x2c18 <__fp_splitA+0x20>
    2c00:	9f 3f       	cpi	r25, 0xFF	; 255
    2c02:	79 f0       	breq	.+30     	; 0x2c22 <__fp_splitA+0x2a>
    2c04:	87 95       	ror	r24
    2c06:	08 95       	ret
    2c08:	12 16       	cp	r1, r18
    2c0a:	13 06       	cpc	r1, r19
    2c0c:	14 06       	cpc	r1, r20
    2c0e:	55 1f       	adc	r21, r21
    2c10:	f2 cf       	rjmp	.-28     	; 0x2bf6 <__fp_split3+0xe>
    2c12:	46 95       	lsr	r20
    2c14:	f1 df       	rcall	.-30     	; 0x2bf8 <__fp_splitA>
    2c16:	08 c0       	rjmp	.+16     	; 0x2c28 <__fp_splitA+0x30>
    2c18:	16 16       	cp	r1, r22
    2c1a:	17 06       	cpc	r1, r23
    2c1c:	18 06       	cpc	r1, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	f1 cf       	rjmp	.-30     	; 0x2c04 <__fp_splitA+0xc>
    2c22:	86 95       	lsr	r24
    2c24:	71 05       	cpc	r23, r1
    2c26:	61 05       	cpc	r22, r1
    2c28:	08 94       	sec
    2c2a:	08 95       	ret

00002c2c <__fp_zero>:
    2c2c:	e8 94       	clt

00002c2e <__fp_szero>:
    2c2e:	bb 27       	eor	r27, r27
    2c30:	66 27       	eor	r22, r22
    2c32:	77 27       	eor	r23, r23
    2c34:	cb 01       	movw	r24, r22
    2c36:	97 f9       	bld	r25, 7
    2c38:	08 95       	ret

00002c3a <__mulsf3>:
    2c3a:	0e 94 30 16 	call	0x2c60	; 0x2c60 <__mulsf3x>
    2c3e:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__fp_round>
    2c42:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__fp_pscA>
    2c46:	38 f0       	brcs	.+14     	; 0x2c56 <__mulsf3+0x1c>
    2c48:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <__fp_pscB>
    2c4c:	20 f0       	brcs	.+8      	; 0x2c56 <__mulsf3+0x1c>
    2c4e:	95 23       	and	r25, r21
    2c50:	11 f0       	breq	.+4      	; 0x2c56 <__mulsf3+0x1c>
    2c52:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__fp_inf>
    2c56:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__fp_nan>
    2c5a:	11 24       	eor	r1, r1
    2c5c:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__fp_szero>

00002c60 <__mulsf3x>:
    2c60:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <__fp_split3>
    2c64:	70 f3       	brcs	.-36     	; 0x2c42 <__mulsf3+0x8>

00002c66 <__mulsf3_pse>:
    2c66:	95 9f       	mul	r25, r21
    2c68:	c1 f3       	breq	.-16     	; 0x2c5a <__mulsf3+0x20>
    2c6a:	95 0f       	add	r25, r21
    2c6c:	50 e0       	ldi	r21, 0x00	; 0
    2c6e:	55 1f       	adc	r21, r21
    2c70:	62 9f       	mul	r22, r18
    2c72:	f0 01       	movw	r30, r0
    2c74:	72 9f       	mul	r23, r18
    2c76:	bb 27       	eor	r27, r27
    2c78:	f0 0d       	add	r31, r0
    2c7a:	b1 1d       	adc	r27, r1
    2c7c:	63 9f       	mul	r22, r19
    2c7e:	aa 27       	eor	r26, r26
    2c80:	f0 0d       	add	r31, r0
    2c82:	b1 1d       	adc	r27, r1
    2c84:	aa 1f       	adc	r26, r26
    2c86:	64 9f       	mul	r22, r20
    2c88:	66 27       	eor	r22, r22
    2c8a:	b0 0d       	add	r27, r0
    2c8c:	a1 1d       	adc	r26, r1
    2c8e:	66 1f       	adc	r22, r22
    2c90:	82 9f       	mul	r24, r18
    2c92:	22 27       	eor	r18, r18
    2c94:	b0 0d       	add	r27, r0
    2c96:	a1 1d       	adc	r26, r1
    2c98:	62 1f       	adc	r22, r18
    2c9a:	73 9f       	mul	r23, r19
    2c9c:	b0 0d       	add	r27, r0
    2c9e:	a1 1d       	adc	r26, r1
    2ca0:	62 1f       	adc	r22, r18
    2ca2:	83 9f       	mul	r24, r19
    2ca4:	a0 0d       	add	r26, r0
    2ca6:	61 1d       	adc	r22, r1
    2ca8:	22 1f       	adc	r18, r18
    2caa:	74 9f       	mul	r23, r20
    2cac:	33 27       	eor	r19, r19
    2cae:	a0 0d       	add	r26, r0
    2cb0:	61 1d       	adc	r22, r1
    2cb2:	23 1f       	adc	r18, r19
    2cb4:	84 9f       	mul	r24, r20
    2cb6:	60 0d       	add	r22, r0
    2cb8:	21 1d       	adc	r18, r1
    2cba:	82 2f       	mov	r24, r18
    2cbc:	76 2f       	mov	r23, r22
    2cbe:	6a 2f       	mov	r22, r26
    2cc0:	11 24       	eor	r1, r1
    2cc2:	9f 57       	subi	r25, 0x7F	; 127
    2cc4:	50 40       	sbci	r21, 0x00	; 0
    2cc6:	9a f0       	brmi	.+38     	; 0x2cee <__mulsf3_pse+0x88>
    2cc8:	f1 f0       	breq	.+60     	; 0x2d06 <__mulsf3_pse+0xa0>
    2cca:	88 23       	and	r24, r24
    2ccc:	4a f0       	brmi	.+18     	; 0x2ce0 <__mulsf3_pse+0x7a>
    2cce:	ee 0f       	add	r30, r30
    2cd0:	ff 1f       	adc	r31, r31
    2cd2:	bb 1f       	adc	r27, r27
    2cd4:	66 1f       	adc	r22, r22
    2cd6:	77 1f       	adc	r23, r23
    2cd8:	88 1f       	adc	r24, r24
    2cda:	91 50       	subi	r25, 0x01	; 1
    2cdc:	50 40       	sbci	r21, 0x00	; 0
    2cde:	a9 f7       	brne	.-22     	; 0x2cca <__mulsf3_pse+0x64>
    2ce0:	9e 3f       	cpi	r25, 0xFE	; 254
    2ce2:	51 05       	cpc	r21, r1
    2ce4:	80 f0       	brcs	.+32     	; 0x2d06 <__mulsf3_pse+0xa0>
    2ce6:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__fp_inf>
    2cea:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__fp_szero>
    2cee:	5f 3f       	cpi	r21, 0xFF	; 255
    2cf0:	e4 f3       	brlt	.-8      	; 0x2cea <__mulsf3_pse+0x84>
    2cf2:	98 3e       	cpi	r25, 0xE8	; 232
    2cf4:	d4 f3       	brlt	.-12     	; 0x2cea <__mulsf3_pse+0x84>
    2cf6:	86 95       	lsr	r24
    2cf8:	77 95       	ror	r23
    2cfa:	67 95       	ror	r22
    2cfc:	b7 95       	ror	r27
    2cfe:	f7 95       	ror	r31
    2d00:	e7 95       	ror	r30
    2d02:	9f 5f       	subi	r25, 0xFF	; 255
    2d04:	c1 f7       	brne	.-16     	; 0x2cf6 <__mulsf3_pse+0x90>
    2d06:	fe 2b       	or	r31, r30
    2d08:	88 0f       	add	r24, r24
    2d0a:	91 1d       	adc	r25, r1
    2d0c:	96 95       	lsr	r25
    2d0e:	87 95       	ror	r24
    2d10:	97 f9       	bld	r25, 7
    2d12:	08 95       	ret

00002d14 <__fp_inf>:
    2d14:	97 f9       	bld	r25, 7
    2d16:	9f 67       	ori	r25, 0x7F	; 127
    2d18:	80 e8       	ldi	r24, 0x80	; 128
    2d1a:	70 e0       	ldi	r23, 0x00	; 0
    2d1c:	60 e0       	ldi	r22, 0x00	; 0
    2d1e:	08 95       	ret

00002d20 <__fp_nan>:
    2d20:	9f ef       	ldi	r25, 0xFF	; 255
    2d22:	80 ec       	ldi	r24, 0xC0	; 192
    2d24:	08 95       	ret

00002d26 <__fp_pscA>:
    2d26:	00 24       	eor	r0, r0
    2d28:	0a 94       	dec	r0
    2d2a:	16 16       	cp	r1, r22
    2d2c:	17 06       	cpc	r1, r23
    2d2e:	18 06       	cpc	r1, r24
    2d30:	09 06       	cpc	r0, r25
    2d32:	08 95       	ret

00002d34 <__fp_pscB>:
    2d34:	00 24       	eor	r0, r0
    2d36:	0a 94       	dec	r0
    2d38:	12 16       	cp	r1, r18
    2d3a:	13 06       	cpc	r1, r19
    2d3c:	14 06       	cpc	r1, r20
    2d3e:	05 06       	cpc	r0, r21
    2d40:	08 95       	ret

00002d42 <__fp_round>:
    2d42:	09 2e       	mov	r0, r25
    2d44:	03 94       	inc	r0
    2d46:	00 0c       	add	r0, r0
    2d48:	11 f4       	brne	.+4      	; 0x2d4e <__fp_round+0xc>
    2d4a:	88 23       	and	r24, r24
    2d4c:	52 f0       	brmi	.+20     	; 0x2d62 <__fp_round+0x20>
    2d4e:	bb 0f       	add	r27, r27
    2d50:	40 f4       	brcc	.+16     	; 0x2d62 <__fp_round+0x20>
    2d52:	bf 2b       	or	r27, r31
    2d54:	11 f4       	brne	.+4      	; 0x2d5a <__fp_round+0x18>
    2d56:	60 ff       	sbrs	r22, 0
    2d58:	04 c0       	rjmp	.+8      	; 0x2d62 <__fp_round+0x20>
    2d5a:	6f 5f       	subi	r22, 0xFF	; 255
    2d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d5e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d60:	9f 4f       	sbci	r25, 0xFF	; 255
    2d62:	08 95       	ret

00002d64 <initVariant>:
    2d64:	08 95       	ret

00002d66 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2d66:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <init>

	initVariant();
    2d6a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2d6e:	0e 94 8c 0a 	call	0x1518	; 0x1518 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2d72:	c0 e0       	ldi	r28, 0x00	; 0
    2d74:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    2d76:	0e 94 8d 0a 	call	0x151a	; 0x151a <loop>
		if (serialEventRun) serialEventRun();
    2d7a:	20 97       	sbiw	r28, 0x00	; 0
    2d7c:	e1 f3       	breq	.-8      	; 0x2d76 <main+0x10>
    2d7e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2d82:	f9 cf       	rjmp	.-14     	; 0x2d76 <main+0x10>

00002d84 <_Znwj>:
    2d84:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <malloc>

00002d88 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2d88:	1f 92       	push	r1
    2d8a:	0f 92       	push	r0
    2d8c:	0f b6       	in	r0, 0x3f	; 63
    2d8e:	0f 92       	push	r0
    2d90:	11 24       	eor	r1, r1
    2d92:	2f 93       	push	r18
    2d94:	3f 93       	push	r19
    2d96:	8f 93       	push	r24
    2d98:	9f 93       	push	r25
    2d9a:	af 93       	push	r26
    2d9c:	bf 93       	push	r27
    2d9e:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <timer0_millis>
    2da2:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <timer0_millis+0x1>
    2da6:	a0 91 52 03 	lds	r26, 0x0352	; 0x800352 <timer0_millis+0x2>
    2daa:	b0 91 53 03 	lds	r27, 0x0353	; 0x800353 <timer0_millis+0x3>
    2dae:	30 91 4f 03 	lds	r19, 0x034F	; 0x80034f <timer0_fract>
    2db2:	23 e0       	ldi	r18, 0x03	; 3
    2db4:	23 0f       	add	r18, r19
    2db6:	2d 37       	cpi	r18, 0x7D	; 125
    2db8:	20 f4       	brcc	.+8      	; 0x2dc2 <__vector_16+0x3a>
    2dba:	01 96       	adiw	r24, 0x01	; 1
    2dbc:	a1 1d       	adc	r26, r1
    2dbe:	b1 1d       	adc	r27, r1
    2dc0:	05 c0       	rjmp	.+10     	; 0x2dcc <__vector_16+0x44>
    2dc2:	26 e8       	ldi	r18, 0x86	; 134
    2dc4:	23 0f       	add	r18, r19
    2dc6:	02 96       	adiw	r24, 0x02	; 2
    2dc8:	a1 1d       	adc	r26, r1
    2dca:	b1 1d       	adc	r27, r1
    2dcc:	20 93 4f 03 	sts	0x034F, r18	; 0x80034f <timer0_fract>
    2dd0:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <timer0_millis>
    2dd4:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <timer0_millis+0x1>
    2dd8:	a0 93 52 03 	sts	0x0352, r26	; 0x800352 <timer0_millis+0x2>
    2ddc:	b0 93 53 03 	sts	0x0353, r27	; 0x800353 <timer0_millis+0x3>
    2de0:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <timer0_overflow_count>
    2de4:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <timer0_overflow_count+0x1>
    2de8:	a0 91 56 03 	lds	r26, 0x0356	; 0x800356 <timer0_overflow_count+0x2>
    2dec:	b0 91 57 03 	lds	r27, 0x0357	; 0x800357 <timer0_overflow_count+0x3>
    2df0:	01 96       	adiw	r24, 0x01	; 1
    2df2:	a1 1d       	adc	r26, r1
    2df4:	b1 1d       	adc	r27, r1
    2df6:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <timer0_overflow_count>
    2dfa:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <timer0_overflow_count+0x1>
    2dfe:	a0 93 56 03 	sts	0x0356, r26	; 0x800356 <timer0_overflow_count+0x2>
    2e02:	b0 93 57 03 	sts	0x0357, r27	; 0x800357 <timer0_overflow_count+0x3>
    2e06:	bf 91       	pop	r27
    2e08:	af 91       	pop	r26
    2e0a:	9f 91       	pop	r25
    2e0c:	8f 91       	pop	r24
    2e0e:	3f 91       	pop	r19
    2e10:	2f 91       	pop	r18
    2e12:	0f 90       	pop	r0
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	0f 90       	pop	r0
    2e18:	1f 90       	pop	r1
    2e1a:	18 95       	reti

00002e1c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2e1c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2e1e:	84 b5       	in	r24, 0x24	; 36
    2e20:	82 60       	ori	r24, 0x02	; 2
    2e22:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2e24:	84 b5       	in	r24, 0x24	; 36
    2e26:	81 60       	ori	r24, 0x01	; 1
    2e28:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2e2a:	85 b5       	in	r24, 0x25	; 37
    2e2c:	82 60       	ori	r24, 0x02	; 2
    2e2e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2e30:	85 b5       	in	r24, 0x25	; 37
    2e32:	81 60       	ori	r24, 0x01	; 1
    2e34:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2e36:	ee e6       	ldi	r30, 0x6E	; 110
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	81 60       	ori	r24, 0x01	; 1
    2e3e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2e40:	e1 e8       	ldi	r30, 0x81	; 129
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2e46:	80 81       	ld	r24, Z
    2e48:	82 60       	ori	r24, 0x02	; 2
    2e4a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2e4c:	80 81       	ld	r24, Z
    2e4e:	81 60       	ori	r24, 0x01	; 1
    2e50:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2e52:	e0 e8       	ldi	r30, 0x80	; 128
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	81 60       	ori	r24, 0x01	; 1
    2e5a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2e5c:	e1 eb       	ldi	r30, 0xB1	; 177
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	84 60       	ori	r24, 0x04	; 4
    2e64:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2e66:	e0 eb       	ldi	r30, 0xB0	; 176
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	80 81       	ld	r24, Z
    2e6c:	81 60       	ori	r24, 0x01	; 1
    2e6e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2e70:	ea e7       	ldi	r30, 0x7A	; 122
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	84 60       	ori	r24, 0x04	; 4
    2e78:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2e7a:	80 81       	ld	r24, Z
    2e7c:	82 60       	ori	r24, 0x02	; 2
    2e7e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2e80:	80 81       	ld	r24, Z
    2e82:	81 60       	ori	r24, 0x01	; 1
    2e84:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2e86:	80 81       	ld	r24, Z
    2e88:	80 68       	ori	r24, 0x80	; 128
    2e8a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2e8c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2e90:	08 95       	ret

00002e92 <__mulsi3>:
    2e92:	db 01       	movw	r26, r22
    2e94:	8f 93       	push	r24
    2e96:	9f 93       	push	r25
    2e98:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__muluhisi3>
    2e9c:	bf 91       	pop	r27
    2e9e:	af 91       	pop	r26
    2ea0:	a2 9f       	mul	r26, r18
    2ea2:	80 0d       	add	r24, r0
    2ea4:	91 1d       	adc	r25, r1
    2ea6:	a3 9f       	mul	r26, r19
    2ea8:	90 0d       	add	r25, r0
    2eaa:	b2 9f       	mul	r27, r18
    2eac:	90 0d       	add	r25, r0
    2eae:	11 24       	eor	r1, r1
    2eb0:	08 95       	ret

00002eb2 <__udivmodhi4>:
    2eb2:	aa 1b       	sub	r26, r26
    2eb4:	bb 1b       	sub	r27, r27
    2eb6:	51 e1       	ldi	r21, 0x11	; 17
    2eb8:	07 c0       	rjmp	.+14     	; 0x2ec8 <__udivmodhi4_ep>

00002eba <__udivmodhi4_loop>:
    2eba:	aa 1f       	adc	r26, r26
    2ebc:	bb 1f       	adc	r27, r27
    2ebe:	a6 17       	cp	r26, r22
    2ec0:	b7 07       	cpc	r27, r23
    2ec2:	10 f0       	brcs	.+4      	; 0x2ec8 <__udivmodhi4_ep>
    2ec4:	a6 1b       	sub	r26, r22
    2ec6:	b7 0b       	sbc	r27, r23

00002ec8 <__udivmodhi4_ep>:
    2ec8:	88 1f       	adc	r24, r24
    2eca:	99 1f       	adc	r25, r25
    2ecc:	5a 95       	dec	r21
    2ece:	a9 f7       	brne	.-22     	; 0x2eba <__udivmodhi4_loop>
    2ed0:	80 95       	com	r24
    2ed2:	90 95       	com	r25
    2ed4:	bc 01       	movw	r22, r24
    2ed6:	cd 01       	movw	r24, r26
    2ed8:	08 95       	ret

00002eda <__udivmodsi4>:
    2eda:	a1 e2       	ldi	r26, 0x21	; 33
    2edc:	1a 2e       	mov	r1, r26
    2ede:	aa 1b       	sub	r26, r26
    2ee0:	bb 1b       	sub	r27, r27
    2ee2:	fd 01       	movw	r30, r26
    2ee4:	0d c0       	rjmp	.+26     	; 0x2f00 <__udivmodsi4_ep>

00002ee6 <__udivmodsi4_loop>:
    2ee6:	aa 1f       	adc	r26, r26
    2ee8:	bb 1f       	adc	r27, r27
    2eea:	ee 1f       	adc	r30, r30
    2eec:	ff 1f       	adc	r31, r31
    2eee:	a2 17       	cp	r26, r18
    2ef0:	b3 07       	cpc	r27, r19
    2ef2:	e4 07       	cpc	r30, r20
    2ef4:	f5 07       	cpc	r31, r21
    2ef6:	20 f0       	brcs	.+8      	; 0x2f00 <__udivmodsi4_ep>
    2ef8:	a2 1b       	sub	r26, r18
    2efa:	b3 0b       	sbc	r27, r19
    2efc:	e4 0b       	sbc	r30, r20
    2efe:	f5 0b       	sbc	r31, r21

00002f00 <__udivmodsi4_ep>:
    2f00:	66 1f       	adc	r22, r22
    2f02:	77 1f       	adc	r23, r23
    2f04:	88 1f       	adc	r24, r24
    2f06:	99 1f       	adc	r25, r25
    2f08:	1a 94       	dec	r1
    2f0a:	69 f7       	brne	.-38     	; 0x2ee6 <__udivmodsi4_loop>
    2f0c:	60 95       	com	r22
    2f0e:	70 95       	com	r23
    2f10:	80 95       	com	r24
    2f12:	90 95       	com	r25
    2f14:	9b 01       	movw	r18, r22
    2f16:	ac 01       	movw	r20, r24
    2f18:	bd 01       	movw	r22, r26
    2f1a:	cf 01       	movw	r24, r30
    2f1c:	08 95       	ret

00002f1e <__umulhisi3>:
    2f1e:	a2 9f       	mul	r26, r18
    2f20:	b0 01       	movw	r22, r0
    2f22:	b3 9f       	mul	r27, r19
    2f24:	c0 01       	movw	r24, r0
    2f26:	a3 9f       	mul	r26, r19
    2f28:	70 0d       	add	r23, r0
    2f2a:	81 1d       	adc	r24, r1
    2f2c:	11 24       	eor	r1, r1
    2f2e:	91 1d       	adc	r25, r1
    2f30:	b2 9f       	mul	r27, r18
    2f32:	70 0d       	add	r23, r0
    2f34:	81 1d       	adc	r24, r1
    2f36:	11 24       	eor	r1, r1
    2f38:	91 1d       	adc	r25, r1
    2f3a:	08 95       	ret

00002f3c <__muluhisi3>:
    2f3c:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__umulhisi3>
    2f40:	a5 9f       	mul	r26, r21
    2f42:	90 0d       	add	r25, r0
    2f44:	b4 9f       	mul	r27, r20
    2f46:	90 0d       	add	r25, r0
    2f48:	a4 9f       	mul	r26, r20
    2f4a:	80 0d       	add	r24, r0
    2f4c:	91 1d       	adc	r25, r1
    2f4e:	11 24       	eor	r1, r1
    2f50:	08 95       	ret

00002f52 <__mulshisi3>:
    2f52:	b7 ff       	sbrs	r27, 7
    2f54:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__muluhisi3>

00002f58 <__mulohisi3>:
    2f58:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__muluhisi3>
    2f5c:	82 1b       	sub	r24, r18
    2f5e:	93 0b       	sbc	r25, r19
    2f60:	08 95       	ret

00002f62 <malloc>:
    2f62:	0f 93       	push	r16
    2f64:	1f 93       	push	r17
    2f66:	cf 93       	push	r28
    2f68:	df 93       	push	r29
    2f6a:	82 30       	cpi	r24, 0x02	; 2
    2f6c:	91 05       	cpc	r25, r1
    2f6e:	10 f4       	brcc	.+4      	; 0x2f74 <malloc+0x12>
    2f70:	82 e0       	ldi	r24, 0x02	; 2
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <__flp>
    2f78:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <__flp+0x1>
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	a0 e0       	ldi	r26, 0x00	; 0
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	30 97       	sbiw	r30, 0x00	; 0
    2f86:	19 f1       	breq	.+70     	; 0x2fce <malloc+0x6c>
    2f88:	40 81       	ld	r20, Z
    2f8a:	51 81       	ldd	r21, Z+1	; 0x01
    2f8c:	02 81       	ldd	r16, Z+2	; 0x02
    2f8e:	13 81       	ldd	r17, Z+3	; 0x03
    2f90:	48 17       	cp	r20, r24
    2f92:	59 07       	cpc	r21, r25
    2f94:	c8 f0       	brcs	.+50     	; 0x2fc8 <malloc+0x66>
    2f96:	84 17       	cp	r24, r20
    2f98:	95 07       	cpc	r25, r21
    2f9a:	69 f4       	brne	.+26     	; 0x2fb6 <malloc+0x54>
    2f9c:	10 97       	sbiw	r26, 0x00	; 0
    2f9e:	31 f0       	breq	.+12     	; 0x2fac <malloc+0x4a>
    2fa0:	12 96       	adiw	r26, 0x02	; 2
    2fa2:	0c 93       	st	X, r16
    2fa4:	12 97       	sbiw	r26, 0x02	; 2
    2fa6:	13 96       	adiw	r26, 0x03	; 3
    2fa8:	1c 93       	st	X, r17
    2faa:	27 c0       	rjmp	.+78     	; 0x2ffa <malloc+0x98>
    2fac:	00 93 5a 03 	sts	0x035A, r16	; 0x80035a <__flp>
    2fb0:	10 93 5b 03 	sts	0x035B, r17	; 0x80035b <__flp+0x1>
    2fb4:	22 c0       	rjmp	.+68     	; 0x2ffa <malloc+0x98>
    2fb6:	21 15       	cp	r18, r1
    2fb8:	31 05       	cpc	r19, r1
    2fba:	19 f0       	breq	.+6      	; 0x2fc2 <malloc+0x60>
    2fbc:	42 17       	cp	r20, r18
    2fbe:	53 07       	cpc	r21, r19
    2fc0:	18 f4       	brcc	.+6      	; 0x2fc8 <malloc+0x66>
    2fc2:	9a 01       	movw	r18, r20
    2fc4:	bd 01       	movw	r22, r26
    2fc6:	ef 01       	movw	r28, r30
    2fc8:	df 01       	movw	r26, r30
    2fca:	f8 01       	movw	r30, r16
    2fcc:	db cf       	rjmp	.-74     	; 0x2f84 <malloc+0x22>
    2fce:	21 15       	cp	r18, r1
    2fd0:	31 05       	cpc	r19, r1
    2fd2:	f9 f0       	breq	.+62     	; 0x3012 <malloc+0xb0>
    2fd4:	28 1b       	sub	r18, r24
    2fd6:	39 0b       	sbc	r19, r25
    2fd8:	24 30       	cpi	r18, 0x04	; 4
    2fda:	31 05       	cpc	r19, r1
    2fdc:	80 f4       	brcc	.+32     	; 0x2ffe <malloc+0x9c>
    2fde:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe2:	61 15       	cp	r22, r1
    2fe4:	71 05       	cpc	r23, r1
    2fe6:	21 f0       	breq	.+8      	; 0x2ff0 <malloc+0x8e>
    2fe8:	fb 01       	movw	r30, r22
    2fea:	93 83       	std	Z+3, r25	; 0x03
    2fec:	82 83       	std	Z+2, r24	; 0x02
    2fee:	04 c0       	rjmp	.+8      	; 0x2ff8 <malloc+0x96>
    2ff0:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <__flp+0x1>
    2ff4:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <__flp>
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	32 96       	adiw	r30, 0x02	; 2
    2ffc:	44 c0       	rjmp	.+136    	; 0x3086 <malloc+0x124>
    2ffe:	fe 01       	movw	r30, r28
    3000:	e2 0f       	add	r30, r18
    3002:	f3 1f       	adc	r31, r19
    3004:	81 93       	st	Z+, r24
    3006:	91 93       	st	Z+, r25
    3008:	22 50       	subi	r18, 0x02	; 2
    300a:	31 09       	sbc	r19, r1
    300c:	39 83       	std	Y+1, r19	; 0x01
    300e:	28 83       	st	Y, r18
    3010:	3a c0       	rjmp	.+116    	; 0x3086 <malloc+0x124>
    3012:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <__brkval>
    3016:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <__brkval+0x1>
    301a:	23 2b       	or	r18, r19
    301c:	41 f4       	brne	.+16     	; 0x302e <malloc+0xcc>
    301e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3022:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3026:	30 93 59 03 	sts	0x0359, r19	; 0x800359 <__brkval+0x1>
    302a:	20 93 58 03 	sts	0x0358, r18	; 0x800358 <__brkval>
    302e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3032:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3036:	21 15       	cp	r18, r1
    3038:	31 05       	cpc	r19, r1
    303a:	41 f4       	brne	.+16     	; 0x304c <malloc+0xea>
    303c:	2d b7       	in	r18, 0x3d	; 61
    303e:	3e b7       	in	r19, 0x3e	; 62
    3040:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3044:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3048:	24 1b       	sub	r18, r20
    304a:	35 0b       	sbc	r19, r21
    304c:	e0 91 58 03 	lds	r30, 0x0358	; 0x800358 <__brkval>
    3050:	f0 91 59 03 	lds	r31, 0x0359	; 0x800359 <__brkval+0x1>
    3054:	e2 17       	cp	r30, r18
    3056:	f3 07       	cpc	r31, r19
    3058:	a0 f4       	brcc	.+40     	; 0x3082 <malloc+0x120>
    305a:	2e 1b       	sub	r18, r30
    305c:	3f 0b       	sbc	r19, r31
    305e:	28 17       	cp	r18, r24
    3060:	39 07       	cpc	r19, r25
    3062:	78 f0       	brcs	.+30     	; 0x3082 <malloc+0x120>
    3064:	ac 01       	movw	r20, r24
    3066:	4e 5f       	subi	r20, 0xFE	; 254
    3068:	5f 4f       	sbci	r21, 0xFF	; 255
    306a:	24 17       	cp	r18, r20
    306c:	35 07       	cpc	r19, r21
    306e:	48 f0       	brcs	.+18     	; 0x3082 <malloc+0x120>
    3070:	4e 0f       	add	r20, r30
    3072:	5f 1f       	adc	r21, r31
    3074:	50 93 59 03 	sts	0x0359, r21	; 0x800359 <__brkval+0x1>
    3078:	40 93 58 03 	sts	0x0358, r20	; 0x800358 <__brkval>
    307c:	81 93       	st	Z+, r24
    307e:	91 93       	st	Z+, r25
    3080:	02 c0       	rjmp	.+4      	; 0x3086 <malloc+0x124>
    3082:	e0 e0       	ldi	r30, 0x00	; 0
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	cf 01       	movw	r24, r30
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	1f 91       	pop	r17
    308e:	0f 91       	pop	r16
    3090:	08 95       	ret

00003092 <free>:
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	00 97       	sbiw	r24, 0x00	; 0
    3098:	09 f4       	brne	.+2      	; 0x309c <free+0xa>
    309a:	81 c0       	rjmp	.+258    	; 0x319e <free+0x10c>
    309c:	fc 01       	movw	r30, r24
    309e:	32 97       	sbiw	r30, 0x02	; 2
    30a0:	13 82       	std	Z+3, r1	; 0x03
    30a2:	12 82       	std	Z+2, r1	; 0x02
    30a4:	a0 91 5a 03 	lds	r26, 0x035A	; 0x80035a <__flp>
    30a8:	b0 91 5b 03 	lds	r27, 0x035B	; 0x80035b <__flp+0x1>
    30ac:	10 97       	sbiw	r26, 0x00	; 0
    30ae:	81 f4       	brne	.+32     	; 0x30d0 <free+0x3e>
    30b0:	20 81       	ld	r18, Z
    30b2:	31 81       	ldd	r19, Z+1	; 0x01
    30b4:	82 0f       	add	r24, r18
    30b6:	93 1f       	adc	r25, r19
    30b8:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <__brkval>
    30bc:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <__brkval+0x1>
    30c0:	28 17       	cp	r18, r24
    30c2:	39 07       	cpc	r19, r25
    30c4:	51 f5       	brne	.+84     	; 0x311a <free+0x88>
    30c6:	f0 93 59 03 	sts	0x0359, r31	; 0x800359 <__brkval+0x1>
    30ca:	e0 93 58 03 	sts	0x0358, r30	; 0x800358 <__brkval>
    30ce:	67 c0       	rjmp	.+206    	; 0x319e <free+0x10c>
    30d0:	ed 01       	movw	r28, r26
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	ce 17       	cp	r28, r30
    30d8:	df 07       	cpc	r29, r31
    30da:	40 f4       	brcc	.+16     	; 0x30ec <free+0x5a>
    30dc:	4a 81       	ldd	r20, Y+2	; 0x02
    30de:	5b 81       	ldd	r21, Y+3	; 0x03
    30e0:	9e 01       	movw	r18, r28
    30e2:	41 15       	cp	r20, r1
    30e4:	51 05       	cpc	r21, r1
    30e6:	f1 f0       	breq	.+60     	; 0x3124 <free+0x92>
    30e8:	ea 01       	movw	r28, r20
    30ea:	f5 cf       	rjmp	.-22     	; 0x30d6 <free+0x44>
    30ec:	d3 83       	std	Z+3, r29	; 0x03
    30ee:	c2 83       	std	Z+2, r28	; 0x02
    30f0:	40 81       	ld	r20, Z
    30f2:	51 81       	ldd	r21, Z+1	; 0x01
    30f4:	84 0f       	add	r24, r20
    30f6:	95 1f       	adc	r25, r21
    30f8:	c8 17       	cp	r28, r24
    30fa:	d9 07       	cpc	r29, r25
    30fc:	59 f4       	brne	.+22     	; 0x3114 <free+0x82>
    30fe:	88 81       	ld	r24, Y
    3100:	99 81       	ldd	r25, Y+1	; 0x01
    3102:	84 0f       	add	r24, r20
    3104:	95 1f       	adc	r25, r21
    3106:	02 96       	adiw	r24, 0x02	; 2
    3108:	91 83       	std	Z+1, r25	; 0x01
    310a:	80 83       	st	Z, r24
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	9b 81       	ldd	r25, Y+3	; 0x03
    3110:	93 83       	std	Z+3, r25	; 0x03
    3112:	82 83       	std	Z+2, r24	; 0x02
    3114:	21 15       	cp	r18, r1
    3116:	31 05       	cpc	r19, r1
    3118:	29 f4       	brne	.+10     	; 0x3124 <free+0x92>
    311a:	f0 93 5b 03 	sts	0x035B, r31	; 0x80035b <__flp+0x1>
    311e:	e0 93 5a 03 	sts	0x035A, r30	; 0x80035a <__flp>
    3122:	3d c0       	rjmp	.+122    	; 0x319e <free+0x10c>
    3124:	e9 01       	movw	r28, r18
    3126:	fb 83       	std	Y+3, r31	; 0x03
    3128:	ea 83       	std	Y+2, r30	; 0x02
    312a:	49 91       	ld	r20, Y+
    312c:	59 91       	ld	r21, Y+
    312e:	c4 0f       	add	r28, r20
    3130:	d5 1f       	adc	r29, r21
    3132:	ec 17       	cp	r30, r28
    3134:	fd 07       	cpc	r31, r29
    3136:	61 f4       	brne	.+24     	; 0x3150 <free+0xbe>
    3138:	80 81       	ld	r24, Z
    313a:	91 81       	ldd	r25, Z+1	; 0x01
    313c:	84 0f       	add	r24, r20
    313e:	95 1f       	adc	r25, r21
    3140:	02 96       	adiw	r24, 0x02	; 2
    3142:	e9 01       	movw	r28, r18
    3144:	99 83       	std	Y+1, r25	; 0x01
    3146:	88 83       	st	Y, r24
    3148:	82 81       	ldd	r24, Z+2	; 0x02
    314a:	93 81       	ldd	r25, Z+3	; 0x03
    314c:	9b 83       	std	Y+3, r25	; 0x03
    314e:	8a 83       	std	Y+2, r24	; 0x02
    3150:	e0 e0       	ldi	r30, 0x00	; 0
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	12 96       	adiw	r26, 0x02	; 2
    3156:	8d 91       	ld	r24, X+
    3158:	9c 91       	ld	r25, X
    315a:	13 97       	sbiw	r26, 0x03	; 3
    315c:	00 97       	sbiw	r24, 0x00	; 0
    315e:	19 f0       	breq	.+6      	; 0x3166 <free+0xd4>
    3160:	fd 01       	movw	r30, r26
    3162:	dc 01       	movw	r26, r24
    3164:	f7 cf       	rjmp	.-18     	; 0x3154 <free+0xc2>
    3166:	8d 91       	ld	r24, X+
    3168:	9c 91       	ld	r25, X
    316a:	11 97       	sbiw	r26, 0x01	; 1
    316c:	9d 01       	movw	r18, r26
    316e:	2e 5f       	subi	r18, 0xFE	; 254
    3170:	3f 4f       	sbci	r19, 0xFF	; 255
    3172:	82 0f       	add	r24, r18
    3174:	93 1f       	adc	r25, r19
    3176:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <__brkval>
    317a:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <__brkval+0x1>
    317e:	28 17       	cp	r18, r24
    3180:	39 07       	cpc	r19, r25
    3182:	69 f4       	brne	.+26     	; 0x319e <free+0x10c>
    3184:	30 97       	sbiw	r30, 0x00	; 0
    3186:	29 f4       	brne	.+10     	; 0x3192 <free+0x100>
    3188:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <__flp+0x1>
    318c:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <__flp>
    3190:	02 c0       	rjmp	.+4      	; 0x3196 <free+0x104>
    3192:	13 82       	std	Z+3, r1	; 0x03
    3194:	12 82       	std	Z+2, r1	; 0x02
    3196:	b0 93 59 03 	sts	0x0359, r27	; 0x800359 <__brkval+0x1>
    319a:	a0 93 58 03 	sts	0x0358, r26	; 0x800358 <__brkval>
    319e:	df 91       	pop	r29
    31a0:	cf 91       	pop	r28
    31a2:	08 95       	ret

000031a4 <fputs>:
    31a4:	ef 92       	push	r14
    31a6:	ff 92       	push	r15
    31a8:	0f 93       	push	r16
    31aa:	1f 93       	push	r17
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	db 01       	movw	r26, r22
    31b2:	13 96       	adiw	r26, 0x03	; 3
    31b4:	2c 91       	ld	r18, X
    31b6:	21 ff       	sbrs	r18, 1
    31b8:	18 c0       	rjmp	.+48     	; 0x31ea <fputs+0x46>
    31ba:	8b 01       	movw	r16, r22
    31bc:	7c 01       	movw	r14, r24
    31be:	d0 e0       	ldi	r29, 0x00	; 0
    31c0:	c0 e0       	ldi	r28, 0x00	; 0
    31c2:	f7 01       	movw	r30, r14
    31c4:	81 91       	ld	r24, Z+
    31c6:	7f 01       	movw	r14, r30
    31c8:	88 23       	and	r24, r24
    31ca:	61 f0       	breq	.+24     	; 0x31e4 <fputs+0x40>
    31cc:	d8 01       	movw	r26, r16
    31ce:	18 96       	adiw	r26, 0x08	; 8
    31d0:	ed 91       	ld	r30, X+
    31d2:	fc 91       	ld	r31, X
    31d4:	19 97       	sbiw	r26, 0x09	; 9
    31d6:	b8 01       	movw	r22, r16
    31d8:	09 95       	icall
    31da:	89 2b       	or	r24, r25
    31dc:	91 f3       	breq	.-28     	; 0x31c2 <fputs+0x1e>
    31de:	df ef       	ldi	r29, 0xFF	; 255
    31e0:	cf ef       	ldi	r28, 0xFF	; 255
    31e2:	ef cf       	rjmp	.-34     	; 0x31c2 <fputs+0x1e>
    31e4:	8d 2f       	mov	r24, r29
    31e6:	9c 2f       	mov	r25, r28
    31e8:	02 c0       	rjmp	.+4      	; 0x31ee <fputs+0x4a>
    31ea:	8f ef       	ldi	r24, 0xFF	; 255
    31ec:	9f ef       	ldi	r25, 0xFF	; 255
    31ee:	cd b7       	in	r28, 0x3d	; 61
    31f0:	de b7       	in	r29, 0x3e	; 62
    31f2:	e6 e0       	ldi	r30, 0x06	; 6
    31f4:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__epilogue_restores__+0x18>

000031f8 <puts>:
    31f8:	0f 93       	push	r16
    31fa:	1f 93       	push	r17
    31fc:	cf 93       	push	r28
    31fe:	df 93       	push	r29
    3200:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <__iob+0x2>
    3204:	f0 91 5f 03 	lds	r31, 0x035F	; 0x80035f <__iob+0x3>
    3208:	23 81       	ldd	r18, Z+3	; 0x03
    320a:	21 ff       	sbrs	r18, 1
    320c:	1b c0       	rjmp	.+54     	; 0x3244 <puts+0x4c>
    320e:	8c 01       	movw	r16, r24
    3210:	d0 e0       	ldi	r29, 0x00	; 0
    3212:	c0 e0       	ldi	r28, 0x00	; 0
    3214:	f8 01       	movw	r30, r16
    3216:	81 91       	ld	r24, Z+
    3218:	8f 01       	movw	r16, r30
    321a:	60 91 5e 03 	lds	r22, 0x035E	; 0x80035e <__iob+0x2>
    321e:	70 91 5f 03 	lds	r23, 0x035F	; 0x80035f <__iob+0x3>
    3222:	db 01       	movw	r26, r22
    3224:	18 96       	adiw	r26, 0x08	; 8
    3226:	ed 91       	ld	r30, X+
    3228:	fc 91       	ld	r31, X
    322a:	19 97       	sbiw	r26, 0x09	; 9
    322c:	88 23       	and	r24, r24
    322e:	31 f0       	breq	.+12     	; 0x323c <puts+0x44>
    3230:	09 95       	icall
    3232:	89 2b       	or	r24, r25
    3234:	79 f3       	breq	.-34     	; 0x3214 <puts+0x1c>
    3236:	df ef       	ldi	r29, 0xFF	; 255
    3238:	cf ef       	ldi	r28, 0xFF	; 255
    323a:	ec cf       	rjmp	.-40     	; 0x3214 <puts+0x1c>
    323c:	8a e0       	ldi	r24, 0x0A	; 10
    323e:	09 95       	icall
    3240:	89 2b       	or	r24, r25
    3242:	19 f0       	breq	.+6      	; 0x324a <puts+0x52>
    3244:	8f ef       	ldi	r24, 0xFF	; 255
    3246:	9f ef       	ldi	r25, 0xFF	; 255
    3248:	02 c0       	rjmp	.+4      	; 0x324e <puts+0x56>
    324a:	8d 2f       	mov	r24, r29
    324c:	9c 2f       	mov	r25, r28
    324e:	df 91       	pop	r29
    3250:	cf 91       	pop	r28
    3252:	1f 91       	pop	r17
    3254:	0f 91       	pop	r16
    3256:	08 95       	ret

00003258 <sprintf>:
    3258:	ae e0       	ldi	r26, 0x0E	; 14
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	e2 e3       	ldi	r30, 0x32	; 50
    325e:	f9 e1       	ldi	r31, 0x19	; 25
    3260:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__prologue_saves__+0x1c>
    3264:	0d 89       	ldd	r16, Y+21	; 0x15
    3266:	1e 89       	ldd	r17, Y+22	; 0x16
    3268:	86 e0       	ldi	r24, 0x06	; 6
    326a:	8c 83       	std	Y+4, r24	; 0x04
    326c:	1a 83       	std	Y+2, r17	; 0x02
    326e:	09 83       	std	Y+1, r16	; 0x01
    3270:	8f ef       	ldi	r24, 0xFF	; 255
    3272:	9f e7       	ldi	r25, 0x7F	; 127
    3274:	9e 83       	std	Y+6, r25	; 0x06
    3276:	8d 83       	std	Y+5, r24	; 0x05
    3278:	ae 01       	movw	r20, r28
    327a:	47 5e       	subi	r20, 0xE7	; 231
    327c:	5f 4f       	sbci	r21, 0xFF	; 255
    327e:	6f 89       	ldd	r22, Y+23	; 0x17
    3280:	78 8d       	ldd	r23, Y+24	; 0x18
    3282:	ce 01       	movw	r24, r28
    3284:	01 96       	adiw	r24, 0x01	; 1
    3286:	0e 94 4e 19 	call	0x329c	; 0x329c <vfprintf>
    328a:	ef 81       	ldd	r30, Y+7	; 0x07
    328c:	f8 85       	ldd	r31, Y+8	; 0x08
    328e:	e0 0f       	add	r30, r16
    3290:	f1 1f       	adc	r31, r17
    3292:	10 82       	st	Z, r1
    3294:	2e 96       	adiw	r28, 0x0e	; 14
    3296:	e4 e0       	ldi	r30, 0x04	; 4
    3298:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__epilogue_restores__+0x1c>

0000329c <vfprintf>:
    329c:	ab e0       	ldi	r26, 0x0B	; 11
    329e:	b0 e0       	ldi	r27, 0x00	; 0
    32a0:	e4 e5       	ldi	r30, 0x54	; 84
    32a2:	f9 e1       	ldi	r31, 0x19	; 25
    32a4:	0c 94 df 1b 	jmp	0x37be	; 0x37be <__prologue_saves__>
    32a8:	6c 01       	movw	r12, r24
    32aa:	7b 01       	movw	r14, r22
    32ac:	8a 01       	movw	r16, r20
    32ae:	fc 01       	movw	r30, r24
    32b0:	17 82       	std	Z+7, r1	; 0x07
    32b2:	16 82       	std	Z+6, r1	; 0x06
    32b4:	83 81       	ldd	r24, Z+3	; 0x03
    32b6:	81 ff       	sbrs	r24, 1
    32b8:	cc c1       	rjmp	.+920    	; 0x3652 <vfprintf+0x3b6>
    32ba:	ce 01       	movw	r24, r28
    32bc:	01 96       	adiw	r24, 0x01	; 1
    32be:	3c 01       	movw	r6, r24
    32c0:	f6 01       	movw	r30, r12
    32c2:	93 81       	ldd	r25, Z+3	; 0x03
    32c4:	f7 01       	movw	r30, r14
    32c6:	93 fd       	sbrc	r25, 3
    32c8:	85 91       	lpm	r24, Z+
    32ca:	93 ff       	sbrs	r25, 3
    32cc:	81 91       	ld	r24, Z+
    32ce:	7f 01       	movw	r14, r30
    32d0:	88 23       	and	r24, r24
    32d2:	09 f4       	brne	.+2      	; 0x32d6 <vfprintf+0x3a>
    32d4:	ba c1       	rjmp	.+884    	; 0x364a <vfprintf+0x3ae>
    32d6:	85 32       	cpi	r24, 0x25	; 37
    32d8:	39 f4       	brne	.+14     	; 0x32e8 <vfprintf+0x4c>
    32da:	93 fd       	sbrc	r25, 3
    32dc:	85 91       	lpm	r24, Z+
    32de:	93 ff       	sbrs	r25, 3
    32e0:	81 91       	ld	r24, Z+
    32e2:	7f 01       	movw	r14, r30
    32e4:	85 32       	cpi	r24, 0x25	; 37
    32e6:	29 f4       	brne	.+10     	; 0x32f2 <vfprintf+0x56>
    32e8:	b6 01       	movw	r22, r12
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	0e 94 45 1b 	call	0x368a	; 0x368a <fputc>
    32f0:	e7 cf       	rjmp	.-50     	; 0x32c0 <vfprintf+0x24>
    32f2:	91 2c       	mov	r9, r1
    32f4:	21 2c       	mov	r2, r1
    32f6:	31 2c       	mov	r3, r1
    32f8:	ff e1       	ldi	r31, 0x1F	; 31
    32fa:	f3 15       	cp	r31, r3
    32fc:	d8 f0       	brcs	.+54     	; 0x3334 <vfprintf+0x98>
    32fe:	8b 32       	cpi	r24, 0x2B	; 43
    3300:	79 f0       	breq	.+30     	; 0x3320 <vfprintf+0x84>
    3302:	38 f4       	brcc	.+14     	; 0x3312 <vfprintf+0x76>
    3304:	80 32       	cpi	r24, 0x20	; 32
    3306:	79 f0       	breq	.+30     	; 0x3326 <vfprintf+0x8a>
    3308:	83 32       	cpi	r24, 0x23	; 35
    330a:	a1 f4       	brne	.+40     	; 0x3334 <vfprintf+0x98>
    330c:	23 2d       	mov	r18, r3
    330e:	20 61       	ori	r18, 0x10	; 16
    3310:	1d c0       	rjmp	.+58     	; 0x334c <vfprintf+0xb0>
    3312:	8d 32       	cpi	r24, 0x2D	; 45
    3314:	61 f0       	breq	.+24     	; 0x332e <vfprintf+0x92>
    3316:	80 33       	cpi	r24, 0x30	; 48
    3318:	69 f4       	brne	.+26     	; 0x3334 <vfprintf+0x98>
    331a:	23 2d       	mov	r18, r3
    331c:	21 60       	ori	r18, 0x01	; 1
    331e:	16 c0       	rjmp	.+44     	; 0x334c <vfprintf+0xb0>
    3320:	83 2d       	mov	r24, r3
    3322:	82 60       	ori	r24, 0x02	; 2
    3324:	38 2e       	mov	r3, r24
    3326:	e3 2d       	mov	r30, r3
    3328:	e4 60       	ori	r30, 0x04	; 4
    332a:	3e 2e       	mov	r3, r30
    332c:	2a c0       	rjmp	.+84     	; 0x3382 <vfprintf+0xe6>
    332e:	f3 2d       	mov	r31, r3
    3330:	f8 60       	ori	r31, 0x08	; 8
    3332:	1d c0       	rjmp	.+58     	; 0x336e <vfprintf+0xd2>
    3334:	37 fc       	sbrc	r3, 7
    3336:	2d c0       	rjmp	.+90     	; 0x3392 <vfprintf+0xf6>
    3338:	20 ed       	ldi	r18, 0xD0	; 208
    333a:	28 0f       	add	r18, r24
    333c:	2a 30       	cpi	r18, 0x0A	; 10
    333e:	40 f0       	brcs	.+16     	; 0x3350 <vfprintf+0xb4>
    3340:	8e 32       	cpi	r24, 0x2E	; 46
    3342:	b9 f4       	brne	.+46     	; 0x3372 <vfprintf+0xd6>
    3344:	36 fc       	sbrc	r3, 6
    3346:	81 c1       	rjmp	.+770    	; 0x364a <vfprintf+0x3ae>
    3348:	23 2d       	mov	r18, r3
    334a:	20 64       	ori	r18, 0x40	; 64
    334c:	32 2e       	mov	r3, r18
    334e:	19 c0       	rjmp	.+50     	; 0x3382 <vfprintf+0xe6>
    3350:	36 fe       	sbrs	r3, 6
    3352:	06 c0       	rjmp	.+12     	; 0x3360 <vfprintf+0xc4>
    3354:	8a e0       	ldi	r24, 0x0A	; 10
    3356:	98 9e       	mul	r9, r24
    3358:	20 0d       	add	r18, r0
    335a:	11 24       	eor	r1, r1
    335c:	92 2e       	mov	r9, r18
    335e:	11 c0       	rjmp	.+34     	; 0x3382 <vfprintf+0xe6>
    3360:	ea e0       	ldi	r30, 0x0A	; 10
    3362:	2e 9e       	mul	r2, r30
    3364:	20 0d       	add	r18, r0
    3366:	11 24       	eor	r1, r1
    3368:	22 2e       	mov	r2, r18
    336a:	f3 2d       	mov	r31, r3
    336c:	f0 62       	ori	r31, 0x20	; 32
    336e:	3f 2e       	mov	r3, r31
    3370:	08 c0       	rjmp	.+16     	; 0x3382 <vfprintf+0xe6>
    3372:	8c 36       	cpi	r24, 0x6C	; 108
    3374:	21 f4       	brne	.+8      	; 0x337e <vfprintf+0xe2>
    3376:	83 2d       	mov	r24, r3
    3378:	80 68       	ori	r24, 0x80	; 128
    337a:	38 2e       	mov	r3, r24
    337c:	02 c0       	rjmp	.+4      	; 0x3382 <vfprintf+0xe6>
    337e:	88 36       	cpi	r24, 0x68	; 104
    3380:	41 f4       	brne	.+16     	; 0x3392 <vfprintf+0xf6>
    3382:	f7 01       	movw	r30, r14
    3384:	93 fd       	sbrc	r25, 3
    3386:	85 91       	lpm	r24, Z+
    3388:	93 ff       	sbrs	r25, 3
    338a:	81 91       	ld	r24, Z+
    338c:	7f 01       	movw	r14, r30
    338e:	81 11       	cpse	r24, r1
    3390:	b3 cf       	rjmp	.-154    	; 0x32f8 <vfprintf+0x5c>
    3392:	98 2f       	mov	r25, r24
    3394:	9f 7d       	andi	r25, 0xDF	; 223
    3396:	95 54       	subi	r25, 0x45	; 69
    3398:	93 30       	cpi	r25, 0x03	; 3
    339a:	28 f4       	brcc	.+10     	; 0x33a6 <vfprintf+0x10a>
    339c:	0c 5f       	subi	r16, 0xFC	; 252
    339e:	1f 4f       	sbci	r17, 0xFF	; 255
    33a0:	9f e3       	ldi	r25, 0x3F	; 63
    33a2:	99 83       	std	Y+1, r25	; 0x01
    33a4:	0d c0       	rjmp	.+26     	; 0x33c0 <vfprintf+0x124>
    33a6:	83 36       	cpi	r24, 0x63	; 99
    33a8:	31 f0       	breq	.+12     	; 0x33b6 <vfprintf+0x11a>
    33aa:	83 37       	cpi	r24, 0x73	; 115
    33ac:	71 f0       	breq	.+28     	; 0x33ca <vfprintf+0x12e>
    33ae:	83 35       	cpi	r24, 0x53	; 83
    33b0:	09 f0       	breq	.+2      	; 0x33b4 <vfprintf+0x118>
    33b2:	59 c0       	rjmp	.+178    	; 0x3466 <vfprintf+0x1ca>
    33b4:	21 c0       	rjmp	.+66     	; 0x33f8 <vfprintf+0x15c>
    33b6:	f8 01       	movw	r30, r16
    33b8:	80 81       	ld	r24, Z
    33ba:	89 83       	std	Y+1, r24	; 0x01
    33bc:	0e 5f       	subi	r16, 0xFE	; 254
    33be:	1f 4f       	sbci	r17, 0xFF	; 255
    33c0:	88 24       	eor	r8, r8
    33c2:	83 94       	inc	r8
    33c4:	91 2c       	mov	r9, r1
    33c6:	53 01       	movw	r10, r6
    33c8:	13 c0       	rjmp	.+38     	; 0x33f0 <vfprintf+0x154>
    33ca:	28 01       	movw	r4, r16
    33cc:	f2 e0       	ldi	r31, 0x02	; 2
    33ce:	4f 0e       	add	r4, r31
    33d0:	51 1c       	adc	r5, r1
    33d2:	f8 01       	movw	r30, r16
    33d4:	a0 80       	ld	r10, Z
    33d6:	b1 80       	ldd	r11, Z+1	; 0x01
    33d8:	36 fe       	sbrs	r3, 6
    33da:	03 c0       	rjmp	.+6      	; 0x33e2 <vfprintf+0x146>
    33dc:	69 2d       	mov	r22, r9
    33de:	70 e0       	ldi	r23, 0x00	; 0
    33e0:	02 c0       	rjmp	.+4      	; 0x33e6 <vfprintf+0x14a>
    33e2:	6f ef       	ldi	r22, 0xFF	; 255
    33e4:	7f ef       	ldi	r23, 0xFF	; 255
    33e6:	c5 01       	movw	r24, r10
    33e8:	0e 94 3a 1b 	call	0x3674	; 0x3674 <strnlen>
    33ec:	4c 01       	movw	r8, r24
    33ee:	82 01       	movw	r16, r4
    33f0:	f3 2d       	mov	r31, r3
    33f2:	ff 77       	andi	r31, 0x7F	; 127
    33f4:	3f 2e       	mov	r3, r31
    33f6:	16 c0       	rjmp	.+44     	; 0x3424 <vfprintf+0x188>
    33f8:	28 01       	movw	r4, r16
    33fa:	22 e0       	ldi	r18, 0x02	; 2
    33fc:	42 0e       	add	r4, r18
    33fe:	51 1c       	adc	r5, r1
    3400:	f8 01       	movw	r30, r16
    3402:	a0 80       	ld	r10, Z
    3404:	b1 80       	ldd	r11, Z+1	; 0x01
    3406:	36 fe       	sbrs	r3, 6
    3408:	03 c0       	rjmp	.+6      	; 0x3410 <vfprintf+0x174>
    340a:	69 2d       	mov	r22, r9
    340c:	70 e0       	ldi	r23, 0x00	; 0
    340e:	02 c0       	rjmp	.+4      	; 0x3414 <vfprintf+0x178>
    3410:	6f ef       	ldi	r22, 0xFF	; 255
    3412:	7f ef       	ldi	r23, 0xFF	; 255
    3414:	c5 01       	movw	r24, r10
    3416:	0e 94 2f 1b 	call	0x365e	; 0x365e <strnlen_P>
    341a:	4c 01       	movw	r8, r24
    341c:	f3 2d       	mov	r31, r3
    341e:	f0 68       	ori	r31, 0x80	; 128
    3420:	3f 2e       	mov	r3, r31
    3422:	82 01       	movw	r16, r4
    3424:	33 fc       	sbrc	r3, 3
    3426:	1b c0       	rjmp	.+54     	; 0x345e <vfprintf+0x1c2>
    3428:	82 2d       	mov	r24, r2
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	88 16       	cp	r8, r24
    342e:	99 06       	cpc	r9, r25
    3430:	b0 f4       	brcc	.+44     	; 0x345e <vfprintf+0x1c2>
    3432:	b6 01       	movw	r22, r12
    3434:	80 e2       	ldi	r24, 0x20	; 32
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	0e 94 45 1b 	call	0x368a	; 0x368a <fputc>
    343c:	2a 94       	dec	r2
    343e:	f4 cf       	rjmp	.-24     	; 0x3428 <vfprintf+0x18c>
    3440:	f5 01       	movw	r30, r10
    3442:	37 fc       	sbrc	r3, 7
    3444:	85 91       	lpm	r24, Z+
    3446:	37 fe       	sbrs	r3, 7
    3448:	81 91       	ld	r24, Z+
    344a:	5f 01       	movw	r10, r30
    344c:	b6 01       	movw	r22, r12
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	0e 94 45 1b 	call	0x368a	; 0x368a <fputc>
    3454:	21 10       	cpse	r2, r1
    3456:	2a 94       	dec	r2
    3458:	21 e0       	ldi	r18, 0x01	; 1
    345a:	82 1a       	sub	r8, r18
    345c:	91 08       	sbc	r9, r1
    345e:	81 14       	cp	r8, r1
    3460:	91 04       	cpc	r9, r1
    3462:	71 f7       	brne	.-36     	; 0x3440 <vfprintf+0x1a4>
    3464:	e8 c0       	rjmp	.+464    	; 0x3636 <vfprintf+0x39a>
    3466:	84 36       	cpi	r24, 0x64	; 100
    3468:	11 f0       	breq	.+4      	; 0x346e <vfprintf+0x1d2>
    346a:	89 36       	cpi	r24, 0x69	; 105
    346c:	41 f5       	brne	.+80     	; 0x34be <vfprintf+0x222>
    346e:	f8 01       	movw	r30, r16
    3470:	37 fe       	sbrs	r3, 7
    3472:	07 c0       	rjmp	.+14     	; 0x3482 <vfprintf+0x1e6>
    3474:	60 81       	ld	r22, Z
    3476:	71 81       	ldd	r23, Z+1	; 0x01
    3478:	82 81       	ldd	r24, Z+2	; 0x02
    347a:	93 81       	ldd	r25, Z+3	; 0x03
    347c:	0c 5f       	subi	r16, 0xFC	; 252
    347e:	1f 4f       	sbci	r17, 0xFF	; 255
    3480:	08 c0       	rjmp	.+16     	; 0x3492 <vfprintf+0x1f6>
    3482:	60 81       	ld	r22, Z
    3484:	71 81       	ldd	r23, Z+1	; 0x01
    3486:	07 2e       	mov	r0, r23
    3488:	00 0c       	add	r0, r0
    348a:	88 0b       	sbc	r24, r24
    348c:	99 0b       	sbc	r25, r25
    348e:	0e 5f       	subi	r16, 0xFE	; 254
    3490:	1f 4f       	sbci	r17, 0xFF	; 255
    3492:	f3 2d       	mov	r31, r3
    3494:	ff 76       	andi	r31, 0x6F	; 111
    3496:	3f 2e       	mov	r3, r31
    3498:	97 ff       	sbrs	r25, 7
    349a:	09 c0       	rjmp	.+18     	; 0x34ae <vfprintf+0x212>
    349c:	90 95       	com	r25
    349e:	80 95       	com	r24
    34a0:	70 95       	com	r23
    34a2:	61 95       	neg	r22
    34a4:	7f 4f       	sbci	r23, 0xFF	; 255
    34a6:	8f 4f       	sbci	r24, 0xFF	; 255
    34a8:	9f 4f       	sbci	r25, 0xFF	; 255
    34aa:	f0 68       	ori	r31, 0x80	; 128
    34ac:	3f 2e       	mov	r3, r31
    34ae:	2a e0       	ldi	r18, 0x0A	; 10
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	a3 01       	movw	r20, r6
    34b4:	0e 94 81 1b 	call	0x3702	; 0x3702 <__ultoa_invert>
    34b8:	88 2e       	mov	r8, r24
    34ba:	86 18       	sub	r8, r6
    34bc:	45 c0       	rjmp	.+138    	; 0x3548 <vfprintf+0x2ac>
    34be:	85 37       	cpi	r24, 0x75	; 117
    34c0:	31 f4       	brne	.+12     	; 0x34ce <vfprintf+0x232>
    34c2:	23 2d       	mov	r18, r3
    34c4:	2f 7e       	andi	r18, 0xEF	; 239
    34c6:	b2 2e       	mov	r11, r18
    34c8:	2a e0       	ldi	r18, 0x0A	; 10
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	25 c0       	rjmp	.+74     	; 0x3518 <vfprintf+0x27c>
    34ce:	93 2d       	mov	r25, r3
    34d0:	99 7f       	andi	r25, 0xF9	; 249
    34d2:	b9 2e       	mov	r11, r25
    34d4:	8f 36       	cpi	r24, 0x6F	; 111
    34d6:	c1 f0       	breq	.+48     	; 0x3508 <vfprintf+0x26c>
    34d8:	18 f4       	brcc	.+6      	; 0x34e0 <vfprintf+0x244>
    34da:	88 35       	cpi	r24, 0x58	; 88
    34dc:	79 f0       	breq	.+30     	; 0x34fc <vfprintf+0x260>
    34de:	b5 c0       	rjmp	.+362    	; 0x364a <vfprintf+0x3ae>
    34e0:	80 37       	cpi	r24, 0x70	; 112
    34e2:	19 f0       	breq	.+6      	; 0x34ea <vfprintf+0x24e>
    34e4:	88 37       	cpi	r24, 0x78	; 120
    34e6:	21 f0       	breq	.+8      	; 0x34f0 <vfprintf+0x254>
    34e8:	b0 c0       	rjmp	.+352    	; 0x364a <vfprintf+0x3ae>
    34ea:	e9 2f       	mov	r30, r25
    34ec:	e0 61       	ori	r30, 0x10	; 16
    34ee:	be 2e       	mov	r11, r30
    34f0:	b4 fe       	sbrs	r11, 4
    34f2:	0d c0       	rjmp	.+26     	; 0x350e <vfprintf+0x272>
    34f4:	fb 2d       	mov	r31, r11
    34f6:	f4 60       	ori	r31, 0x04	; 4
    34f8:	bf 2e       	mov	r11, r31
    34fa:	09 c0       	rjmp	.+18     	; 0x350e <vfprintf+0x272>
    34fc:	34 fe       	sbrs	r3, 4
    34fe:	0a c0       	rjmp	.+20     	; 0x3514 <vfprintf+0x278>
    3500:	29 2f       	mov	r18, r25
    3502:	26 60       	ori	r18, 0x06	; 6
    3504:	b2 2e       	mov	r11, r18
    3506:	06 c0       	rjmp	.+12     	; 0x3514 <vfprintf+0x278>
    3508:	28 e0       	ldi	r18, 0x08	; 8
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	05 c0       	rjmp	.+10     	; 0x3518 <vfprintf+0x27c>
    350e:	20 e1       	ldi	r18, 0x10	; 16
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	02 c0       	rjmp	.+4      	; 0x3518 <vfprintf+0x27c>
    3514:	20 e1       	ldi	r18, 0x10	; 16
    3516:	32 e0       	ldi	r19, 0x02	; 2
    3518:	f8 01       	movw	r30, r16
    351a:	b7 fe       	sbrs	r11, 7
    351c:	07 c0       	rjmp	.+14     	; 0x352c <vfprintf+0x290>
    351e:	60 81       	ld	r22, Z
    3520:	71 81       	ldd	r23, Z+1	; 0x01
    3522:	82 81       	ldd	r24, Z+2	; 0x02
    3524:	93 81       	ldd	r25, Z+3	; 0x03
    3526:	0c 5f       	subi	r16, 0xFC	; 252
    3528:	1f 4f       	sbci	r17, 0xFF	; 255
    352a:	06 c0       	rjmp	.+12     	; 0x3538 <vfprintf+0x29c>
    352c:	60 81       	ld	r22, Z
    352e:	71 81       	ldd	r23, Z+1	; 0x01
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	0e 5f       	subi	r16, 0xFE	; 254
    3536:	1f 4f       	sbci	r17, 0xFF	; 255
    3538:	a3 01       	movw	r20, r6
    353a:	0e 94 81 1b 	call	0x3702	; 0x3702 <__ultoa_invert>
    353e:	88 2e       	mov	r8, r24
    3540:	86 18       	sub	r8, r6
    3542:	fb 2d       	mov	r31, r11
    3544:	ff 77       	andi	r31, 0x7F	; 127
    3546:	3f 2e       	mov	r3, r31
    3548:	36 fe       	sbrs	r3, 6
    354a:	0d c0       	rjmp	.+26     	; 0x3566 <vfprintf+0x2ca>
    354c:	23 2d       	mov	r18, r3
    354e:	2e 7f       	andi	r18, 0xFE	; 254
    3550:	a2 2e       	mov	r10, r18
    3552:	89 14       	cp	r8, r9
    3554:	58 f4       	brcc	.+22     	; 0x356c <vfprintf+0x2d0>
    3556:	34 fe       	sbrs	r3, 4
    3558:	0b c0       	rjmp	.+22     	; 0x3570 <vfprintf+0x2d4>
    355a:	32 fc       	sbrc	r3, 2
    355c:	09 c0       	rjmp	.+18     	; 0x3570 <vfprintf+0x2d4>
    355e:	83 2d       	mov	r24, r3
    3560:	8e 7e       	andi	r24, 0xEE	; 238
    3562:	a8 2e       	mov	r10, r24
    3564:	05 c0       	rjmp	.+10     	; 0x3570 <vfprintf+0x2d4>
    3566:	b8 2c       	mov	r11, r8
    3568:	a3 2c       	mov	r10, r3
    356a:	03 c0       	rjmp	.+6      	; 0x3572 <vfprintf+0x2d6>
    356c:	b8 2c       	mov	r11, r8
    356e:	01 c0       	rjmp	.+2      	; 0x3572 <vfprintf+0x2d6>
    3570:	b9 2c       	mov	r11, r9
    3572:	a4 fe       	sbrs	r10, 4
    3574:	0f c0       	rjmp	.+30     	; 0x3594 <vfprintf+0x2f8>
    3576:	fe 01       	movw	r30, r28
    3578:	e8 0d       	add	r30, r8
    357a:	f1 1d       	adc	r31, r1
    357c:	80 81       	ld	r24, Z
    357e:	80 33       	cpi	r24, 0x30	; 48
    3580:	21 f4       	brne	.+8      	; 0x358a <vfprintf+0x2ee>
    3582:	9a 2d       	mov	r25, r10
    3584:	99 7e       	andi	r25, 0xE9	; 233
    3586:	a9 2e       	mov	r10, r25
    3588:	09 c0       	rjmp	.+18     	; 0x359c <vfprintf+0x300>
    358a:	a2 fe       	sbrs	r10, 2
    358c:	06 c0       	rjmp	.+12     	; 0x359a <vfprintf+0x2fe>
    358e:	b3 94       	inc	r11
    3590:	b3 94       	inc	r11
    3592:	04 c0       	rjmp	.+8      	; 0x359c <vfprintf+0x300>
    3594:	8a 2d       	mov	r24, r10
    3596:	86 78       	andi	r24, 0x86	; 134
    3598:	09 f0       	breq	.+2      	; 0x359c <vfprintf+0x300>
    359a:	b3 94       	inc	r11
    359c:	a3 fc       	sbrc	r10, 3
    359e:	11 c0       	rjmp	.+34     	; 0x35c2 <vfprintf+0x326>
    35a0:	a0 fe       	sbrs	r10, 0
    35a2:	06 c0       	rjmp	.+12     	; 0x35b0 <vfprintf+0x314>
    35a4:	b2 14       	cp	r11, r2
    35a6:	88 f4       	brcc	.+34     	; 0x35ca <vfprintf+0x32e>
    35a8:	28 0c       	add	r2, r8
    35aa:	92 2c       	mov	r9, r2
    35ac:	9b 18       	sub	r9, r11
    35ae:	0e c0       	rjmp	.+28     	; 0x35cc <vfprintf+0x330>
    35b0:	b2 14       	cp	r11, r2
    35b2:	60 f4       	brcc	.+24     	; 0x35cc <vfprintf+0x330>
    35b4:	b6 01       	movw	r22, r12
    35b6:	80 e2       	ldi	r24, 0x20	; 32
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	0e 94 45 1b 	call	0x368a	; 0x368a <fputc>
    35be:	b3 94       	inc	r11
    35c0:	f7 cf       	rjmp	.-18     	; 0x35b0 <vfprintf+0x314>
    35c2:	b2 14       	cp	r11, r2
    35c4:	18 f4       	brcc	.+6      	; 0x35cc <vfprintf+0x330>
    35c6:	2b 18       	sub	r2, r11
    35c8:	02 c0       	rjmp	.+4      	; 0x35ce <vfprintf+0x332>
    35ca:	98 2c       	mov	r9, r8
    35cc:	21 2c       	mov	r2, r1
    35ce:	a4 fe       	sbrs	r10, 4
    35d0:	10 c0       	rjmp	.+32     	; 0x35f2 <vfprintf+0x356>
    35d2:	b6 01       	movw	r22, r12
    35d4:	80 e3       	ldi	r24, 0x30	; 48
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	0e 94 45 1b 	call	0x368a	; 0x368a <fputc>
    35dc:	a2 fe       	sbrs	r10, 2
    35de:	17 c0       	rjmp	.+46     	; 0x360e <vfprintf+0x372>
    35e0:	a1 fc       	sbrc	r10, 1
    35e2:	03 c0       	rjmp	.+6      	; 0x35ea <vfprintf+0x34e>
    35e4:	88 e7       	ldi	r24, 0x78	; 120
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	02 c0       	rjmp	.+4      	; 0x35ee <vfprintf+0x352>
    35ea:	88 e5       	ldi	r24, 0x58	; 88
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	b6 01       	movw	r22, r12
    35f0:	0c c0       	rjmp	.+24     	; 0x360a <vfprintf+0x36e>
    35f2:	8a 2d       	mov	r24, r10
    35f4:	86 78       	andi	r24, 0x86	; 134
    35f6:	59 f0       	breq	.+22     	; 0x360e <vfprintf+0x372>
    35f8:	a1 fe       	sbrs	r10, 1
    35fa:	02 c0       	rjmp	.+4      	; 0x3600 <vfprintf+0x364>
    35fc:	8b e2       	ldi	r24, 0x2B	; 43
    35fe:	01 c0       	rjmp	.+2      	; 0x3602 <vfprintf+0x366>
    3600:	80 e2       	ldi	r24, 0x20	; 32
    3602:	a7 fc       	sbrc	r10, 7
    3604:	8d e2       	ldi	r24, 0x2D	; 45
    3606:	b6 01       	movw	r22, r12
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	0e 94 45 1b 	call	0x368a	; 0x368a <fputc>
    360e:	89 14       	cp	r8, r9
    3610:	38 f4       	brcc	.+14     	; 0x3620 <vfprintf+0x384>
    3612:	b6 01       	movw	r22, r12
    3614:	80 e3       	ldi	r24, 0x30	; 48
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	0e 94 45 1b 	call	0x368a	; 0x368a <fputc>
    361c:	9a 94       	dec	r9
    361e:	f7 cf       	rjmp	.-18     	; 0x360e <vfprintf+0x372>
    3620:	8a 94       	dec	r8
    3622:	f3 01       	movw	r30, r6
    3624:	e8 0d       	add	r30, r8
    3626:	f1 1d       	adc	r31, r1
    3628:	80 81       	ld	r24, Z
    362a:	b6 01       	movw	r22, r12
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	0e 94 45 1b 	call	0x368a	; 0x368a <fputc>
    3632:	81 10       	cpse	r8, r1
    3634:	f5 cf       	rjmp	.-22     	; 0x3620 <vfprintf+0x384>
    3636:	22 20       	and	r2, r2
    3638:	09 f4       	brne	.+2      	; 0x363c <vfprintf+0x3a0>
    363a:	42 ce       	rjmp	.-892    	; 0x32c0 <vfprintf+0x24>
    363c:	b6 01       	movw	r22, r12
    363e:	80 e2       	ldi	r24, 0x20	; 32
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	0e 94 45 1b 	call	0x368a	; 0x368a <fputc>
    3646:	2a 94       	dec	r2
    3648:	f6 cf       	rjmp	.-20     	; 0x3636 <vfprintf+0x39a>
    364a:	f6 01       	movw	r30, r12
    364c:	86 81       	ldd	r24, Z+6	; 0x06
    364e:	97 81       	ldd	r25, Z+7	; 0x07
    3650:	02 c0       	rjmp	.+4      	; 0x3656 <vfprintf+0x3ba>
    3652:	8f ef       	ldi	r24, 0xFF	; 255
    3654:	9f ef       	ldi	r25, 0xFF	; 255
    3656:	2b 96       	adiw	r28, 0x0b	; 11
    3658:	e2 e1       	ldi	r30, 0x12	; 18
    365a:	0c 94 fb 1b 	jmp	0x37f6	; 0x37f6 <__epilogue_restores__>

0000365e <strnlen_P>:
    365e:	fc 01       	movw	r30, r24
    3660:	05 90       	lpm	r0, Z+
    3662:	61 50       	subi	r22, 0x01	; 1
    3664:	70 40       	sbci	r23, 0x00	; 0
    3666:	01 10       	cpse	r0, r1
    3668:	d8 f7       	brcc	.-10     	; 0x3660 <strnlen_P+0x2>
    366a:	80 95       	com	r24
    366c:	90 95       	com	r25
    366e:	8e 0f       	add	r24, r30
    3670:	9f 1f       	adc	r25, r31
    3672:	08 95       	ret

00003674 <strnlen>:
    3674:	fc 01       	movw	r30, r24
    3676:	61 50       	subi	r22, 0x01	; 1
    3678:	70 40       	sbci	r23, 0x00	; 0
    367a:	01 90       	ld	r0, Z+
    367c:	01 10       	cpse	r0, r1
    367e:	d8 f7       	brcc	.-10     	; 0x3676 <strnlen+0x2>
    3680:	80 95       	com	r24
    3682:	90 95       	com	r25
    3684:	8e 0f       	add	r24, r30
    3686:	9f 1f       	adc	r25, r31
    3688:	08 95       	ret

0000368a <fputc>:
    368a:	0f 93       	push	r16
    368c:	1f 93       	push	r17
    368e:	cf 93       	push	r28
    3690:	df 93       	push	r29
    3692:	fb 01       	movw	r30, r22
    3694:	23 81       	ldd	r18, Z+3	; 0x03
    3696:	21 fd       	sbrc	r18, 1
    3698:	03 c0       	rjmp	.+6      	; 0x36a0 <fputc+0x16>
    369a:	8f ef       	ldi	r24, 0xFF	; 255
    369c:	9f ef       	ldi	r25, 0xFF	; 255
    369e:	2c c0       	rjmp	.+88     	; 0x36f8 <fputc+0x6e>
    36a0:	22 ff       	sbrs	r18, 2
    36a2:	16 c0       	rjmp	.+44     	; 0x36d0 <fputc+0x46>
    36a4:	46 81       	ldd	r20, Z+6	; 0x06
    36a6:	57 81       	ldd	r21, Z+7	; 0x07
    36a8:	24 81       	ldd	r18, Z+4	; 0x04
    36aa:	35 81       	ldd	r19, Z+5	; 0x05
    36ac:	42 17       	cp	r20, r18
    36ae:	53 07       	cpc	r21, r19
    36b0:	44 f4       	brge	.+16     	; 0x36c2 <fputc+0x38>
    36b2:	a0 81       	ld	r26, Z
    36b4:	b1 81       	ldd	r27, Z+1	; 0x01
    36b6:	9d 01       	movw	r18, r26
    36b8:	2f 5f       	subi	r18, 0xFF	; 255
    36ba:	3f 4f       	sbci	r19, 0xFF	; 255
    36bc:	31 83       	std	Z+1, r19	; 0x01
    36be:	20 83       	st	Z, r18
    36c0:	8c 93       	st	X, r24
    36c2:	26 81       	ldd	r18, Z+6	; 0x06
    36c4:	37 81       	ldd	r19, Z+7	; 0x07
    36c6:	2f 5f       	subi	r18, 0xFF	; 255
    36c8:	3f 4f       	sbci	r19, 0xFF	; 255
    36ca:	37 83       	std	Z+7, r19	; 0x07
    36cc:	26 83       	std	Z+6, r18	; 0x06
    36ce:	14 c0       	rjmp	.+40     	; 0x36f8 <fputc+0x6e>
    36d0:	8b 01       	movw	r16, r22
    36d2:	ec 01       	movw	r28, r24
    36d4:	fb 01       	movw	r30, r22
    36d6:	00 84       	ldd	r0, Z+8	; 0x08
    36d8:	f1 85       	ldd	r31, Z+9	; 0x09
    36da:	e0 2d       	mov	r30, r0
    36dc:	09 95       	icall
    36de:	89 2b       	or	r24, r25
    36e0:	e1 f6       	brne	.-72     	; 0x369a <fputc+0x10>
    36e2:	d8 01       	movw	r26, r16
    36e4:	16 96       	adiw	r26, 0x06	; 6
    36e6:	8d 91       	ld	r24, X+
    36e8:	9c 91       	ld	r25, X
    36ea:	17 97       	sbiw	r26, 0x07	; 7
    36ec:	01 96       	adiw	r24, 0x01	; 1
    36ee:	17 96       	adiw	r26, 0x07	; 7
    36f0:	9c 93       	st	X, r25
    36f2:	8e 93       	st	-X, r24
    36f4:	16 97       	sbiw	r26, 0x06	; 6
    36f6:	ce 01       	movw	r24, r28
    36f8:	df 91       	pop	r29
    36fa:	cf 91       	pop	r28
    36fc:	1f 91       	pop	r17
    36fe:	0f 91       	pop	r16
    3700:	08 95       	ret

00003702 <__ultoa_invert>:
    3702:	fa 01       	movw	r30, r20
    3704:	aa 27       	eor	r26, r26
    3706:	28 30       	cpi	r18, 0x08	; 8
    3708:	51 f1       	breq	.+84     	; 0x375e <__ultoa_invert+0x5c>
    370a:	20 31       	cpi	r18, 0x10	; 16
    370c:	81 f1       	breq	.+96     	; 0x376e <__ultoa_invert+0x6c>
    370e:	e8 94       	clt
    3710:	6f 93       	push	r22
    3712:	6e 7f       	andi	r22, 0xFE	; 254
    3714:	6e 5f       	subi	r22, 0xFE	; 254
    3716:	7f 4f       	sbci	r23, 0xFF	; 255
    3718:	8f 4f       	sbci	r24, 0xFF	; 255
    371a:	9f 4f       	sbci	r25, 0xFF	; 255
    371c:	af 4f       	sbci	r26, 0xFF	; 255
    371e:	b1 e0       	ldi	r27, 0x01	; 1
    3720:	3e d0       	rcall	.+124    	; 0x379e <__ultoa_invert+0x9c>
    3722:	b4 e0       	ldi	r27, 0x04	; 4
    3724:	3c d0       	rcall	.+120    	; 0x379e <__ultoa_invert+0x9c>
    3726:	67 0f       	add	r22, r23
    3728:	78 1f       	adc	r23, r24
    372a:	89 1f       	adc	r24, r25
    372c:	9a 1f       	adc	r25, r26
    372e:	a1 1d       	adc	r26, r1
    3730:	68 0f       	add	r22, r24
    3732:	79 1f       	adc	r23, r25
    3734:	8a 1f       	adc	r24, r26
    3736:	91 1d       	adc	r25, r1
    3738:	a1 1d       	adc	r26, r1
    373a:	6a 0f       	add	r22, r26
    373c:	71 1d       	adc	r23, r1
    373e:	81 1d       	adc	r24, r1
    3740:	91 1d       	adc	r25, r1
    3742:	a1 1d       	adc	r26, r1
    3744:	20 d0       	rcall	.+64     	; 0x3786 <__ultoa_invert+0x84>
    3746:	09 f4       	brne	.+2      	; 0x374a <__ultoa_invert+0x48>
    3748:	68 94       	set
    374a:	3f 91       	pop	r19
    374c:	2a e0       	ldi	r18, 0x0A	; 10
    374e:	26 9f       	mul	r18, r22
    3750:	11 24       	eor	r1, r1
    3752:	30 19       	sub	r19, r0
    3754:	30 5d       	subi	r19, 0xD0	; 208
    3756:	31 93       	st	Z+, r19
    3758:	de f6       	brtc	.-74     	; 0x3710 <__ultoa_invert+0xe>
    375a:	cf 01       	movw	r24, r30
    375c:	08 95       	ret
    375e:	46 2f       	mov	r20, r22
    3760:	47 70       	andi	r20, 0x07	; 7
    3762:	40 5d       	subi	r20, 0xD0	; 208
    3764:	41 93       	st	Z+, r20
    3766:	b3 e0       	ldi	r27, 0x03	; 3
    3768:	0f d0       	rcall	.+30     	; 0x3788 <__ultoa_invert+0x86>
    376a:	c9 f7       	brne	.-14     	; 0x375e <__ultoa_invert+0x5c>
    376c:	f6 cf       	rjmp	.-20     	; 0x375a <__ultoa_invert+0x58>
    376e:	46 2f       	mov	r20, r22
    3770:	4f 70       	andi	r20, 0x0F	; 15
    3772:	40 5d       	subi	r20, 0xD0	; 208
    3774:	4a 33       	cpi	r20, 0x3A	; 58
    3776:	18 f0       	brcs	.+6      	; 0x377e <__ultoa_invert+0x7c>
    3778:	49 5d       	subi	r20, 0xD9	; 217
    377a:	31 fd       	sbrc	r19, 1
    377c:	40 52       	subi	r20, 0x20	; 32
    377e:	41 93       	st	Z+, r20
    3780:	02 d0       	rcall	.+4      	; 0x3786 <__ultoa_invert+0x84>
    3782:	a9 f7       	brne	.-22     	; 0x376e <__ultoa_invert+0x6c>
    3784:	ea cf       	rjmp	.-44     	; 0x375a <__ultoa_invert+0x58>
    3786:	b4 e0       	ldi	r27, 0x04	; 4
    3788:	a6 95       	lsr	r26
    378a:	97 95       	ror	r25
    378c:	87 95       	ror	r24
    378e:	77 95       	ror	r23
    3790:	67 95       	ror	r22
    3792:	ba 95       	dec	r27
    3794:	c9 f7       	brne	.-14     	; 0x3788 <__ultoa_invert+0x86>
    3796:	00 97       	sbiw	r24, 0x00	; 0
    3798:	61 05       	cpc	r22, r1
    379a:	71 05       	cpc	r23, r1
    379c:	08 95       	ret
    379e:	9b 01       	movw	r18, r22
    37a0:	ac 01       	movw	r20, r24
    37a2:	0a 2e       	mov	r0, r26
    37a4:	06 94       	lsr	r0
    37a6:	57 95       	ror	r21
    37a8:	47 95       	ror	r20
    37aa:	37 95       	ror	r19
    37ac:	27 95       	ror	r18
    37ae:	ba 95       	dec	r27
    37b0:	c9 f7       	brne	.-14     	; 0x37a4 <__ultoa_invert+0xa2>
    37b2:	62 0f       	add	r22, r18
    37b4:	73 1f       	adc	r23, r19
    37b6:	84 1f       	adc	r24, r20
    37b8:	95 1f       	adc	r25, r21
    37ba:	a0 1d       	adc	r26, r0
    37bc:	08 95       	ret

000037be <__prologue_saves__>:
    37be:	2f 92       	push	r2
    37c0:	3f 92       	push	r3
    37c2:	4f 92       	push	r4
    37c4:	5f 92       	push	r5
    37c6:	6f 92       	push	r6
    37c8:	7f 92       	push	r7
    37ca:	8f 92       	push	r8
    37cc:	9f 92       	push	r9
    37ce:	af 92       	push	r10
    37d0:	bf 92       	push	r11
    37d2:	cf 92       	push	r12
    37d4:	df 92       	push	r13
    37d6:	ef 92       	push	r14
    37d8:	ff 92       	push	r15
    37da:	0f 93       	push	r16
    37dc:	1f 93       	push	r17
    37de:	cf 93       	push	r28
    37e0:	df 93       	push	r29
    37e2:	cd b7       	in	r28, 0x3d	; 61
    37e4:	de b7       	in	r29, 0x3e	; 62
    37e6:	ca 1b       	sub	r28, r26
    37e8:	db 0b       	sbc	r29, r27
    37ea:	0f b6       	in	r0, 0x3f	; 63
    37ec:	f8 94       	cli
    37ee:	de bf       	out	0x3e, r29	; 62
    37f0:	0f be       	out	0x3f, r0	; 63
    37f2:	cd bf       	out	0x3d, r28	; 61
    37f4:	09 94       	ijmp

000037f6 <__epilogue_restores__>:
    37f6:	2a 88       	ldd	r2, Y+18	; 0x12
    37f8:	39 88       	ldd	r3, Y+17	; 0x11
    37fa:	48 88       	ldd	r4, Y+16	; 0x10
    37fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    37fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3800:	7d 84       	ldd	r7, Y+13	; 0x0d
    3802:	8c 84       	ldd	r8, Y+12	; 0x0c
    3804:	9b 84       	ldd	r9, Y+11	; 0x0b
    3806:	aa 84       	ldd	r10, Y+10	; 0x0a
    3808:	b9 84       	ldd	r11, Y+9	; 0x09
    380a:	c8 84       	ldd	r12, Y+8	; 0x08
    380c:	df 80       	ldd	r13, Y+7	; 0x07
    380e:	ee 80       	ldd	r14, Y+6	; 0x06
    3810:	fd 80       	ldd	r15, Y+5	; 0x05
    3812:	0c 81       	ldd	r16, Y+4	; 0x04
    3814:	1b 81       	ldd	r17, Y+3	; 0x03
    3816:	aa 81       	ldd	r26, Y+2	; 0x02
    3818:	b9 81       	ldd	r27, Y+1	; 0x01
    381a:	ce 0f       	add	r28, r30
    381c:	d1 1d       	adc	r29, r1
    381e:	0f b6       	in	r0, 0x3f	; 63
    3820:	f8 94       	cli
    3822:	de bf       	out	0x3e, r29	; 62
    3824:	0f be       	out	0x3f, r0	; 63
    3826:	cd bf       	out	0x3d, r28	; 61
    3828:	ed 01       	movw	r28, r26
    382a:	08 95       	ret

0000382c <_exit>:
    382c:	f8 94       	cli

0000382e <__stop_program>:
    382e:	ff cf       	rjmp	.-2      	; 0x382e <__stop_program>
