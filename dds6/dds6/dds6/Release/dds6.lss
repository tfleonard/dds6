
dds6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f4  00800100  000031d0  00003264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  008002f4  008002f4  00003458  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003458  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000034b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  000034f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000079a3  00000000  00000000  00003938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027a3  00000000  00000000  0000b2db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000297d  00000000  00000000  0000da7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c40  00000000  00000000  000103fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001826  00000000  00000000  0001103c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003db6  00000000  00000000  00012862  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  00016618  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 c8 03 	jmp	0x790	; 0x790 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 ed       	ldi	r30, 0xD0	; 208
      7c:	f1 e3       	ldi	r31, 0x31	; 49
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 3f       	cpi	r26, 0xF4	; 244
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a4 ef       	ldi	r26, 0xF4	; 244
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 33       	cpi	r26, 0x3D	; 61
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <main>
      9e:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FONT>:
	...
     232:	00 08       	sbc	r0, r0
     234:	08 08       	sbc	r0, r8
     236:	08 08       	sbc	r0, r8
     238:	08 00       	.word	0x0008	; ????
     23a:	08 00       	.word	0x0008	; ????
     23c:	00 00       	nop
     23e:	00 14       	cp	r0, r0
     240:	14 14       	cp	r1, r4
	...
     24a:	00 00       	nop
     24c:	14 14       	cp	r1, r4
     24e:	3e 14       	cp	r3, r14
     250:	3e 14       	cp	r3, r14
     252:	14 00       	.word	0x0014	; ????
     254:	00 00       	nop
     256:	00 00       	nop
     258:	08 3c       	cpi	r16, 0xC8	; 200
     25a:	0a 1c       	adc	r0, r10
     25c:	28 1e       	adc	r2, r24
     25e:	08 00       	.word	0x0008	; ????
     260:	00 00       	nop
     262:	00 00       	nop
     264:	06 26       	eor	r0, r22
     266:	10 08       	sbc	r1, r0
     268:	04 32       	cpi	r16, 0x24	; 36
     26a:	30 00       	.word	0x0030	; ????
     26c:	00 00       	nop
     26e:	00 00       	nop
     270:	1c 02       	muls	r17, r28
     272:	02 04       	cpc	r0, r2
     274:	2a 12       	cpse	r2, r26
     276:	2c 00       	.word	0x002c	; ????
     278:	00 00       	nop
     27a:	00 18       	sub	r0, r0
     27c:	08 04       	cpc	r0, r8
	...
     286:	20 10       	cpse	r2, r0
     288:	10 08       	sbc	r1, r0
     28a:	08 08       	sbc	r0, r8
     28c:	08 08       	sbc	r0, r8
     28e:	10 10       	cpse	r1, r0
     290:	20 00       	.word	0x0020	; ????
     292:	02 04       	cpc	r0, r2
     294:	04 08       	sbc	r0, r4
     296:	08 08       	sbc	r0, r8
     298:	08 08       	sbc	r0, r8
     29a:	04 04       	cpc	r0, r4
     29c:	02 00       	.word	0x0002	; ????
     29e:	00 00       	nop
     2a0:	00 08       	sbc	r0, r0
     2a2:	2a 1c       	adc	r2, r10
     2a4:	2a 08       	sbc	r2, r10
     2a6:	00 00       	nop
     2a8:	00 00       	nop
     2aa:	00 00       	nop
     2ac:	00 08       	sbc	r0, r0
     2ae:	08 3e       	cpi	r16, 0xE8	; 232
     2b0:	08 08       	sbc	r0, r8
	...
     2ba:	00 00       	nop
     2bc:	00 18       	sub	r0, r0
     2be:	18 08       	sbc	r1, r8
     2c0:	04 00       	.word	0x0004	; ????
     2c2:	00 00       	nop
     2c4:	00 00       	nop
     2c6:	00 3e       	cpi	r16, 0xE0	; 224
	...
     2d4:	00 18       	sub	r0, r0
     2d6:	18 00       	.word	0x0018	; ????
     2d8:	00 00       	nop
     2da:	20 20       	and	r2, r0
     2dc:	10 10       	cpse	r1, r0
     2de:	08 08       	sbc	r0, r8
     2e0:	04 04       	cpc	r0, r4
     2e2:	02 02       	muls	r16, r18
     2e4:	00 00       	nop
     2e6:	00 1c       	adc	r0, r0
     2e8:	22 32       	cpi	r18, 0x22	; 34
     2ea:	2a 26       	eor	r2, r26
     2ec:	22 22       	and	r2, r18
     2ee:	1c 00       	.word	0x001c	; ????
     2f0:	00 00       	nop
     2f2:	00 08       	sbc	r0, r0
     2f4:	0c 08       	sbc	r0, r12
     2f6:	08 08       	sbc	r0, r8
     2f8:	08 08       	sbc	r0, r8
     2fa:	08 00       	.word	0x0008	; ????
     2fc:	00 00       	nop
     2fe:	00 1c       	adc	r0, r0
     300:	22 20       	and	r2, r2
     302:	10 08       	sbc	r1, r0
     304:	04 02       	muls	r16, r20
     306:	3e 00       	.word	0x003e	; ????
     308:	00 00       	nop
     30a:	00 1c       	adc	r0, r0
     30c:	22 20       	and	r2, r2
     30e:	18 20       	and	r1, r8
     310:	20 22       	and	r2, r16
     312:	1c 00       	.word	0x001c	; ????
     314:	00 00       	nop
     316:	00 10       	cpse	r0, r0
     318:	18 18       	sub	r1, r8
     31a:	14 14       	cp	r1, r4
     31c:	3e 10       	cpse	r3, r14
     31e:	38 00       	.word	0x0038	; ????
     320:	00 00       	nop
     322:	00 3e       	cpi	r16, 0xE0	; 224
     324:	02 02       	muls	r16, r18
     326:	1e 20       	and	r1, r14
     328:	20 22       	and	r2, r16
     32a:	1c 00       	.word	0x001c	; ????
     32c:	00 00       	nop
     32e:	00 18       	sub	r0, r0
     330:	04 02       	muls	r16, r20
     332:	1e 22       	and	r1, r30
     334:	22 22       	and	r2, r18
     336:	1c 00       	.word	0x001c	; ????
     338:	00 00       	nop
     33a:	00 3e       	cpi	r16, 0xE0	; 224
     33c:	22 20       	and	r2, r2
     33e:	20 10       	cpse	r2, r0
     340:	10 08       	sbc	r1, r0
     342:	08 00       	.word	0x0008	; ????
     344:	00 00       	nop
     346:	00 1c       	adc	r0, r0
     348:	22 22       	and	r2, r18
     34a:	1c 22       	and	r1, r28
     34c:	22 22       	and	r2, r18
     34e:	1c 00       	.word	0x001c	; ????
     350:	00 00       	nop
     352:	00 1c       	adc	r0, r0
     354:	22 22       	and	r2, r18
     356:	22 3c       	cpi	r18, 0xC2	; 194
     358:	20 10       	cpse	r2, r0
     35a:	0c 00       	.word	0x000c	; ????
     35c:	00 00       	nop
     35e:	00 00       	nop
     360:	00 18       	sub	r0, r0
     362:	18 00       	.word	0x0018	; ????
     364:	00 18       	sub	r0, r0
     366:	18 00       	.word	0x0018	; ????
     368:	00 00       	nop
     36a:	00 00       	nop
     36c:	00 18       	sub	r0, r0
     36e:	18 00       	.word	0x0018	; ????
     370:	00 18       	sub	r0, r0
     372:	18 08       	sbc	r1, r8
     374:	04 00       	.word	0x0004	; ????
     376:	00 00       	nop
     378:	00 30       	cpi	r16, 0x00	; 0
     37a:	0c 03       	fmul	r16, r20
     37c:	0c 30       	cpi	r16, 0x0C	; 12
	...
     386:	3e 00       	.word	0x003e	; ????
     388:	3e 00       	.word	0x003e	; ????
     38a:	00 00       	nop
     38c:	00 00       	nop
     38e:	00 00       	nop
     390:	00 03       	mulsu	r16, r16
     392:	0c 30       	cpi	r16, 0x0C	; 12
     394:	0c 03       	fmul	r16, r20
     396:	00 00       	nop
     398:	00 00       	nop
     39a:	00 1c       	adc	r0, r0
     39c:	22 20       	and	r2, r2
     39e:	10 08       	sbc	r1, r0
     3a0:	08 00       	.word	0x0008	; ????
     3a2:	08 00       	.word	0x0008	; ????
     3a4:	00 00       	nop
     3a6:	00 00       	nop
     3a8:	1c 22       	and	r1, r28
     3aa:	3a 3a       	cpi	r19, 0xAA	; 170
     3ac:	1a 02       	muls	r17, r26
     3ae:	1c 00       	.word	0x001c	; ????
     3b0:	00 00       	nop
     3b2:	00 00       	nop
     3b4:	08 14       	cp	r0, r8
     3b6:	22 22       	and	r2, r18
     3b8:	3e 22       	and	r3, r30
     3ba:	22 00       	.word	0x0022	; ????
     3bc:	00 00       	nop
     3be:	00 00       	nop
     3c0:	1e 22       	and	r1, r30
     3c2:	22 1e       	adc	r2, r18
     3c4:	22 22       	and	r2, r18
     3c6:	1e 00       	.word	0x001e	; ????
     3c8:	00 00       	nop
     3ca:	00 00       	nop
     3cc:	1c 22       	and	r1, r28
     3ce:	02 02       	muls	r16, r18
     3d0:	02 22       	and	r0, r18
     3d2:	1c 00       	.word	0x001c	; ????
     3d4:	00 00       	nop
     3d6:	00 00       	nop
     3d8:	0e 12       	cpse	r0, r30
     3da:	22 22       	and	r2, r18
     3dc:	22 12       	cpse	r2, r18
     3de:	0e 00       	.word	0x000e	; ????
     3e0:	00 00       	nop
     3e2:	00 00       	nop
     3e4:	3e 02       	muls	r19, r30
     3e6:	02 1e       	adc	r0, r18
     3e8:	02 02       	muls	r16, r18
     3ea:	3e 00       	.word	0x003e	; ????
     3ec:	00 00       	nop
     3ee:	00 00       	nop
     3f0:	3e 02       	muls	r19, r30
     3f2:	02 1e       	adc	r0, r18
     3f4:	02 02       	muls	r16, r18
     3f6:	02 00       	.word	0x0002	; ????
     3f8:	00 00       	nop
     3fa:	00 00       	nop
     3fc:	1c 22       	and	r1, r28
     3fe:	02 32       	cpi	r16, 0x22	; 34
     400:	22 22       	and	r2, r18
     402:	3c 00       	.word	0x003c	; ????
     404:	00 00       	nop
     406:	00 00       	nop
     408:	22 22       	and	r2, r18
     40a:	22 3e       	cpi	r18, 0xE2	; 226
     40c:	22 22       	and	r2, r18
     40e:	22 00       	.word	0x0022	; ????
     410:	00 00       	nop
     412:	00 00       	nop
     414:	3e 08       	sbc	r3, r14
     416:	08 08       	sbc	r0, r8
     418:	08 08       	sbc	r0, r8
     41a:	3e 00       	.word	0x003e	; ????
     41c:	00 00       	nop
     41e:	00 00       	nop
     420:	38 20       	and	r3, r8
     422:	20 20       	and	r2, r0
     424:	22 22       	and	r2, r18
     426:	1c 00       	.word	0x001c	; ????
     428:	00 00       	nop
     42a:	00 00       	nop
     42c:	22 12       	cpse	r2, r18
     42e:	0a 06       	cpc	r0, r26
     430:	0a 12       	cpse	r0, r26
     432:	22 00       	.word	0x0022	; ????
     434:	00 00       	nop
     436:	00 00       	nop
     438:	02 02       	muls	r16, r18
     43a:	02 02       	muls	r16, r18
     43c:	02 02       	muls	r16, r18
     43e:	3e 00       	.word	0x003e	; ????
     440:	00 00       	nop
     442:	00 00       	nop
     444:	22 36       	cpi	r18, 0x62	; 98
     446:	2a 2a       	or	r2, r26
     448:	22 22       	and	r2, r18
     44a:	22 00       	.word	0x0022	; ????
     44c:	00 00       	nop
     44e:	00 00       	nop
     450:	22 26       	eor	r2, r18
     452:	26 2a       	or	r2, r22
     454:	32 32       	cpi	r19, 0x22	; 34
     456:	22 00       	.word	0x0022	; ????
     458:	00 00       	nop
     45a:	00 00       	nop
     45c:	1c 22       	and	r1, r28
     45e:	22 22       	and	r2, r18
     460:	22 22       	and	r2, r18
     462:	1c 00       	.word	0x001c	; ????
     464:	00 00       	nop
     466:	00 00       	nop
     468:	1e 22       	and	r1, r30
     46a:	22 1e       	adc	r2, r18
     46c:	02 02       	muls	r16, r18
     46e:	02 00       	.word	0x0002	; ????
     470:	00 00       	nop
     472:	00 00       	nop
     474:	1c 22       	and	r1, r28
     476:	22 22       	and	r2, r18
     478:	22 22       	and	r2, r18
     47a:	1c 30       	cpi	r17, 0x0C	; 12
     47c:	00 00       	nop
     47e:	00 00       	nop
     480:	1e 22       	and	r1, r30
     482:	22 1e       	adc	r2, r18
     484:	0a 12       	cpse	r0, r26
     486:	22 00       	.word	0x0022	; ????
     488:	00 00       	nop
     48a:	00 00       	nop
     48c:	1c 22       	and	r1, r28
     48e:	02 1c       	adc	r0, r2
     490:	20 22       	and	r2, r16
     492:	1c 00       	.word	0x001c	; ????
     494:	00 00       	nop
     496:	00 00       	nop
     498:	3e 08       	sbc	r3, r14
     49a:	08 08       	sbc	r0, r8
     49c:	08 08       	sbc	r0, r8
     49e:	08 00       	.word	0x0008	; ????
     4a0:	00 00       	nop
     4a2:	00 00       	nop
     4a4:	22 22       	and	r2, r18
     4a6:	22 22       	and	r2, r18
     4a8:	22 22       	and	r2, r18
     4aa:	1c 00       	.word	0x001c	; ????
     4ac:	00 00       	nop
     4ae:	00 00       	nop
     4b0:	22 22       	and	r2, r18
     4b2:	22 14       	cp	r2, r2
     4b4:	14 08       	sbc	r1, r4
     4b6:	08 00       	.word	0x0008	; ????
     4b8:	00 00       	nop
     4ba:	00 00       	nop
     4bc:	22 22       	and	r2, r18
     4be:	22 2a       	or	r2, r18
     4c0:	2a 36       	cpi	r18, 0x6A	; 106
     4c2:	22 00       	.word	0x0022	; ????
     4c4:	00 00       	nop
     4c6:	00 00       	nop
     4c8:	22 22       	and	r2, r18
     4ca:	14 08       	sbc	r1, r4
     4cc:	14 22       	and	r1, r20
     4ce:	22 00       	.word	0x0022	; ????
     4d0:	00 00       	nop
     4d2:	00 00       	nop
     4d4:	22 22       	and	r2, r18
     4d6:	14 08       	sbc	r1, r4
     4d8:	08 08       	sbc	r0, r8
     4da:	08 00       	.word	0x0008	; ????
     4dc:	00 00       	nop
     4de:	00 00       	nop
     4e0:	3e 20       	and	r3, r14
     4e2:	10 08       	sbc	r1, r0
     4e4:	04 02       	muls	r16, r20
     4e6:	3e 00       	.word	0x003e	; ????
     4e8:	00 00       	nop
     4ea:	38 08       	sbc	r3, r8
     4ec:	08 08       	sbc	r0, r8
     4ee:	08 08       	sbc	r0, r8
     4f0:	08 08       	sbc	r0, r8
     4f2:	08 08       	sbc	r0, r8
     4f4:	38 00       	.word	0x0038	; ????
     4f6:	02 02       	muls	r16, r18
     4f8:	04 04       	cpc	r0, r4
     4fa:	08 08       	sbc	r0, r8
     4fc:	10 10       	cpse	r1, r0
     4fe:	20 20       	and	r2, r0
     500:	00 00       	nop
     502:	0e 08       	sbc	r0, r14
     504:	08 08       	sbc	r0, r8
     506:	08 08       	sbc	r0, r8
     508:	08 08       	sbc	r0, r8
     50a:	08 08       	sbc	r0, r8
     50c:	0e 00       	.word	0x000e	; ????
     50e:	00 08       	sbc	r0, r0
     510:	14 22       	and	r1, r20
	...
     522:	00 3f       	cpi	r16, 0xF0	; 240
     524:	00 00       	nop
     526:	00 0c       	add	r0, r0
     528:	08 10       	cpse	r0, r8
	...
     536:	3c 22       	and	r3, r28
     538:	22 32       	cpi	r18, 0x22	; 34
     53a:	2c 00       	.word	0x002c	; ????
     53c:	00 00       	nop
     53e:	00 02       	muls	r16, r16
     540:	02 02       	muls	r16, r18
     542:	1e 22       	and	r1, r30
     544:	22 22       	and	r2, r18
     546:	1e 00       	.word	0x001e	; ????
     548:	00 00       	nop
     54a:	00 00       	nop
     54c:	00 00       	nop
     54e:	3c 02       	muls	r19, r28
     550:	02 02       	muls	r16, r18
     552:	3c 00       	.word	0x003c	; ????
     554:	00 00       	nop
     556:	00 20       	and	r0, r0
     558:	20 20       	and	r2, r0
     55a:	3c 22       	and	r3, r28
     55c:	22 22       	and	r2, r18
     55e:	3c 00       	.word	0x003c	; ????
     560:	00 00       	nop
     562:	00 00       	nop
     564:	00 00       	nop
     566:	1c 22       	and	r1, r28
     568:	3e 02       	muls	r19, r30
     56a:	1c 00       	.word	0x001c	; ????
     56c:	00 00       	nop
     56e:	00 38       	cpi	r16, 0x80	; 128
     570:	04 04       	cpc	r0, r4
     572:	1e 04       	cpc	r1, r14
     574:	04 04       	cpc	r0, r4
     576:	04 00       	.word	0x0004	; ????
     578:	00 00       	nop
     57a:	00 00       	nop
     57c:	00 00       	nop
     57e:	3c 22       	and	r3, r28
     580:	22 22       	and	r2, r18
     582:	3c 20       	and	r3, r12
     584:	20 1c       	adc	r2, r0
     586:	00 02       	muls	r16, r16
     588:	02 02       	muls	r16, r18
     58a:	1e 22       	and	r1, r30
     58c:	22 22       	and	r2, r18
     58e:	22 00       	.word	0x0022	; ????
     590:	00 00       	nop
     592:	00 08       	sbc	r0, r0
     594:	08 00       	.word	0x0008	; ????
     596:	0c 08       	sbc	r0, r12
     598:	08 08       	sbc	r0, r8
     59a:	1c 00       	.word	0x001c	; ????
     59c:	00 00       	nop
     59e:	00 10       	cpse	r0, r0
     5a0:	10 00       	.word	0x0010	; ????
     5a2:	1c 10       	cpse	r1, r12
     5a4:	10 10       	cpse	r1, r0
     5a6:	10 10       	cpse	r1, r0
     5a8:	10 0e       	add	r1, r16
     5aa:	00 02       	muls	r16, r16
     5ac:	02 02       	muls	r16, r18
     5ae:	12 0a       	sbc	r1, r18
     5b0:	06 0a       	sbc	r0, r22
     5b2:	12 00       	.word	0x0012	; ????
     5b4:	00 00       	nop
     5b6:	00 0c       	add	r0, r0
     5b8:	08 08       	sbc	r0, r8
     5ba:	08 08       	sbc	r0, r8
     5bc:	08 08       	sbc	r0, r8
     5be:	1c 00       	.word	0x001c	; ????
     5c0:	00 00       	nop
     5c2:	00 00       	nop
     5c4:	00 00       	nop
     5c6:	16 2a       	or	r1, r22
     5c8:	2a 2a       	or	r2, r26
     5ca:	22 00       	.word	0x0022	; ????
     5cc:	00 00       	nop
     5ce:	00 00       	nop
     5d0:	00 00       	nop
     5d2:	1a 26       	eor	r1, r26
     5d4:	22 22       	and	r2, r18
     5d6:	22 00       	.word	0x0022	; ????
     5d8:	00 00       	nop
     5da:	00 00       	nop
     5dc:	00 00       	nop
     5de:	1c 22       	and	r1, r28
     5e0:	22 22       	and	r2, r18
     5e2:	1c 00       	.word	0x001c	; ????
     5e4:	00 00       	nop
     5e6:	00 00       	nop
     5e8:	00 00       	nop
     5ea:	1e 22       	and	r1, r30
     5ec:	22 22       	and	r2, r18
     5ee:	1e 02       	muls	r17, r30
     5f0:	02 02       	muls	r16, r18
     5f2:	00 00       	nop
     5f4:	00 00       	nop
     5f6:	3c 22       	and	r3, r28
     5f8:	22 22       	and	r2, r18
     5fa:	3c 20       	and	r3, r12
     5fc:	20 20       	and	r2, r0
     5fe:	00 00       	nop
     600:	00 00       	nop
     602:	1a 06       	cpc	r1, r26
     604:	02 02       	muls	r16, r18
     606:	02 00       	.word	0x0002	; ????
     608:	00 00       	nop
     60a:	00 00       	nop
     60c:	00 00       	nop
     60e:	3c 02       	muls	r19, r28
     610:	1c 20       	and	r1, r12
     612:	1e 00       	.word	0x001e	; ????
     614:	00 00       	nop
     616:	00 08       	sbc	r0, r0
     618:	08 08       	sbc	r0, r8
     61a:	3e 08       	sbc	r3, r14
     61c:	08 08       	sbc	r0, r8
     61e:	30 00       	.word	0x0030	; ????
     620:	00 00       	nop
     622:	00 00       	nop
     624:	00 00       	nop
     626:	22 22       	and	r2, r18
     628:	22 32       	cpi	r18, 0x22	; 34
     62a:	2c 00       	.word	0x002c	; ????
     62c:	00 00       	nop
     62e:	00 00       	nop
     630:	00 00       	nop
     632:	36 14       	cp	r3, r6
     634:	14 08       	sbc	r1, r4
     636:	08 00       	.word	0x0008	; ????
     638:	00 00       	nop
     63a:	00 00       	nop
     63c:	00 00       	nop
     63e:	22 2a       	or	r2, r18
     640:	2a 2a       	or	r2, r26
     642:	14 00       	.word	0x0014	; ????
     644:	00 00       	nop
     646:	00 00       	nop
     648:	00 00       	nop
     64a:	22 14       	cp	r2, r2
     64c:	08 14       	cp	r0, r8
     64e:	22 00       	.word	0x0022	; ????
     650:	00 00       	nop
     652:	00 00       	nop
     654:	00 00       	nop
     656:	22 22       	and	r2, r18
     658:	22 22       	and	r2, r18
     65a:	3c 20       	and	r3, r12
     65c:	20 1c       	adc	r2, r0
     65e:	00 00       	nop
     660:	00 00       	nop
     662:	3e 10       	cpse	r3, r14
     664:	08 04       	cpc	r0, r8
     666:	3e 00       	.word	0x003e	; ????
     668:	00 00       	nop
     66a:	20 10       	cpse	r2, r0
     66c:	10 10       	cpse	r1, r0
     66e:	10 08       	sbc	r1, r0
     670:	10 10       	cpse	r1, r0
     672:	10 10       	cpse	r1, r0
     674:	20 00       	.word	0x0020	; ????
     676:	08 08       	sbc	r0, r8
     678:	08 08       	sbc	r0, r8
     67a:	08 08       	sbc	r0, r8
     67c:	08 08       	sbc	r0, r8
     67e:	08 08       	sbc	r0, r8
     680:	08 00       	.word	0x0008	; ????
     682:	02 04       	cpc	r0, r2
     684:	04 04       	cpc	r0, r4
     686:	04 08       	sbc	r0, r4
     688:	04 04       	cpc	r0, r4
     68a:	04 04       	cpc	r0, r4
     68c:	02 00       	.word	0x0002	; ????
     68e:	00 04       	cpc	r0, r0
     690:	2a 10       	cpse	r2, r10
	...
     69a:	00 00       	nop
     69c:	00 08       	sbc	r0, r0
     69e:	08 14       	cp	r0, r8
     6a0:	14 22       	and	r1, r20
     6a2:	3e 00       	.word	0x003e	; ????
	...

000006a6 <_getPixels>:

;
; c is in r24, buf in r23:r22
;
_getPixels:
	push	r28
     6a6:	cf 93       	push	r28
	push	r29								; save y
     6a8:	df 93       	push	r29
	
	ldi		r25,CHEIGHT
     6aa:	9c e0       	ldi	r25, 0x0C	; 12
	mul		r24,r25						; offs = c * CHAR_HEIGHT, in r1:r0
     6ac:	89 9f       	mul	r24, r25

000006ae <_gp1>:

_gp1:
  ldi   r30,pm_lo8(FONT)    ; z gets address of FONT, pm get the relocatable address
     6ae:	e3 e5       	ldi	r30, 0x53	; 83
  ldi   r31,pm_hi8(FONT)
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
  lsl	r30										; FONT address is a hword address, convert to byte
     6b2:	ee 0f       	add	r30, r30
  rol	r31
     6b4:	ff 1f       	adc	r31, r31
  add   r30,r0             ; z + offs
     6b6:	e0 0d       	add	r30, r0
  adc   r31,r1
     6b8:	f1 1d       	adc	r31, r1

  ldi   r24,CHEIGHT				; number of bytes in char
     6ba:	8c e0       	ldi	r24, 0x0C	; 12
  movw  y,r22								; buf address
     6bc:	eb 01       	movw	r28, r22

000006be <gpix1>:

gpix1:
  lpm   r25,z+
     6be:	95 91       	lpm	r25, Z+
  st    y+,r25
     6c0:	99 93       	st	Y+, r25
  dec   r24
     6c2:	8a 95       	dec	r24
  brne   gpix1
     6c4:	e1 f7       	brne	.-8      	; 0x6be <gpix1>

	clr		r1									; restore r1 to zero
     6c6:	11 24       	eor	r1, r1
	pop		r29
     6c8:	df 91       	pop	r29
	pop		r28
     6ca:	cf 91       	pop	r28

	ret
     6cc:	08 95       	ret

000006ce <_ZN5Clock4tickEv>:

  sei();
}


Clock::~Clock(void) {
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <_ZN5Clock8sysclockE>
     6da:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <_ZN5Clock8sysclockE+0x1>
     6de:	a0 91 23 03 	lds	r26, 0x0323	; 0x800323 <_ZN5Clock8sysclockE+0x2>
     6e2:	b0 91 24 03 	lds	r27, 0x0324	; 0x800324 <_ZN5Clock8sysclockE+0x3>
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	a1 1d       	adc	r26, r1
     6ea:	b1 1d       	adc	r27, r1
     6ec:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <_ZN5Clock8sysclockE>
     6f0:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <_ZN5Clock8sysclockE+0x1>
     6f4:	a0 93 23 03 	sts	0x0323, r26	; 0x800323 <_ZN5Clock8sysclockE+0x2>
     6f8:	b0 93 24 03 	sts	0x0324, r27	; 0x800324 <_ZN5Clock8sysclockE+0x3>
     6fc:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <_ZN5Clock9delayTimeE>
     700:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <_ZN5Clock9delayTimeE+0x1>
     704:	a0 91 1f 03 	lds	r26, 0x031F	; 0x80031f <_ZN5Clock9delayTimeE+0x2>
     708:	b0 91 20 03 	lds	r27, 0x0320	; 0x800320 <_ZN5Clock9delayTimeE+0x3>
     70c:	89 2b       	or	r24, r25
     70e:	8a 2b       	or	r24, r26
     710:	8b 2b       	or	r24, r27
     712:	99 f0       	breq	.+38     	; 0x73a <_ZN5Clock4tickEv+0x6c>
     714:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <_ZN5Clock9delayTimeE>
     718:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <_ZN5Clock9delayTimeE+0x1>
     71c:	a0 91 1f 03 	lds	r26, 0x031F	; 0x80031f <_ZN5Clock9delayTimeE+0x2>
     720:	b0 91 20 03 	lds	r27, 0x0320	; 0x800320 <_ZN5Clock9delayTimeE+0x3>
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	a1 09       	sbc	r26, r1
     728:	b1 09       	sbc	r27, r1
     72a:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <_ZN5Clock9delayTimeE>
     72e:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <_ZN5Clock9delayTimeE+0x1>
     732:	a0 93 1f 03 	sts	0x031F, r26	; 0x80031f <_ZN5Clock9delayTimeE+0x2>
     736:	b0 93 20 03 	sts	0x0320, r27	; 0x800320 <_ZN5Clock9delayTimeE+0x3>
     73a:	cc ef       	ldi	r28, 0xFC	; 252
     73c:	d2 e0       	ldi	r29, 0x02	; 2
     73e:	89 91       	ld	r24, Y+
     740:	99 91       	ld	r25, Y+
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	39 f0       	breq	.+14     	; 0x754 <_ZN5Clock4tickEv+0x86>
     746:	dc 01       	movw	r26, r24
     748:	ed 91       	ld	r30, X+
     74a:	fc 91       	ld	r31, X
     74c:	01 90       	ld	r0, Z+
     74e:	f0 81       	ld	r31, Z
     750:	e0 2d       	mov	r30, r0
     752:	09 95       	icall
     754:	b3 e0       	ldi	r27, 0x03	; 3
     756:	cc 31       	cpi	r28, 0x1C	; 28
     758:	db 07       	cpc	r29, r27
     75a:	89 f7       	brne	.-30     	; 0x73e <_ZN5Clock4tickEv+0x70>
     75c:	c4 ef       	ldi	r28, 0xF4	; 244
     75e:	d2 e0       	ldi	r29, 0x02	; 2
     760:	0c ef       	ldi	r16, 0xFC	; 252
     762:	12 e0       	ldi	r17, 0x02	; 2
     764:	88 81       	ld	r24, Y
     766:	99 81       	ldd	r25, Y+1	; 0x01
     768:	00 97       	sbiw	r24, 0x00	; 0
     76a:	49 f0       	breq	.+18     	; 0x77e <_ZN5Clock4tickEv+0xb0>
     76c:	dc 01       	movw	r26, r24
     76e:	ed 91       	ld	r30, X+
     770:	fc 91       	ld	r31, X
     772:	01 90       	ld	r0, Z+
     774:	f0 81       	ld	r31, Z
     776:	e0 2d       	mov	r30, r0
     778:	09 95       	icall
     77a:	19 82       	std	Y+1, r1	; 0x01
     77c:	18 82       	st	Y, r1
     77e:	22 96       	adiw	r28, 0x02	; 2
     780:	0c 17       	cp	r16, r28
     782:	1d 07       	cpc	r17, r29
     784:	79 f7       	brne	.-34     	; 0x764 <_ZN5Clock4tickEv+0x96>
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	08 95       	ret

00000790 <__vector_11>:
     790:	1f 92       	push	r1
     792:	0f 92       	push	r0
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	0f 92       	push	r0
     798:	11 24       	eor	r1, r1
     79a:	2f 93       	push	r18
     79c:	3f 93       	push	r19
     79e:	4f 93       	push	r20
     7a0:	5f 93       	push	r21
     7a2:	6f 93       	push	r22
     7a4:	7f 93       	push	r23
     7a6:	8f 93       	push	r24
     7a8:	9f 93       	push	r25
     7aa:	af 93       	push	r26
     7ac:	bf 93       	push	r27
     7ae:	ef 93       	push	r30
     7b0:	ff 93       	push	r31
     7b2:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN5Clock4tickEv>
     7b6:	ff 91       	pop	r31
     7b8:	ef 91       	pop	r30
     7ba:	bf 91       	pop	r27
     7bc:	af 91       	pop	r26
     7be:	9f 91       	pop	r25
     7c0:	8f 91       	pop	r24
     7c2:	7f 91       	pop	r23
     7c4:	6f 91       	pop	r22
     7c6:	5f 91       	pop	r21
     7c8:	4f 91       	pop	r20
     7ca:	3f 91       	pop	r19
     7cc:	2f 91       	pop	r18
     7ce:	0f 90       	pop	r0
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	0f 90       	pop	r0
     7d4:	1f 90       	pop	r1
     7d6:	18 95       	reti

000007d8 <_ZN5Clock5delayEm>:
     7d8:	60 93 1d 03 	sts	0x031D, r22	; 0x80031d <_ZN5Clock9delayTimeE>
     7dc:	70 93 1e 03 	sts	0x031E, r23	; 0x80031e <_ZN5Clock9delayTimeE+0x1>
     7e0:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <_ZN5Clock9delayTimeE+0x2>
     7e4:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <_ZN5Clock9delayTimeE+0x3>
     7e8:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <_ZN5Clock9delayTimeE>
     7ec:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <_ZN5Clock9delayTimeE+0x1>
     7f0:	a0 91 1f 03 	lds	r26, 0x031F	; 0x80031f <_ZN5Clock9delayTimeE+0x2>
     7f4:	b0 91 20 03 	lds	r27, 0x0320	; 0x800320 <_ZN5Clock9delayTimeE+0x3>
     7f8:	89 2b       	or	r24, r25
     7fa:	8a 2b       	or	r24, r26
     7fc:	8b 2b       	or	r24, r27
     7fe:	a1 f7       	brne	.-24     	; 0x7e8 <_ZN5Clock5delayEm+0x10>
     800:	08 95       	ret

00000802 <_ZN5Clock8getTicksEv>:
     802:	60 91 21 03 	lds	r22, 0x0321	; 0x800321 <_ZN5Clock8sysclockE>
     806:	70 91 22 03 	lds	r23, 0x0322	; 0x800322 <_ZN5Clock8sysclockE+0x1>
     80a:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <_ZN5Clock8sysclockE+0x2>
     80e:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <_ZN5Clock8sysclockE+0x3>
     812:	08 95       	ret

00000814 <_ZN5Clock16registerPeriodicEP8Callback>:
     814:	ec ef       	ldi	r30, 0xFC	; 252
     816:	f2 e0       	ldi	r31, 0x02	; 2
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	61 91       	ld	r22, Z+
     81e:	71 91       	ld	r23, Z+
     820:	a9 01       	movw	r20, r18
     822:	4f 5f       	subi	r20, 0xFF	; 255
     824:	5f 4f       	sbci	r21, 0xFF	; 255
     826:	67 2b       	or	r22, r23
     828:	49 f4       	brne	.+18     	; 0x83c <_ZN5Clock16registerPeriodicEP8Callback+0x28>
     82a:	22 0f       	add	r18, r18
     82c:	33 1f       	adc	r19, r19
     82e:	f9 01       	movw	r30, r18
     830:	e4 50       	subi	r30, 0x04	; 4
     832:	fd 4f       	sbci	r31, 0xFD	; 253
     834:	91 83       	std	Z+1, r25	; 0x01
     836:	80 83       	st	Z, r24
     838:	ca 01       	movw	r24, r20
     83a:	08 95       	ret
     83c:	9a 01       	movw	r18, r20
     83e:	40 31       	cpi	r20, 0x10	; 16
     840:	51 05       	cpc	r21, r1
     842:	61 f7       	brne	.-40     	; 0x81c <_ZN5Clock16registerPeriodicEP8Callback+0x8>
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	08 95       	ret

0000084a <_ZN5ClockC1Ev>:
     84a:	f8 94       	cli
     84c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     850:	8a e0       	ldi	r24, 0x0A	; 10
     852:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     856:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     85a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     85e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     862:	80 e2       	ldi	r24, 0x20	; 32
     864:	9e e4       	ldi	r25, 0x4E	; 78
     866:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     86a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     874:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <_ZN5Clock8sysclockE>
     878:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <_ZN5Clock8sysclockE+0x1>
     87c:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <_ZN5Clock8sysclockE+0x2>
     880:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <_ZN5Clock8sysclockE+0x3>
     884:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <_ZN5Clock5countE>
     888:	ec ef       	ldi	r30, 0xFC	; 252
     88a:	f2 e0       	ldi	r31, 0x02	; 2
     88c:	11 92       	st	Z+, r1
     88e:	11 92       	st	Z+, r1
     890:	83 e0       	ldi	r24, 0x03	; 3
     892:	ec 31       	cpi	r30, 0x1C	; 28
     894:	f8 07       	cpc	r31, r24
     896:	d1 f7       	brne	.-12     	; 0x88c <_ZN5ClockC1Ev+0x42>
     898:	e4 ef       	ldi	r30, 0xF4	; 244
     89a:	f2 e0       	ldi	r31, 0x02	; 2
     89c:	84 e1       	ldi	r24, 0x14	; 20
     89e:	93 e0       	ldi	r25, 0x03	; 3
     8a0:	11 92       	st	Z+, r1
     8a2:	11 92       	st	Z+, r1
     8a4:	8e 17       	cp	r24, r30
     8a6:	9f 07       	cpc	r25, r31
     8a8:	d9 f7       	brne	.-10     	; 0x8a0 <_ZN5ClockC1Ev+0x56>
     8aa:	78 94       	sei
     8ac:	08 95       	ret

000008ae <_Z7usecDlyi>:
}


void usecDly(int x) {
     8ae:	08 95       	ret

000008b0 <DdsInit>:

//
// DDS uses bits PB0 - PB2, PB5
//

void DdsInit(void) {
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	1f 92       	push	r1
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62

volatile uint8_t reg;

	reg = DDRB;
     8ba:	84 b1       	in	r24, 0x04	; 4
     8bc:	89 83       	std	Y+1, r24	; 0x01
	reg |= DDS_OUT_BITS;		// set Led pin to output
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	87 62       	ori	r24, 0x27	; 39
     8c2:	89 83       	std	Y+1, r24	; 0x01
	DDRB = reg;
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	84 b9       	out	0x04, r24	; 4

	reg = PORTB;
     8c8:	85 b1       	in	r24, 0x05	; 5
     8ca:	89 83       	std	Y+1, r24	; 0x01
	reg &= ~DDS_OUT_BITS;		
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	88 7d       	andi	r24, 0xD8	; 216
     8d0:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	85 b9       	out	0x05, r24	; 5
	Clock::delay(50);
	reg &= ~DDS_RST;
	PORTB = reg;
#endif

	reg |= W_CLK;
     8d6:	89 81       	ldd	r24, Y+1	; 0x01
     8d8:	81 60       	ori	r24, 0x01	; 1
     8da:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	85 b9       	out	0x05, r24	; 5

	reg &= ~ W_CLK;
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	8e 7f       	andi	r24, 0xFE	; 254
     8e4:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	85 b9       	out	0x05, r24	; 5

	reg |= FQUD_CLK;     // make sure we are in serial mode
     8ea:	89 81       	ldd	r24, Y+1	; 0x01
     8ec:	82 60       	ori	r24, 0x02	; 2
     8ee:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	85 b9       	out	0x05, r24	; 5
	
	reg &= ~FQUD_CLK;    
     8f4:	89 81       	ldd	r24, Y+1	; 0x01
     8f6:	8d 7f       	andi	r24, 0xFD	; 253
     8f8:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	85 b9       	out	0x05, r24	; 5
	
}
     8fe:	0f 90       	pop	r0
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <dds>:
// increment of 0x0E56043B.
// 



void dds(float fout) {
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	1f 92       	push	r1
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
float n;
uint32_t phaseInc;
int i;
volatile uint8_t temp;

	cli();
     910:	f8 94       	cli
//
// the ports need to be protected with a semaphore if we
// are going to make this code multi-tasking
//
	temp = PORTB;
     912:	25 b1       	in	r18, 0x05	; 5
     914:	29 83       	std	Y+1, r18	; 0x01
	temp &= ~DDS_OUT_BITS;
     916:	29 81       	ldd	r18, Y+1	; 0x01
     918:	28 7d       	andi	r18, 0xD8	; 216
     91a:	29 83       	std	Y+1, r18	; 0x01
	PORTB = temp;
     91c:	29 81       	ldd	r18, Y+1	; 0x01
     91e:	25 b9       	out	0x05, r18	; 5

	n = fout * (float)CNTS_PER_HZ;		// phase change per clock
	phaseInc = (uint32_t)n;
     920:	2f e5       	ldi	r18, 0x5F	; 95
     922:	30 e7       	ldi	r19, 0x70	; 112
     924:	49 e0       	ldi	r20, 0x09	; 9
     926:	52 e4       	ldi	r21, 0x42	; 66
     928:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
     92c:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixunssfsi>
     930:	40 e2       	ldi	r20, 0x20	; 32
     932:	50 e0       	ldi	r21, 0x00	; 0

	for (i=0;i<32;i++) {

		if (phaseInc & 0x01) {
			temp |= SD;
     934:	29 81       	ldd	r18, Y+1	; 0x01
	n = fout * (float)CNTS_PER_HZ;		// phase change per clock
	phaseInc = (uint32_t)n;

	for (i=0;i<32;i++) {

		if (phaseInc & 0x01) {
     936:	60 ff       	sbrs	r22, 0
     938:	02 c0       	rjmp	.+4      	; 0x93e <dds+0x38>
			temp |= SD;
     93a:	24 60       	ori	r18, 0x04	; 4
     93c:	01 c0       	rjmp	.+2      	; 0x940 <dds+0x3a>
    } else {
			temp &= ~SD;
     93e:	2b 7f       	andi	r18, 0xFB	; 251
     940:	29 83       	std	Y+1, r18	; 0x01
		}            
		PORTB = temp;								// data bit
     942:	29 81       	ldd	r18, Y+1	; 0x01
     944:	25 b9       	out	0x05, r18	; 5

		temp |= W_CLK;					// set clk
     946:	29 81       	ldd	r18, Y+1	; 0x01
     948:	21 60       	ori	r18, 0x01	; 1
     94a:	29 83       	std	Y+1, r18	; 0x01
		PORTB = temp;
     94c:	29 81       	ldd	r18, Y+1	; 0x01
     94e:	25 b9       	out	0x05, r18	; 5
		temp &= ~W_CLK;					// clear clk
     950:	29 81       	ldd	r18, Y+1	; 0x01
     952:	2e 7f       	andi	r18, 0xFE	; 254
     954:	29 83       	std	Y+1, r18	; 0x01
		PORTB = temp;	
     956:	29 81       	ldd	r18, Y+1	; 0x01
     958:	25 b9       	out	0x05, r18	; 5

		phaseInc = phaseInc >> 1;		// shift next data bit to msb
     95a:	96 95       	lsr	r25
     95c:	87 95       	ror	r24
     95e:	77 95       	ror	r23
     960:	67 95       	ror	r22
     962:	41 50       	subi	r20, 0x01	; 1
     964:	51 09       	sbc	r21, r1
	PORTB = temp;

	n = fout * (float)CNTS_PER_HZ;		// phase change per clock
	phaseInc = (uint32_t)n;

	for (i=0;i<32;i++) {
     966:	31 f7       	brne	.-52     	; 0x934 <dds+0x2e>
		PORTB = temp;	

		phaseInc = phaseInc >> 1;		// shift next data bit to msb
	}

	temp &= ~SD;
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	8b 7f       	andi	r24, 0xFB	; 251
     96c:	89 83       	std	Y+1, r24	; 0x01
	PORTB = temp;								// data bit
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	85 b9       	out	0x05, r24	; 5
     972:	88 e0       	ldi	r24, 0x08	; 8
     974:	90 e0       	ldi	r25, 0x00	; 0
	for (i=0;i<8;i++) {
		temp |= W_CLK;					// set clk
     976:	29 81       	ldd	r18, Y+1	; 0x01
     978:	21 60       	ori	r18, 0x01	; 1
     97a:	29 83       	std	Y+1, r18	; 0x01
		PORTB = temp;
     97c:	29 81       	ldd	r18, Y+1	; 0x01
     97e:	25 b9       	out	0x05, r18	; 5
		temp &= ~W_CLK;					// clear clk
     980:	29 81       	ldd	r18, Y+1	; 0x01
     982:	2e 7f       	andi	r18, 0xFE	; 254
     984:	29 83       	std	Y+1, r18	; 0x01
		PORTB = temp;
     986:	29 81       	ldd	r18, Y+1	; 0x01
     988:	25 b9       	out	0x05, r18	; 5
     98a:	01 97       	sbiw	r24, 0x01	; 1
		phaseInc = phaseInc >> 1;		// shift next data bit to msb
	}

	temp &= ~SD;
	PORTB = temp;								// data bit
	for (i=0;i<8;i++) {
     98c:	a1 f7       	brne	.-24     	; 0x976 <dds+0x70>
		temp &= ~W_CLK;					// clear clk
		PORTB = temp;

	}

	temp |= FQUD_CLK;            // Load the phase accumulator
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	82 60       	ori	r24, 0x02	; 2
     992:	89 83       	std	Y+1, r24	; 0x01
	PORTB = temp;
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	85 b9       	out	0x05, r24	; 5

	temp &= ~FQUD_CLK;            // transfer shift reg to phase accumulator
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	8d 7f       	andi	r24, 0xFD	; 253
     99c:	89 83       	std	Y+1, r24	; 0x01
	PORTB = temp;
     99e:	89 81       	ldd	r24, Y+1	; 0x01
     9a0:	85 b9       	out	0x05, r24	; 5

	sei();
     9a2:	78 94       	sei
}
     9a4:	0f 90       	pop	r0
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <_ZN11ElapsedTime8callbackEv>:
	ticks = 0;
	Clock::registerPeriodic(this);
}


void ElapsedTime::callback(void) {
     9ac:	fc 01       	movw	r30, r24
	ticks++;
     9ae:	83 81       	ldd	r24, Z+3	; 0x03
     9b0:	8f 5f       	subi	r24, 0xFF	; 255
     9b2:	83 83       	std	Z+3, r24	; 0x03
	if (ticks >= numTicks) {
     9b4:	94 81       	ldd	r25, Z+4	; 0x04
     9b6:	89 17       	cp	r24, r25
     9b8:	20 f0       	brcs	.+8      	; 0x9c2 <_ZN11ElapsedTime8callbackEv+0x16>
		ticks = 0;
     9ba:	13 82       	std	Z+3, r1	; 0x03
		event++;
     9bc:	82 81       	ldd	r24, Z+2	; 0x02
     9be:	8f 5f       	subi	r24, 0xFF	; 255
     9c0:	82 83       	std	Z+2, r24	; 0x02
     9c2:	08 95       	ret

000009c4 <_ZN11ElapsedTimeC1Eh>:
#include <avr/interrupt.h>

#include "clock.h"
#include "ElapsedTime.h"
 
ElapsedTime::ElapsedTime(uint8_t nt) {
     9c4:	26 e3       	ldi	r18, 0x36	; 54
     9c6:	32 e0       	ldi	r19, 0x02	; 2
     9c8:	fc 01       	movw	r30, r24
     9ca:	31 83       	std	Z+1, r19	; 0x01
     9cc:	20 83       	st	Z, r18
	event = 0;
     9ce:	12 82       	std	Z+2, r1	; 0x02
	numTicks = nt;
     9d0:	64 83       	std	Z+4, r22	; 0x04
	ticks = 0;
     9d2:	13 82       	std	Z+3, r1	; 0x03
	Clock::registerPeriodic(this);
     9d4:	0c 94 0a 04 	jmp	0x814	; 0x814 <_ZN5Clock16registerPeriodicEP8Callback>

000009d8 <_ZN11ElapsedTime7expiredEv>:
	}
}


bool ElapsedTime:: expired(void) {
	if (event) {
     9d8:	fc 01       	movw	r30, r24
     9da:	22 81       	ldd	r18, Z+2	; 0x02
     9dc:	22 23       	and	r18, r18
     9de:	19 f0       	breq	.+6      	; 0x9e6 <_ZN11ElapsedTime7expiredEv+0xe>
		event = 0;
     9e0:	12 82       	std	Z+2, r1	; 0x02
		return true;
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	08 95       	ret
	}
	return false;
     9e6:	80 e0       	ldi	r24, 0x00	; 0
}
     9e8:	08 95       	ret

000009ea <_ZN7EncoderC1Ehhh>:
#include "clock.h"
#include "sw.h"
#include "Encoder.h"


Encoder::Encoder(uint8_t a, uint8_t b, uint8_t port) {
     9ea:	bf 92       	push	r11
     9ec:	cf 92       	push	r12
     9ee:	df 92       	push	r13
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	ec 01       	movw	r28, r24
     9fe:	b6 2e       	mov	r11, r22
     a00:	c4 2e       	mov	r12, r20
     a02:	d2 2e       	mov	r13, r18
     a04:	8c e3       	ldi	r24, 0x3C	; 60
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	99 83       	std	Y+1, r25	; 0x01
     a0a:	88 83       	st	Y, r24

	eventRate = 4;				// default 4 pulses per cycle
     a0c:	04 e0       	ldi	r16, 0x04	; 4
     a0e:	10 e0       	ldi	r17, 0x00	; 0
     a10:	1e 87       	std	Y+14, r17	; 0x0e
     a12:	0d 87       	std	Y+13, r16	; 0x0d
	encA = new Sw(a, port);
     a14:	8b e0       	ldi	r24, 0x0B	; 11
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_Znwj>
     a1c:	7c 01       	movw	r14, r24
     a1e:	4d 2d       	mov	r20, r13
     a20:	6b 2d       	mov	r22, r11
     a22:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <_ZN2SwC1Ehh>
     a26:	fb 82       	std	Y+3, r15	; 0x03
     a28:	ea 82       	std	Y+2, r14	; 0x02
	encB = new Sw(b, port);
     a2a:	8b e0       	ldi	r24, 0x0B	; 11
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_Znwj>
     a32:	7c 01       	movw	r14, r24
     a34:	4d 2d       	mov	r20, r13
     a36:	6c 2d       	mov	r22, r12
     a38:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <_ZN2SwC1Ehh>
     a3c:	fd 82       	std	Y+5, r15	; 0x05
     a3e:	ec 82       	std	Y+4, r14	; 0x04
		
	if (encA->isClosed()) {
     a40:	8a 81       	ldd	r24, Y+2	; 0x02
     a42:	9b 81       	ldd	r25, Y+3	; 0x03
     a44:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN2Sw8isClosedEv>
     a48:	2c 81       	ldd	r18, Y+4	; 0x04
     a4a:	3d 81       	ldd	r19, Y+5	; 0x05
     a4c:	88 23       	and	r24, r24
     a4e:	69 f0       	breq	.+26     	; 0xa6a <_ZN7EncoderC1Ehhh+0x80>
		if (encB->isClosed()) {
     a50:	c9 01       	movw	r24, r18
     a52:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN2Sw8isClosedEv>
     a56:	88 23       	and	r24, r24
     a58:	19 f0       	breq	.+6      	; 0xa60 <_ZN7EncoderC1Ehhh+0x76>
			curState = 2;
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <_ZN7EncoderC1Ehhh+0x7a>
			} else {
			curState = 1;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	9f 83       	std	Y+7, r25	; 0x07
     a66:	8e 83       	std	Y+6, r24	; 0x06
     a68:	0a c0       	rjmp	.+20     	; 0xa7e <_ZN7EncoderC1Ehhh+0x94>
		}
		} else {
		if (encB->isClosed()) {
     a6a:	c9 01       	movw	r24, r18
     a6c:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN2Sw8isClosedEv>
     a70:	88 23       	and	r24, r24
     a72:	19 f0       	breq	.+6      	; 0xa7a <_ZN7EncoderC1Ehhh+0x90>
			curState = 4;
     a74:	1f 83       	std	Y+7, r17	; 0x07
     a76:	0e 83       	std	Y+6, r16	; 0x06
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <_ZN7EncoderC1Ehhh+0x94>
			} else {
			curState = 0;
     a7a:	1f 82       	std	Y+7, r1	; 0x07
     a7c:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	lastEvent = ENC_NO_EVENT;
     a7e:	18 86       	std	Y+8, r1	; 0x08
	Clock::registerPeriodic(this);
     a80:	ce 01       	movw	r24, r28
     a82:	0e 94 0a 04 	call	0x814	; 0x814 <_ZN5Clock16registerPeriodicEP8Callback>
	missedCwCount = 0;
     a86:	1a 86       	std	Y+10, r1	; 0x0a
     a88:	19 86       	std	Y+9, r1	; 0x09
	missedCcwCount = 0;
     a8a:	1c 86       	std	Y+12, r1	; 0x0c
     a8c:	1b 86       	std	Y+11, r1	; 0x0b
}
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	cf 90       	pop	r12
     a9e:	bf 90       	pop	r11
     aa0:	08 95       	ret

00000aa2 <_ZN7Encoder6updateEv>:
// ccw event. 
//
// This algorithm produces 4 events per encoder a/b cycle.  For
// a 2 event case, use only encoder a events/
//
void Encoder::update(void) {
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	ec 01       	movw	r28, r24

	encEvent nxtEvent = ENC_NO_EVENT;

	if ( !encA->hasEvent() && !encB->hasEvent() ){
     aaa:	8a 81       	ldd	r24, Y+2	; 0x02
     aac:	9b 81       	ldd	r25, Y+3	; 0x03
     aae:	0e 94 38 10 	call	0x2070	; 0x2070 <_ZN2Sw8hasEventEv>
     ab2:	81 11       	cpse	r24, r1
     ab4:	07 c0       	rjmp	.+14     	; 0xac4 <_ZN7Encoder6updateEv+0x22>
     ab6:	8c 81       	ldd	r24, Y+4	; 0x04
     ab8:	9d 81       	ldd	r25, Y+5	; 0x05
     aba:	0e 94 38 10 	call	0x2070	; 0x2070 <_ZN2Sw8hasEventEv>
     abe:	88 23       	and	r24, r24
     ac0:	09 f4       	brne	.+2      	; 0xac4 <_ZN7Encoder6updateEv+0x22>
     ac2:	5f c0       	rjmp	.+190    	; 0xb82 <_ZN7Encoder6updateEv+0xe0>
		return;
	}

	if (encA->getEvent() == EV_CLOSE) {
     ac4:	8a 81       	ldd	r24, Y+2	; 0x02
     ac6:	9b 81       	ldd	r25, Y+3	; 0x03
     ac8:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN2Sw8getEventEv>
     acc:	2c 81       	ldd	r18, Y+4	; 0x04
     ace:	3d 81       	ldd	r19, Y+5	; 0x05
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	39 f4       	brne	.+14     	; 0xae2 <_ZN7Encoder6updateEv+0x40>
		if (encB->isClosed()) {
     ad4:	c9 01       	movw	r24, r18
     ad6:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN2Sw8isClosedEv>
     ada:	81 11       	cpse	r24, r1
     adc:	1d c0       	rjmp	.+58     	; 0xb18 <_ZN7Encoder6updateEv+0x76>
			nxtEvent = ENC_CCW_EVENT;
		} else {
			nxtEvent = ENC_CW_EVENT;
     ade:	11 e0       	ldi	r17, 0x01	; 1
     ae0:	27 c0       	rjmp	.+78     	; 0xb30 <_ZN7Encoder6updateEv+0x8e>
		}
		 
	} else if ( (encB->getEvent() == EV_CLOSE) && (eventRate == 4))  {
     ae2:	c9 01       	movw	r24, r18
     ae4:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN2Sw8getEventEv>
     ae8:	2a 81       	ldd	r18, Y+2	; 0x02
     aea:	3b 81       	ldd	r19, Y+3	; 0x03
     aec:	82 30       	cpi	r24, 0x02	; 2
     aee:	21 f4       	brne	.+8      	; 0xaf8 <_ZN7Encoder6updateEv+0x56>
     af0:	8d 85       	ldd	r24, Y+13	; 0x0d
     af2:	9e 85       	ldd	r25, Y+14	; 0x0e
     af4:	04 97       	sbiw	r24, 0x04	; 4
     af6:	59 f0       	breq	.+22     	; 0xb0e <_ZN7Encoder6updateEv+0x6c>
			nxtEvent = ENC_CW_EVENT;
		} else {
			nxtEvent = ENC_CCW_EVENT;
		}

	} else if ( (encA->getEvent() == EV_OPEN) && (eventRate != 1)) {
     af8:	c9 01       	movw	r24, r18
     afa:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN2Sw8getEventEv>
     afe:	2c 81       	ldd	r18, Y+4	; 0x04
     b00:	3d 81       	ldd	r19, Y+5	; 0x05
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	59 f4       	brne	.+22     	; 0xb1c <_ZN7Encoder6updateEv+0x7a>
     b06:	8d 85       	ldd	r24, Y+13	; 0x0d
     b08:	9e 85       	ldd	r25, Y+14	; 0x0e
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	39 f0       	breq	.+14     	; 0xb1c <_ZN7Encoder6updateEv+0x7a>
		if (encB->isClosed()) {
     b0e:	c9 01       	movw	r24, r18
     b10:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN2Sw8isClosedEv>
     b14:	81 11       	cpse	r24, r1
     b16:	e3 cf       	rjmp	.-58     	; 0xade <_ZN7Encoder6updateEv+0x3c>
		 
	} else if ( (encB->getEvent() == EV_CLOSE) && (eventRate == 4))  {
		if (encA->isClosed()) {
			nxtEvent = ENC_CW_EVENT;
		} else {
			nxtEvent = ENC_CCW_EVENT;
     b18:	12 e0       	ldi	r17, 0x02	; 2
     b1a:	0a c0       	rjmp	.+20     	; 0xb30 <_ZN7Encoder6updateEv+0x8e>
			nxtEvent = ENC_CW_EVENT;
		} else {
			nxtEvent = ENC_CCW_EVENT;
		}

	} else if ( (encB->getEvent() == EV_OPEN) && (eventRate == 4) ) {
     b1c:	c9 01       	movw	r24, r18
     b1e:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN2Sw8getEventEv>
     b22:	81 30       	cpi	r24, 0x01	; 1
     b24:	21 f4       	brne	.+8      	; 0xb2e <_ZN7Encoder6updateEv+0x8c>
     b26:	8d 85       	ldd	r24, Y+13	; 0x0d
     b28:	9e 85       	ldd	r25, Y+14	; 0x0e
     b2a:	04 97       	sbiw	r24, 0x04	; 4
     b2c:	39 f1       	breq	.+78     	; 0xb7c <_ZN7Encoder6updateEv+0xda>
// This algorithm produces 4 events per encoder a/b cycle.  For
// a 2 event case, use only encoder a events/
//
void Encoder::update(void) {

	encEvent nxtEvent = ENC_NO_EVENT;
     b2e:	10 e0       	ldi	r17, 0x00	; 0
			nxtEvent = ENC_CW_EVENT;
		}

	}

	encA->clearEvent();
     b30:	8a 81       	ldd	r24, Y+2	; 0x02
     b32:	9b 81       	ldd	r25, Y+3	; 0x03
     b34:	0e 94 43 10 	call	0x2086	; 0x2086 <_ZN2Sw10clearEventEv>
	encB->clearEvent();
     b38:	8c 81       	ldd	r24, Y+4	; 0x04
     b3a:	9d 81       	ldd	r25, Y+5	; 0x05
     b3c:	0e 94 43 10 	call	0x2086	; 0x2086 <_ZN2Sw10clearEventEv>

	//
	// process new event if any
	//
	if (nxtEvent == ENC_NO_EVENT) {
     b40:	11 23       	and	r17, r17
     b42:	f9 f0       	breq	.+62     	; 0xb82 <_ZN7Encoder6updateEv+0xe0>
     b44:	88 85       	ldd	r24, Y+8	; 0x08
		return;
	} else if (nxtEvent == ENC_CW_EVENT) {		// handle overrun
     b46:	11 30       	cpi	r17, 0x01	; 1
     b48:	61 f4       	brne	.+24     	; 0xb62 <_ZN7Encoder6updateEv+0xc0>
		if (nxtEvent == lastEvent) {
     b4a:	81 30       	cpi	r24, 0x01	; 1
     b4c:	31 f4       	brne	.+12     	; 0xb5a <_ZN7Encoder6updateEv+0xb8>
			missedCwCount++;
     b4e:	89 85       	ldd	r24, Y+9	; 0x09
     b50:	9a 85       	ldd	r25, Y+10	; 0x0a
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	9a 87       	std	Y+10, r25	; 0x0a
     b56:	89 87       	std	Y+9, r24	; 0x09
     b58:	14 c0       	rjmp	.+40     	; 0xb82 <_ZN7Encoder6updateEv+0xe0>
		} else {
			missedCwCount = 0;
     b5a:	1a 86       	std	Y+10, r1	; 0x0a
     b5c:	19 86       	std	Y+9, r1	; 0x09
			lastEvent = nxtEvent;
     b5e:	18 87       	std	Y+8, r17	; 0x08
     b60:	10 c0       	rjmp	.+32     	; 0xb82 <_ZN7Encoder6updateEv+0xe0>
		}
	} else {
		if (nxtEvent == lastEvent) {
     b62:	82 30       	cpi	r24, 0x02	; 2
     b64:	31 f4       	brne	.+12     	; 0xb72 <_ZN7Encoder6updateEv+0xd0>
			missedCcwCount++;
     b66:	8b 85       	ldd	r24, Y+11	; 0x0b
     b68:	9c 85       	ldd	r25, Y+12	; 0x0c
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	9c 87       	std	Y+12, r25	; 0x0c
     b6e:	8b 87       	std	Y+11, r24	; 0x0b
     b70:	08 c0       	rjmp	.+16     	; 0xb82 <_ZN7Encoder6updateEv+0xe0>
		} else {
			missedCcwCount = 0;
     b72:	1c 86       	std	Y+12, r1	; 0x0c
     b74:	1b 86       	std	Y+11, r1	; 0x0b
			lastEvent = nxtEvent;
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	88 87       	std	Y+8, r24	; 0x08
     b7a:	03 c0       	rjmp	.+6      	; 0xb82 <_ZN7Encoder6updateEv+0xe0>
		} else {
			nxtEvent = ENC_CCW_EVENT;
		}

	} else if ( (encB->getEvent() == EV_OPEN) && (eventRate == 4) ) {
		if (encA->isClosed()) {
     b7c:	8a 81       	ldd	r24, Y+2	; 0x02
     b7e:	9b 81       	ldd	r25, Y+3	; 0x03
     b80:	aa cf       	rjmp	.-172    	; 0xad6 <_ZN7Encoder6updateEv+0x34>
		} else {
			missedCcwCount = 0;
			lastEvent = nxtEvent;
		}
	}
}
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	08 95       	ret

00000b8a <_ZN7Encoder8callbackEv>:
	lastEvent = ENC_NO_EVENT;
}


void Encoder::callback(void) {
	update();
     b8a:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <_ZN7Encoder6updateEv>

00000b8e <_ZN7Encoder8hasEventEv>:
}



bool Encoder::hasEvent(void) {
	return (lastEvent != ENC_NO_EVENT);
     b8e:	21 e0       	ldi	r18, 0x01	; 1
     b90:	fc 01       	movw	r30, r24
     b92:	80 85       	ldd	r24, Z+8	; 0x08
     b94:	81 11       	cpse	r24, r1
     b96:	01 c0       	rjmp	.+2      	; 0xb9a <_ZN7Encoder8hasEventEv+0xc>
     b98:	20 e0       	ldi	r18, 0x00	; 0
}
     b9a:	82 2f       	mov	r24, r18
     b9c:	08 95       	ret

00000b9e <_ZN7Encoder8getEventEv>:


encEvent Encoder::getEvent(void) {
	return lastEvent;
}
     b9e:	fc 01       	movw	r30, r24
     ba0:	80 85       	ldd	r24, Z+8	; 0x08
     ba2:	08 95       	ret

00000ba4 <_ZN7Encoder10clearEventEv>:


void Encoder::clearEvent(void) {
	lastEvent = ENC_NO_EVENT;
     ba4:	fc 01       	movw	r30, r24
     ba6:	10 86       	std	Z+8, r1	; 0x08
     ba8:	08 95       	ret

00000baa <_ZN7Encoder16getMissedCwCountEv>:
void Encoder::callback(void) {
	update();
}


int Encoder::getMissedCwCount(void) {
     baa:	fc 01       	movw	r30, r24
	int result = missedCwCount;
     bac:	81 85       	ldd	r24, Z+9	; 0x09
     bae:	92 85       	ldd	r25, Z+10	; 0x0a
	missedCwCount = 0;
     bb0:	12 86       	std	Z+10, r1	; 0x0a
     bb2:	11 86       	std	Z+9, r1	; 0x09
	return result;
}
     bb4:	08 95       	ret

00000bb6 <_ZN7Encoder17getMissedCcwCountEv>:


int Encoder::getMissedCcwCount(void) {
     bb6:	fc 01       	movw	r30, r24
	int result = missedCcwCount;
     bb8:	83 85       	ldd	r24, Z+11	; 0x0b
     bba:	94 85       	ldd	r25, Z+12	; 0x0c
	missedCcwCount = 0;
     bbc:	14 86       	std	Z+12, r1	; 0x0c
     bbe:	13 86       	std	Z+11, r1	; 0x0b
	return result;
}
     bc0:	08 95       	ret

00000bc2 <_ZN7Encoder12setEventRateEh>:

void Encoder::setEventRate(uint8_t r) {
	eventRate = r;
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	fc 01       	movw	r30, r24
     bc6:	76 87       	std	Z+14, r23	; 0x0e
     bc8:	65 87       	std	Z+13, r22	; 0x0d
     bca:	08 95       	ret

00000bcc <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>:
 Draw character c at pixel position (y, x) with foreground color fc,
 *  background color bc, 
 *  node = 1 interpret y,x as a text line, col; 
 *       = 0 interpret y,x as a pixel line, col
 */
void Graphics::draw2xChar(char cc, uint8_t line, uint8_t col, pixColor fc, pixColor bc) {
     bcc:	8f 92       	push	r8
     bce:	9f 92       	push	r9
     bd0:	af 92       	push	r10
     bd2:	bf 92       	push	r11
     bd4:	cf 92       	push	r12
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	ec 97       	sbiw	r28, 0x3c	; 60
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	96 2e       	mov	r9, r22
     bf4:	14 2f       	mov	r17, r20

  ys = line;
  xs = col;
  ye = ys + (2*CHAR_HEIGHT) - 1;
  xe = xs + (2*CHAR_WIDTH) -1; 
  cli();
     bf6:	f8 94       	cli
  buf[0] = (xs >> 8) & 0xff;
     bf8:	19 82       	std	Y+1, r1	; 0x01
  buf[1] = (xs & 0xff);
     bfa:	2a 83       	std	Y+2, r18	; 0x02
  buf[2] = (xe >> 8) & 0xff;
     bfc:	1b 82       	std	Y+3, r1	; 0x03
  buf[3] = (xe & 0xff);
     bfe:	21 5f       	subi	r18, 0xF1	; 241
     c00:	2c 83       	std	Y+4, r18	; 0x04
  sendCmd(CMD_COL_ADDR_SET);
     c02:	8a e2       	ldi	r24, 0x2A	; 42
     c04:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN3Lcd7sendCmdEh>
  sendData(buf, 4);
     c08:	64 e0       	ldi	r22, 0x04	; 4
     c0a:	ce 01       	movw	r24, r28
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN3Lcd8sendDataEPhh>
  cmpltCmd();
     c12:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN3Lcd8cmpltCmdEv>
  
  buf[0] = (ys >> 8) & 0xff;
     c16:	19 82       	std	Y+1, r1	; 0x01
  buf[1] = (ys & 0xff);
     c18:	1a 83       	std	Y+2, r17	; 0x02
  buf[2] = (ye >> 8) & 0xff;
     c1a:	1b 82       	std	Y+3, r1	; 0x03
  buf[3] = (ye & 0xff);
     c1c:	19 5e       	subi	r17, 0xE9	; 233
     c1e:	1c 83       	std	Y+4, r17	; 0x04
  sendCmd(CMD_ROW_ADDR_SET);
     c20:	8b e2       	ldi	r24, 0x2B	; 43
     c22:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN3Lcd7sendCmdEh>
  sendData(buf, 4);
     c26:	64 e0       	ldi	r22, 0x04	; 4
     c28:	ce 01       	movw	r24, r28
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN3Lcd8sendDataEPhh>
  cmpltCmd();
     c30:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN3Lcd8cmpltCmdEv>

  _getPixels(cc, pixBuf); 
     c34:	be 01       	movw	r22, r28
     c36:	6f 5c       	subi	r22, 0xCF	; 207
     c38:	7f 4f       	sbci	r23, 0xFF	; 255
     c3a:	89 2d       	mov	r24, r9
     c3c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_getPixels>

  sendCmd(CMD_MEM_WRITE);
     c40:	8c e2       	ldi	r24, 0x2C	; 44
     c42:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN3Lcd7sendCmdEh>
  
  for (int i=0; i< CHAR_HEIGHT*2; i++) {
     c46:	81 2c       	mov	r8, r1
     c48:	91 2c       	mov	r9, r1
    bufIndx = 0;
    uint8_t pixels = pixBuf[i/2];
     c4a:	f4 01       	movw	r30, r8
     c4c:	f5 95       	asr	r31
     c4e:	e7 95       	ror	r30
     c50:	81 e3       	ldi	r24, 0x31	; 49
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	8c 0f       	add	r24, r28
     c56:	9d 1f       	adc	r25, r29
     c58:	e8 0f       	add	r30, r24
     c5a:	f9 1f       	adc	r31, r25
     c5c:	90 81       	ld	r25, Z
     c5e:	fe 01       	movw	r30, r28
     c60:	31 96       	adiw	r30, 0x01	; 1
     c62:	86 e0       	ldi	r24, 0x06	; 6
    for (int j=0; j< CHAR_WIDTH; j++) {
      if (pixels & 0x01) {                // font table assumes right to left scan 
     c64:	90 ff       	sbrs	r25, 0
     c66:	07 c0       	rjmp	.+14     	; 0xc76 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0xaa>
        buf[bufIndx++] = fc.r;
     c68:	e0 82       	st	Z, r14
        buf[bufIndx++] = fc.g;
     c6a:	f1 82       	std	Z+1, r15	; 0x01
        buf[bufIndx++] = fc.b;
     c6c:	02 83       	std	Z+2, r16	; 0x02
        buf[bufIndx++] = fc.r;
     c6e:	e3 82       	std	Z+3, r14	; 0x03
        buf[bufIndx++] = fc.g;
     c70:	f4 82       	std	Z+4, r15	; 0x04
        buf[bufIndx++] = fc.b;
     c72:	05 83       	std	Z+5, r16	; 0x05
     c74:	06 c0       	rjmp	.+12     	; 0xc82 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0xb6>

      } else {
        buf[bufIndx++] = bc.r;
     c76:	a0 82       	st	Z, r10
        buf[bufIndx++] = bc.g;
     c78:	b1 82       	std	Z+1, r11	; 0x01
        buf[bufIndx++] = bc.b;
     c7a:	c2 82       	std	Z+2, r12	; 0x02
        buf[bufIndx++] = bc.r;
     c7c:	a3 82       	std	Z+3, r10	; 0x03
        buf[bufIndx++] = bc.g;
     c7e:	b4 82       	std	Z+4, r11	; 0x04
        buf[bufIndx++] = bc.b;
     c80:	c5 82       	std	Z+5, r12	; 0x05
      }
      pixels >>= 1;   
     c82:	96 95       	lsr	r25
     c84:	8a 5f       	subi	r24, 0xFA	; 250
     c86:	36 96       	adiw	r30, 0x06	; 6
  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< CHAR_HEIGHT*2; i++) {
    bufIndx = 0;
    uint8_t pixels = pixBuf[i/2];
    for (int j=0; j< CHAR_WIDTH; j++) {
     c88:	86 33       	cpi	r24, 0x36	; 54
     c8a:	61 f7       	brne	.-40     	; 0xc64 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x98>
        buf[bufIndx++] = bc.g;
        buf[bufIndx++] = bc.b;
      }
      pixels >>= 1;   
    }
    sendData(buf,bufIndx);
     c8c:	60 e3       	ldi	r22, 0x30	; 48
     c8e:	ce 01       	movw	r24, r28
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN3Lcd8sendDataEPhh>

  _getPixels(cc, pixBuf); 

  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< CHAR_HEIGHT*2; i++) {
     c96:	9f ef       	ldi	r25, 0xFF	; 255
     c98:	89 1a       	sub	r8, r25
     c9a:	99 0a       	sbc	r9, r25
     c9c:	88 e1       	ldi	r24, 0x18	; 24
     c9e:	88 16       	cp	r8, r24
     ca0:	91 04       	cpc	r9, r1
     ca2:	99 f6       	brne	.-90     	; 0xc4a <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x7e>
      }
      pixels >>= 1;   
    }
    sendData(buf,bufIndx);
  }
  cmpltCmd();
     ca4:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN3Lcd8cmpltCmdEv>
  sei();
     ca8:	78 94       	sei
}
     caa:	ec 96       	adiw	r28, 0x3c	; 60
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	cf 90       	pop	r12
     cc4:	bf 90       	pop	r11
     cc6:	af 90       	pop	r10
     cc8:	9f 90       	pop	r9
     cca:	8f 90       	pop	r8
     ccc:	08 95       	ret

00000cce <_Z6mymainv>:




// my main, called from loop
void mymain(void) {
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	e3 97       	sbiw	r28, 0x33	; 51
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61

volatile uint8_t reg;

Clock *cl = new Clock();
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_Znwj>
     cea:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN5ClockC1Ev>

#ifndef LCD_TT
Led *led = new Led();
#endif

Lcd *l = new Lcd();
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_Znwj>
     cf6:	99 a3       	std	Y+33, r25	; 0x21
     cf8:	88 a3       	std	Y+32, r24	; 0x20
     cfa:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN3LcdC1Ev>
Graphics *g = new Graphics();
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_Znwj>
     d06:	9b 8f       	std	Y+27, r25	; 0x1b
     d08:	8a 8f       	std	Y+26, r24	; 0x1a
#ifndef GRAPHICS_H_
#define GRAPHICS_H_

#include "lcd.h"

class Graphics : public Lcd {
     d0a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN3LcdC1Ev>

int pass = 0;
pixColor  f = {0xfc,0x0,0x0};
pixColor  b = {0xfc,0xfc,0xfc};
     d0e:	20 90 2c 02 	lds	r2, 0x022C	; 0x80022c <vfoDataConst+0xa2>
     d12:	30 90 2d 02 	lds	r3, 0x022D	; 0x80022d <vfoDataConst+0xa3>
     d16:	40 90 2e 02 	lds	r4, 0x022E	; 0x80022e <vfoDataConst+0xa4>
pixColor  fg_grey = {0x7c,0x7c,0x7c};
     d1a:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <vfoDataConst+0xa5>
     d1e:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <vfoDataConst+0xa6>
     d22:	a0 91 31 02 	lds	r26, 0x0231	; 0x800231 <vfoDataConst+0xa7>
     d26:	8e a7       	std	Y+46, r24	; 0x2e
     d28:	9f a7       	std	Y+47, r25	; 0x2f
     d2a:	a8 ab       	std	Y+48, r26	; 0x30
  stdout = stdin = &uart_str;
  stderr = &uart_str;
  printf("main: Starting loop\n");
#endif

	DdsInit();
     d2c:	0e 94 58 04 	call	0x8b0	; 0x8b0 <DdsInit>
	// init RLY as output, 
	reg = DDRD;
     d30:	8a b1       	in	r24, 0x0a	; 10
     d32:	8d 8b       	std	Y+21, r24	; 0x15
	DDRD = reg | RLY_MSK;
     d34:	8d 89       	ldd	r24, Y+21	; 0x15
     d36:	80 64       	ori	r24, 0x40	; 64
     d38:	8a b9       	out	0x0a, r24	; 10

	reg = PORTD;
     d3a:	8b b1       	in	r24, 0x0b	; 11
     d3c:	8d 8b       	std	Y+21, r24	; 0x15
	PORTD = reg & ~RLY_MSK;
     d3e:	8d 89       	ldd	r24, Y+21	; 0x15
     d40:	8f 7b       	andi	r24, 0xBF	; 191
     d42:	8b b9       	out	0x0b, r24	; 11
	 
	Sw *dot = new Sw(DOT, PORTC_ADR);
     d44:	8b e0       	ldi	r24, 0x0B	; 11
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_Znwj>
     d4c:	9a a7       	std	Y+42, r25	; 0x2a
     d4e:	89 a7       	std	Y+41, r24	; 0x29
     d50:	48 e2       	ldi	r20, 0x28	; 40
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <_ZN2SwC1Ehh>
	Sw *dash = new Sw(DASH, PORTC_ADR);
     d58:	8b e0       	ldi	r24, 0x0B	; 11
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_Znwj>
     d60:	9c a7       	std	Y+44, r25	; 0x2c
     d62:	8b a7       	std	Y+43, r24	; 0x2b
     d64:	48 e2       	ldi	r20, 0x28	; 40
     d66:	63 e0       	ldi	r22, 0x03	; 3
     d68:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <_ZN2SwC1Ehh>
	Sw *pb = new Sw(PB, PORTD_ADR);
     d6c:	8b e0       	ldi	r24, 0x0B	; 11
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_Znwj>
     d74:	9d 8f       	std	Y+29, r25	; 0x1d
     d76:	8c 8f       	std	Y+28, r24	; 0x1c
     d78:	4b e2       	ldi	r20, 0x2B	; 43
     d7a:	67 e0       	ldi	r22, 0x07	; 7
     d7c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <_ZN2SwC1Ehh>
	ElapsedTime *et = new ElapsedTime(100);
     d80:	85 e0       	ldi	r24, 0x05	; 5
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_Znwj>
     d88:	9a ab       	std	Y+50, r25	; 0x32
     d8a:	89 ab       	std	Y+49, r24	; 0x31
     d8c:	64 e6       	ldi	r22, 0x64	; 100
     d8e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZN11ElapsedTimeC1Eh>
	Encoder *enc = new Encoder(ENCA, ENCB, PORTB_ADR);
     d92:	8f e0       	ldi	r24, 0x0F	; 15
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_Znwj>
     d9a:	9f 8f       	std	Y+31, r25	; 0x1f
     d9c:	8e 8f       	std	Y+30, r24	; 0x1e
     d9e:	25 e2       	ldi	r18, 0x25	; 37
     da0:	44 e0       	ldi	r20, 0x04	; 4
     da2:	63 e0       	ldi	r22, 0x03	; 3
     da4:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_ZN7EncoderC1Ehhh>

	band_t band = BAND_40;
	vfo *vfoA = new vfo(enc, vfoDataConst, VFOA_LINE);
     da8:	8b ea       	ldi	r24, 0xAB	; 171
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_Znwj>
     db0:	8b a3       	std	Y+35, r24	; 0x23
     db2:	9c a3       	std	Y+36, r25	; 0x24
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	4a e8       	ldi	r20, 0x8A	; 138
     dba:	51 e0       	ldi	r21, 0x01	; 1
     dbc:	6e 8d       	ldd	r22, Y+30	; 0x1e
     dbe:	7f 8d       	ldd	r23, Y+31	; 0x1f
     dc0:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN3vfoC1EP7EncoderP13vfoParametersj>
	vfo *vfoB = new vfo(enc, vfoDataConst, VFOB_LINE);
     dc4:	8b ea       	ldi	r24, 0xAB	; 171
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_Znwj>
     dcc:	8d a3       	std	Y+37, r24	; 0x25
     dce:	9e a3       	std	Y+38, r25	; 0x26
     dd0:	24 e2       	ldi	r18, 0x24	; 36
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	4a e8       	ldi	r20, 0x8A	; 138
     dd6:	51 e0       	ldi	r21, 0x01	; 1
     dd8:	6e 8d       	ldd	r22, Y+30	; 0x1e
     dda:	7f 8d       	ldd	r23, Y+31	; 0x1f
     ddc:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN3vfoC1EP7EncoderP13vfoParametersj>

	vfoA->getTxDisplayFreq(buf, band);
     de0:	42 e0       	ldi	r20, 0x02	; 2
     de2:	fe 01       	movw	r30, r28
     de4:	31 96       	adiw	r30, 0x01	; 1
     de6:	3f 01       	movw	r6, r30
     de8:	bf 01       	movw	r22, r30
     dea:	8b a1       	ldd	r24, Y+35	; 0x23
     dec:	9c a1       	ldd	r25, Y+36	; 0x24
     dee:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN3vfo16getTxDisplayFreqEPc5_band>
     df2:	79 8e       	std	Y+25, r7	; 0x19
     df4:	68 8e       	std	Y+24, r6	; 0x18
     df6:	10 e0       	ldi	r17, 0x00	; 0
	for (size_t i = 0; i < strlen(buf); i++) {
     df8:	43 01       	movw	r8, r6
     dfa:	f4 01       	movw	r30, r8
     dfc:	01 90       	ld	r0, Z+
     dfe:	00 20       	and	r0, r0
     e00:	e9 f7       	brne	.-6      	; 0xdfc <_Z6mymainv+0x12e>
     e02:	31 97       	sbiw	r30, 0x01	; 1
     e04:	e8 19       	sub	r30, r8
     e06:	f9 09       	sbc	r31, r9
     e08:	88 8d       	ldd	r24, Y+24	; 0x18
     e0a:	99 8d       	ldd	r25, Y+25	; 0x19
     e0c:	86 19       	sub	r24, r6
     e0e:	97 09       	sbc	r25, r7
     e10:	8e 17       	cp	r24, r30
     e12:	9f 07       	cpc	r25, r31
     e14:	98 f4       	brcc	.+38     	; 0xe3c <_Z6mymainv+0x16e>
		g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
     e16:	e8 8d       	ldd	r30, Y+24	; 0x18
     e18:	f9 8d       	ldd	r31, Y+25	; 0x19
     e1a:	61 91       	ld	r22, Z+
     e1c:	f9 8f       	std	Y+25, r31	; 0x19
     e1e:	e8 8f       	std	Y+24, r30	; 0x18
     e20:	c4 2c       	mov	r12, r4
     e22:	51 01       	movw	r10, r2
     e24:	3c ef       	ldi	r19, 0xFC	; 252
     e26:	e3 2e       	mov	r14, r19
     e28:	f1 2c       	mov	r15, r1
     e2a:	00 e0       	ldi	r16, 0x00	; 0
     e2c:	21 2f       	mov	r18, r17
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e32:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e34:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
     e38:	10 5f       	subi	r17, 0xF0	; 240
	band_t band = BAND_40;
	vfo *vfoA = new vfo(enc, vfoDataConst, VFOA_LINE);
	vfo *vfoB = new vfo(enc, vfoDataConst, VFOB_LINE);

	vfoA->getTxDisplayFreq(buf, band);
	for (size_t i = 0; i < strlen(buf); i++) {
     e3a:	df cf       	rjmp	.-66     	; 0xdfa <_Z6mymainv+0x12c>
		g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
	}

	vfoB->getTxDisplayFreq(buf, band);
     e3c:	42 e0       	ldi	r20, 0x02	; 2
     e3e:	b4 01       	movw	r22, r8
     e40:	8d a1       	ldd	r24, Y+37	; 0x25
     e42:	9e a1       	ldd	r25, Y+38	; 0x26
     e44:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN3vfo16getTxDisplayFreqEPc5_band>
     e48:	43 01       	movw	r8, r6
     e4a:	10 e0       	ldi	r17, 0x00	; 0
	for (size_t i = 0; i < strlen(buf); i++) {
     e4c:	ce 01       	movw	r24, r28
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	9f 8b       	std	Y+23, r25	; 0x17
     e52:	8e 8b       	std	Y+22, r24	; 0x16
     e54:	ee 89       	ldd	r30, Y+22	; 0x16
     e56:	ff 89       	ldd	r31, Y+23	; 0x17
     e58:	01 90       	ld	r0, Z+
     e5a:	00 20       	and	r0, r0
     e5c:	e9 f7       	brne	.-6      	; 0xe58 <_Z6mymainv+0x18a>
     e5e:	31 97       	sbiw	r30, 0x01	; 1
     e60:	8e 89       	ldd	r24, Y+22	; 0x16
     e62:	9f 89       	ldd	r25, Y+23	; 0x17
     e64:	e8 1b       	sub	r30, r24
     e66:	f9 0b       	sbc	r31, r25
     e68:	c4 01       	movw	r24, r8
     e6a:	86 19       	sub	r24, r6
     e6c:	97 09       	sbc	r25, r7
     e6e:	8e 17       	cp	r24, r30
     e70:	9f 07       	cpc	r25, r31
     e72:	80 f4       	brcc	.+32     	; 0xe94 <_Z6mymainv+0x1c6>
		g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey, b);
     e74:	f4 01       	movw	r30, r8
     e76:	61 91       	ld	r22, Z+
     e78:	4f 01       	movw	r8, r30
     e7a:	c4 2c       	mov	r12, r4
     e7c:	51 01       	movw	r10, r2
     e7e:	ee a4       	ldd	r14, Y+46	; 0x2e
     e80:	ff a4       	ldd	r15, Y+47	; 0x2f
     e82:	08 a9       	ldd	r16, Y+48	; 0x30
     e84:	21 2f       	mov	r18, r17
     e86:	44 e2       	ldi	r20, 0x24	; 36
     e88:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e8a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e8c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
     e90:	10 5f       	subi	r17, 0xF0	; 240
	for (size_t i = 0; i < strlen(buf); i++) {
		g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
	}

	vfoB->getTxDisplayFreq(buf, band);
	for (size_t i = 0; i < strlen(buf); i++) {
     e92:	e0 cf       	rjmp	.-64     	; 0xe54 <_Z6mymainv+0x186>
		g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey, b);
	}

	vfo *curVfo = vfoA;
	params *param = new params(l);
     e94:	8e e4       	ldi	r24, 0x4E	; 78
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_Znwj>
     e9c:	99 8f       	std	Y+25, r25	; 0x19
     e9e:	88 8f       	std	Y+24, r24	; 0x18
     ea0:	68 a1       	ldd	r22, Y+32	; 0x20
     ea2:	79 a1       	ldd	r23, Y+33	; 0x21
     ea4:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_ZN6paramsC1EP3Lcd>
	curMode = param->getMode();
     ea8:	88 8d       	ldd	r24, Y+24	; 0x18
     eaa:	99 8d       	ldd	r25, Y+25	; 0x19
     eac:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <_ZN6params7getModeEv>
     eb0:	08 2f       	mov	r16, r24
	vfoB->getTxDisplayFreq(buf, band);
	for (size_t i = 0; i < strlen(buf); i++) {
		g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey, b);
	}

	vfo *curVfo = vfoA;
     eb2:	db a0       	ldd	r13, Y+35	; 0x23
     eb4:	5c a0       	ldd	r5, Y+36	; 0x24
	Sw *dash = new Sw(DASH, PORTC_ADR);
	Sw *pb = new Sw(PB, PORTD_ADR);
	ElapsedTime *et = new ElapsedTime(100);
	Encoder *enc = new Encoder(ENCA, ENCB, PORTB_ADR);

	band_t band = BAND_40;
     eb6:	12 e0       	ldi	r17, 0x02	; 2
#endif

Lcd *l = new Lcd();
Graphics *g = new Graphics();

int pass = 0;
     eb8:	18 a6       	std	Y+40, r1	; 0x28
     eba:	1f a2       	std	Y+39, r1	; 0x27
					enc->clearEvent();

freq = curVfo->getTxFreq(band);
dds(freq);

					curVfo->getTxDisplayFreq(buf, band);
     ebc:	ce 01       	movw	r24, r28
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	9f 8b       	std	Y+23, r25	; 0x17
     ec2:	8e 8b       	std	Y+22, r24	; 0x16
	params *param = new params(l);
	curMode = param->getMode();

	while(1) {
		
		mode_t newMode = param->getMode();
     ec4:	88 8d       	ldd	r24, Y+24	; 0x18
     ec6:	99 8d       	ldd	r25, Y+25	; 0x19
     ec8:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <_ZN6params7getModeEv>
     ecc:	8a a3       	std	Y+34, r24	; 0x22

		if ( (curMode == MODE_PARAMS) && (newMode == MODE_NORMAL)) {
     ece:	01 30       	cpi	r16, 0x01	; 1
     ed0:	09 f0       	breq	.+2      	; 0xed4 <_Z6mymainv+0x206>
     ed2:	c7 c0       	rjmp	.+398    	; 0x1062 <_Z6mymainv+0x394>
     ed4:	81 11       	cpse	r24, r1
     ed6:	d5 c0       	rjmp	.+426    	; 0x1082 <_Z6mymainv+0x3b4>

			band = param->getBand();
     ed8:	88 8d       	ldd	r24, Y+24	; 0x18
     eda:	99 8d       	ldd	r25, Y+25	; 0x19
     edc:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_ZN6params7getBandEv>
     ee0:	18 2f       	mov	r17, r24


			if (param->getVfo() == VFOA) {
     ee2:	88 8d       	ldd	r24, Y+24	; 0x18
     ee4:	99 8d       	ldd	r25, Y+25	; 0x19
     ee6:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <_ZN6params6getVfoEv>
				curVfo = vfoA;
				vfoA->getTxDisplayFreq(buf, band);
     eea:	41 2f       	mov	r20, r17
     eec:	be 01       	movw	r22, r28
     eee:	6f 5f       	subi	r22, 0xFF	; 255
     ef0:	7f 4f       	sbci	r23, 0xFF	; 255
		if ( (curMode == MODE_PARAMS) && (newMode == MODE_NORMAL)) {

			band = param->getBand();


			if (param->getVfo() == VFOA) {
     ef2:	81 11       	cpse	r24, r1
     ef4:	54 c0       	rjmp	.+168    	; 0xf9e <_Z6mymainv+0x2d0>
				curVfo = vfoA;
				vfoA->getTxDisplayFreq(buf, band);
     ef6:	8b a1       	ldd	r24, Y+35	; 0x23
     ef8:	9c a1       	ldd	r25, Y+36	; 0x24
     efa:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN3vfo16getTxDisplayFreqEPc5_band>
     efe:	43 01       	movw	r8, r6
     f00:	d1 2c       	mov	r13, r1
				for (size_t i = 0; i < strlen(buf); i++) {
     f02:	ee 89       	ldd	r30, Y+22	; 0x16
     f04:	ff 89       	ldd	r31, Y+23	; 0x17
     f06:	01 90       	ld	r0, Z+
     f08:	00 20       	and	r0, r0
     f0a:	e9 f7       	brne	.-6      	; 0xf06 <_Z6mymainv+0x238>
     f0c:	31 97       	sbiw	r30, 0x01	; 1
     f0e:	8e 89       	ldd	r24, Y+22	; 0x16
     f10:	9f 89       	ldd	r25, Y+23	; 0x17
     f12:	e8 1b       	sub	r30, r24
     f14:	f9 0b       	sbc	r31, r25
     f16:	c4 01       	movw	r24, r8
     f18:	86 19       	sub	r24, r6
     f1a:	97 09       	sbc	r25, r7
     f1c:	8e 17       	cp	r24, r30
     f1e:	9f 07       	cpc	r25, r31
     f20:	90 f4       	brcc	.+36     	; 0xf46 <_Z6mymainv+0x278>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
     f22:	f4 01       	movw	r30, r8
     f24:	61 91       	ld	r22, Z+
     f26:	4f 01       	movw	r8, r30
     f28:	c4 2c       	mov	r12, r4
     f2a:	51 01       	movw	r10, r2
     f2c:	2c ef       	ldi	r18, 0xFC	; 252
     f2e:	e2 2e       	mov	r14, r18
     f30:	f1 2c       	mov	r15, r1
     f32:	00 e0       	ldi	r16, 0x00	; 0
     f34:	2d 2d       	mov	r18, r13
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f3a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f3c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
     f40:	f0 e1       	ldi	r31, 0x10	; 16
     f42:	df 0e       	add	r13, r31


			if (param->getVfo() == VFOA) {
				curVfo = vfoA;
				vfoA->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
     f44:	de cf       	rjmp	.-68     	; 0xf02 <_Z6mymainv+0x234>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
				}

				vfoB->getTxDisplayFreq(buf, band);
     f46:	41 2f       	mov	r20, r17
     f48:	be 01       	movw	r22, r28
     f4a:	6f 5f       	subi	r22, 0xFF	; 255
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	8d a1       	ldd	r24, Y+37	; 0x25
     f50:	9e a1       	ldd	r25, Y+38	; 0x26
     f52:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN3vfo16getTxDisplayFreqEPc5_band>
     f56:	43 01       	movw	r8, r6
     f58:	d1 2c       	mov	r13, r1
				for (size_t i = 0; i < strlen(buf); i++) {
     f5a:	ee 89       	ldd	r30, Y+22	; 0x16
     f5c:	ff 89       	ldd	r31, Y+23	; 0x17
     f5e:	01 90       	ld	r0, Z+
     f60:	00 20       	and	r0, r0
     f62:	e9 f7       	brne	.-6      	; 0xf5e <_Z6mymainv+0x290>
     f64:	31 97       	sbiw	r30, 0x01	; 1
     f66:	8e 89       	ldd	r24, Y+22	; 0x16
     f68:	9f 89       	ldd	r25, Y+23	; 0x17
     f6a:	e8 1b       	sub	r30, r24
     f6c:	f9 0b       	sbc	r31, r25
     f6e:	c4 01       	movw	r24, r8
     f70:	86 19       	sub	r24, r6
     f72:	97 09       	sbc	r25, r7
     f74:	8e 17       	cp	r24, r30
     f76:	9f 07       	cpc	r25, r31
     f78:	08 f0       	brcs	.+2      	; 0xf7c <_Z6mymainv+0x2ae>
     f7a:	64 c0       	rjmp	.+200    	; 0x1044 <_Z6mymainv+0x376>
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey, b);
     f7c:	f4 01       	movw	r30, r8
     f7e:	61 91       	ld	r22, Z+
     f80:	4f 01       	movw	r8, r30
     f82:	c4 2c       	mov	r12, r4
     f84:	51 01       	movw	r10, r2
     f86:	ee a4       	ldd	r14, Y+46	; 0x2e
     f88:	ff a4       	ldd	r15, Y+47	; 0x2f
     f8a:	08 a9       	ldd	r16, Y+48	; 0x30
     f8c:	2d 2d       	mov	r18, r13
     f8e:	44 e2       	ldi	r20, 0x24	; 36
     f90:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f92:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f94:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
     f98:	f0 e1       	ldi	r31, 0x10	; 16
     f9a:	df 0e       	add	r13, r31
				for (size_t i = 0; i < strlen(buf); i++) {
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
				}

				vfoB->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
     f9c:	de cf       	rjmp	.-68     	; 0xf5a <_Z6mymainv+0x28c>
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey, b);
				}

			} else {
				curVfo = vfoB;
				vfoA->getTxDisplayFreq(buf, band);
     f9e:	8b a1       	ldd	r24, Y+35	; 0x23
     fa0:	9c a1       	ldd	r25, Y+36	; 0x24
     fa2:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN3vfo16getTxDisplayFreqEPc5_band>
     fa6:	43 01       	movw	r8, r6
     fa8:	d1 2c       	mov	r13, r1
				for (size_t i = 0; i < strlen(buf); i++) {
     faa:	ee 89       	ldd	r30, Y+22	; 0x16
     fac:	ff 89       	ldd	r31, Y+23	; 0x17
     fae:	01 90       	ld	r0, Z+
     fb0:	00 20       	and	r0, r0
     fb2:	e9 f7       	brne	.-6      	; 0xfae <_Z6mymainv+0x2e0>
     fb4:	31 97       	sbiw	r30, 0x01	; 1
     fb6:	8e 89       	ldd	r24, Y+22	; 0x16
     fb8:	9f 89       	ldd	r25, Y+23	; 0x17
     fba:	e8 1b       	sub	r30, r24
     fbc:	f9 0b       	sbc	r31, r25
     fbe:	c4 01       	movw	r24, r8
     fc0:	86 19       	sub	r24, r6
     fc2:	97 09       	sbc	r25, r7
     fc4:	8e 17       	cp	r24, r30
     fc6:	9f 07       	cpc	r25, r31
     fc8:	88 f4       	brcc	.+34     	; 0xfec <_Z6mymainv+0x31e>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, fg_grey, b);
     fca:	f4 01       	movw	r30, r8
     fcc:	61 91       	ld	r22, Z+
     fce:	4f 01       	movw	r8, r30
     fd0:	c4 2c       	mov	r12, r4
     fd2:	51 01       	movw	r10, r2
     fd4:	ee a4       	ldd	r14, Y+46	; 0x2e
     fd6:	ff a4       	ldd	r15, Y+47	; 0x2f
     fd8:	08 a9       	ldd	r16, Y+48	; 0x30
     fda:	2d 2d       	mov	r18, r13
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fe0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fe2:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
     fe6:	f0 e1       	ldi	r31, 0x10	; 16
     fe8:	df 0e       	add	r13, r31
				}

			} else {
				curVfo = vfoB;
				vfoA->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
     fea:	df cf       	rjmp	.-66     	; 0xfaa <_Z6mymainv+0x2dc>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, fg_grey, b);
				}

				vfoB->getTxDisplayFreq(buf, band);
     fec:	41 2f       	mov	r20, r17
     fee:	be 01       	movw	r22, r28
     ff0:	6f 5f       	subi	r22, 0xFF	; 255
     ff2:	7f 4f       	sbci	r23, 0xFF	; 255
     ff4:	8d a1       	ldd	r24, Y+37	; 0x25
     ff6:	9e a1       	ldd	r25, Y+38	; 0x26
     ff8:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN3vfo16getTxDisplayFreqEPc5_band>
     ffc:	43 01       	movw	r8, r6
     ffe:	d1 2c       	mov	r13, r1
				for (size_t i = 0; i < strlen(buf); i++) {
    1000:	ee 89       	ldd	r30, Y+22	; 0x16
    1002:	ff 89       	ldd	r31, Y+23	; 0x17
    1004:	01 90       	ld	r0, Z+
    1006:	00 20       	and	r0, r0
    1008:	e9 f7       	brne	.-6      	; 0x1004 <_Z6mymainv+0x336>
    100a:	31 97       	sbiw	r30, 0x01	; 1
    100c:	8e 89       	ldd	r24, Y+22	; 0x16
    100e:	9f 89       	ldd	r25, Y+23	; 0x17
    1010:	e8 1b       	sub	r30, r24
    1012:	f9 0b       	sbc	r31, r25
    1014:	c4 01       	movw	r24, r8
    1016:	86 19       	sub	r24, r6
    1018:	97 09       	sbc	r25, r7
    101a:	8e 17       	cp	r24, r30
    101c:	9f 07       	cpc	r25, r31
    101e:	a8 f4       	brcc	.+42     	; 0x104a <_Z6mymainv+0x37c>
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, f, b);
    1020:	f4 01       	movw	r30, r8
    1022:	61 91       	ld	r22, Z+
    1024:	4f 01       	movw	r8, r30
    1026:	c4 2c       	mov	r12, r4
    1028:	51 01       	movw	r10, r2
    102a:	9c ef       	ldi	r25, 0xFC	; 252
    102c:	e9 2e       	mov	r14, r25
    102e:	f1 2c       	mov	r15, r1
    1030:	00 e0       	ldi	r16, 0x00	; 0
    1032:	2d 2d       	mov	r18, r13
    1034:	44 e2       	ldi	r20, 0x24	; 36
    1036:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1038:	9b 8d       	ldd	r25, Y+27	; 0x1b
    103a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
    103e:	f0 e1       	ldi	r31, 0x10	; 16
    1040:	df 0e       	add	r13, r31
				for (size_t i = 0; i < strlen(buf); i++) {
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, fg_grey, b);
				}

				vfoB->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
    1042:	de cf       	rjmp	.-68     	; 0x1000 <_Z6mymainv+0x332>

			band = param->getBand();


			if (param->getVfo() == VFOA) {
				curVfo = vfoA;
    1044:	db a0       	ldd	r13, Y+35	; 0x23
    1046:	5c a0       	ldd	r5, Y+36	; 0x24
    1048:	02 c0       	rjmp	.+4      	; 0x104e <_Z6mymainv+0x380>
				for (size_t i = 0; i < strlen(buf); i++) {
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey, b);
				}

			} else {
				curVfo = vfoB;
    104a:	dd a0       	ldd	r13, Y+37	; 0x25
    104c:	5e a0       	ldd	r5, Y+38	; 0x26
				for (size_t i = 0; i < strlen(buf); i++) {
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, f, b);
				}

			}
			curVfo->setStep(param->getStep());
    104e:	88 8d       	ldd	r24, Y+24	; 0x18
    1050:	99 8d       	ldd	r25, Y+25	; 0x19
    1052:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN6params7getStepEv>
    1056:	68 2f       	mov	r22, r24
    1058:	8d 2d       	mov	r24, r13
    105a:	95 2d       	mov	r25, r5
    105c:	0e 94 82 11 	call	0x2304	; 0x2304 <_ZN3vfo7setStepE6step_t>
			curMode = newMode;
    1060:	91 c0       	rjmp	.+290    	; 0x1184 <_Z6mymainv+0x4b6>
		} else if ((newMode == MODE_PARAMS) && (curMode == MODE_NORMAL)) {
    1062:	2a a1       	ldd	r18, Y+34	; 0x22
    1064:	21 30       	cpi	r18, 0x01	; 1
    1066:	81 f4       	brne	.+32     	; 0x1088 <_Z6mymainv+0x3ba>
    1068:	01 11       	cpse	r16, r1
    106a:	14 c0       	rjmp	.+40     	; 0x1094 <_Z6mymainv+0x3c6>
				param->updateEnter(enc, pb, l);
    106c:	28 a1       	ldd	r18, Y+32	; 0x20
    106e:	39 a1       	ldd	r19, Y+33	; 0x21
    1070:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1072:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1074:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1076:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1078:	88 8d       	ldd	r24, Y+24	; 0x18
    107a:	99 8d       	ldd	r25, Y+25	; 0x19
    107c:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <_ZN6params11updateEnterEP7EncoderP2SwP3Lcd>
				curMode = newMode;
    1080:	81 c0       	rjmp	.+258    	; 0x1184 <_Z6mymainv+0x4b6>
				}

			}
			curVfo->setStep(param->getStep());
			curMode = newMode;
		} else if ((newMode == MODE_PARAMS) && (curMode == MODE_NORMAL)) {
    1082:	8a a1       	ldd	r24, Y+34	; 0x22
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	31 f0       	breq	.+12     	; 0x1094 <_Z6mymainv+0x3c6>

		} else {

		curMode = newMode;
		
		switch (curMode) {
    1088:	8a a1       	ldd	r24, Y+34	; 0x22
    108a:	88 23       	and	r24, r24
    108c:	71 f0       	breq	.+28     	; 0x10aa <_Z6mymainv+0x3dc>
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	09 f0       	breq	.+2      	; 0x1094 <_Z6mymainv+0x3c6>
    1092:	78 c0       	rjmp	.+240    	; 0x1184 <_Z6mymainv+0x4b6>

			case MODE_PARAMS:
					param->update(enc, pb, l);
    1094:	28 a1       	ldd	r18, Y+32	; 0x20
    1096:	39 a1       	ldd	r19, Y+33	; 0x21
    1098:	4c 8d       	ldd	r20, Y+28	; 0x1c
    109a:	5d 8d       	ldd	r21, Y+29	; 0x1d
    109c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    109e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    10a0:	88 8d       	ldd	r24, Y+24	; 0x18
    10a2:	99 8d       	ldd	r25, Y+25	; 0x19
    10a4:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN6params6updateEP7EncoderP2SwP3Lcd>
				break;
    10a8:	6d c0       	rjmp	.+218    	; 0x1184 <_Z6mymainv+0x4b6>
			//
			// for now, no keyer, just straight key
			//

			case MODE_NORMAL:
				if (pb->hasEvent()) {
    10aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10ae:	0e 94 38 10 	call	0x2070	; 0x2070 <_ZN2Sw8hasEventEv>
    10b2:	88 23       	and	r24, r24
    10b4:	b1 f0       	breq	.+44     	; 0x10e2 <_Z6mymainv+0x414>
					if (pb->getEvent() == EV_CLOSE) {
    10b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10ba:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN2Sw8getEventEv>
    10be:	82 30       	cpi	r24, 0x02	; 2
    10c0:	59 f0       	breq	.+22     	; 0x10d8 <_Z6mymainv+0x40a>

					} else if (pb->getEvent() == EV_OPEN) {
    10c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10c4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10c6:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN2Sw8getEventEv>
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	29 f4       	brne	.+10     	; 0x10d8 <_Z6mymainv+0x40a>
						param->setMode(MODE_PARAMS);
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	88 8d       	ldd	r24, Y+24	; 0x18
    10d2:	99 8d       	ldd	r25, Y+25	; 0x19
    10d4:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <_ZN6params7setModeE7_mode_t>
					}
					pb->clearEvent();
    10d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10da:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10dc:	0e 94 43 10 	call	0x2086	; 0x2086 <_ZN2Sw10clearEventEv>
					break;
    10e0:	51 c0       	rjmp	.+162    	; 0x1184 <_Z6mymainv+0x4b6>
				}

				if (enc->hasEvent()) {
    10e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10e6:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_ZN7Encoder8hasEventEv>
    10ea:	88 23       	and	r24, r24
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <_Z6mymainv+0x422>
    10ee:	4a c0       	rjmp	.+148    	; 0x1184 <_Z6mymainv+0x4b6>
					uint16_t line;
					curVfo->update(band);
    10f0:	61 2f       	mov	r22, r17
    10f2:	8d 2d       	mov	r24, r13
    10f4:	95 2d       	mov	r25, r5
    10f6:	0e 94 a5 10 	call	0x214a	; 0x214a <_ZN3vfo6updateEh>
					enc->clearEvent();
    10fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10fe:	0e 94 d2 05 	call	0xba4	; 0xba4 <_ZN7Encoder10clearEventEv>

freq = curVfo->getTxFreq(band);
    1102:	61 2f       	mov	r22, r17
    1104:	8d 2d       	mov	r24, r13
    1106:	95 2d       	mov	r25, r5
    1108:	0e 94 5d 11 	call	0x22ba	; 0x22ba <_ZN3vfo9getTxFreqE5_band>
    110c:	69 8b       	std	Y+17, r22	; 0x11
    110e:	7a 8b       	std	Y+18, r23	; 0x12
    1110:	8b 8b       	std	Y+19, r24	; 0x13
    1112:	9c 8b       	std	Y+20, r25	; 0x14
dds(freq);
    1114:	69 89       	ldd	r22, Y+17	; 0x11
    1116:	7a 89       	ldd	r23, Y+18	; 0x12
    1118:	8b 89       	ldd	r24, Y+19	; 0x13
    111a:	9c 89       	ldd	r25, Y+20	; 0x14
    111c:	0e 94 83 04 	call	0x906	; 0x906 <dds>

					curVfo->getTxDisplayFreq(buf, band);
    1120:	41 2f       	mov	r20, r17
    1122:	be 01       	movw	r22, r28
    1124:	6f 5f       	subi	r22, 0xFF	; 255
    1126:	7f 4f       	sbci	r23, 0xFF	; 255
    1128:	8d 2d       	mov	r24, r13
    112a:	95 2d       	mov	r25, r5
    112c:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN3vfo16getTxDisplayFreqEPc5_band>
					line = curVfo->getLine();
    1130:	8d 2d       	mov	r24, r13
    1132:	95 2d       	mov	r25, r5
    1134:	0e 94 a7 12 	call	0x254e	; 0x254e <_ZN3vfo7getLineEv>
    1138:	8b ab       	std	Y+51, r24	; 0x33
    113a:	43 01       	movw	r8, r6
    113c:	1d a6       	std	Y+45, r1	; 0x2d
					for (size_t i = 0; i < strlen(buf); i++) {
    113e:	ee 89       	ldd	r30, Y+22	; 0x16
    1140:	ff 89       	ldd	r31, Y+23	; 0x17
    1142:	01 90       	ld	r0, Z+
    1144:	00 20       	and	r0, r0
    1146:	e9 f7       	brne	.-6      	; 0x1142 <_Z6mymainv+0x474>
    1148:	31 97       	sbiw	r30, 0x01	; 1
    114a:	8e 89       	ldd	r24, Y+22	; 0x16
    114c:	9f 89       	ldd	r25, Y+23	; 0x17
    114e:	e8 1b       	sub	r30, r24
    1150:	f9 0b       	sbc	r31, r25
    1152:	c4 01       	movw	r24, r8
    1154:	86 19       	sub	r24, r6
    1156:	97 09       	sbc	r25, r7
    1158:	8e 17       	cp	r24, r30
    115a:	9f 07       	cpc	r25, r31
    115c:	98 f4       	brcc	.+38     	; 0x1184 <_Z6mymainv+0x4b6>
						g->draw2xChar(buf[i], line, i*2*CHAR_WIDTH, f, b);
    115e:	f4 01       	movw	r30, r8
    1160:	61 91       	ld	r22, Z+
    1162:	4f 01       	movw	r8, r30
    1164:	c4 2c       	mov	r12, r4
    1166:	51 01       	movw	r10, r2
    1168:	8c ef       	ldi	r24, 0xFC	; 252
    116a:	e8 2e       	mov	r14, r24
    116c:	f1 2c       	mov	r15, r1
    116e:	00 e0       	ldi	r16, 0x00	; 0
    1170:	2d a5       	ldd	r18, Y+45	; 0x2d
    1172:	4b a9       	ldd	r20, Y+51	; 0x33
    1174:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1176:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1178:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
    117c:	fd a5       	ldd	r31, Y+45	; 0x2d
    117e:	f0 5f       	subi	r31, 0xF0	; 240
    1180:	fd a7       	std	Y+45, r31	; 0x2d
freq = curVfo->getTxFreq(band);
dds(freq);

					curVfo->getTxDisplayFreq(buf, band);
					line = curVfo->getLine();
					for (size_t i = 0; i < strlen(buf); i++) {
    1182:	dd cf       	rjmp	.-70     	; 0x113e <_Z6mymainv+0x470>
			case MODE_SETUP:
				break;
			}
		}

		if (dot->hasEvent()) {
    1184:	89 a5       	ldd	r24, Y+41	; 0x29
    1186:	9a a5       	ldd	r25, Y+42	; 0x2a
    1188:	0e 94 38 10 	call	0x2070	; 0x2070 <_ZN2Sw8hasEventEv>
    118c:	88 23       	and	r24, r24
    118e:	89 f1       	breq	.+98     	; 0x11f2 <_Z6mymainv+0x524>
			if (dot->getEvent() == EV_CLOSE) {
    1190:	89 a5       	ldd	r24, Y+41	; 0x29
    1192:	9a a5       	ldd	r25, Y+42	; 0x2a
    1194:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN2Sw8getEventEv>
				freq = curVfo->getTxFreq(band);
    1198:	61 2f       	mov	r22, r17
				break;
			}
		}

		if (dot->hasEvent()) {
			if (dot->getEvent() == EV_CLOSE) {
    119a:	82 30       	cpi	r24, 0x02	; 2
    119c:	99 f4       	brne	.+38     	; 0x11c4 <_Z6mymainv+0x4f6>
				freq = curVfo->getTxFreq(band);
    119e:	8d 2d       	mov	r24, r13
    11a0:	95 2d       	mov	r25, r5
    11a2:	0e 94 5d 11 	call	0x22ba	; 0x22ba <_ZN3vfo9getTxFreqE5_band>
    11a6:	69 8b       	std	Y+17, r22	; 0x11
    11a8:	7a 8b       	std	Y+18, r23	; 0x12
    11aa:	8b 8b       	std	Y+19, r24	; 0x13
    11ac:	9c 8b       	std	Y+20, r25	; 0x14
				dds(freq);
    11ae:	69 89       	ldd	r22, Y+17	; 0x11
    11b0:	7a 89       	ldd	r23, Y+18	; 0x12
    11b2:	8b 89       	ldd	r24, Y+19	; 0x13
    11b4:	9c 89       	ldd	r25, Y+20	; 0x14
    11b6:	0e 94 83 04 	call	0x906	; 0x906 <dds>
				reg = PORTD;
    11ba:	8b b1       	in	r24, 0x0b	; 11
    11bc:	8d 8b       	std	Y+21, r24	; 0x15
				PORTD = reg | RLY_MSK;
    11be:	8d 89       	ldd	r24, Y+21	; 0x15
    11c0:	80 64       	ori	r24, 0x40	; 64
    11c2:	12 c0       	rjmp	.+36     	; 0x11e8 <_Z6mymainv+0x51a>

			} else {
				freq = curVfo->getRxFreq(band);
    11c4:	8d 2d       	mov	r24, r13
    11c6:	95 2d       	mov	r25, r5
    11c8:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZN3vfo9getRxFreqE5_band>
    11cc:	69 8b       	std	Y+17, r22	; 0x11
    11ce:	7a 8b       	std	Y+18, r23	; 0x12
    11d0:	8b 8b       	std	Y+19, r24	; 0x13
    11d2:	9c 8b       	std	Y+20, r25	; 0x14
				dds(freq);
    11d4:	69 89       	ldd	r22, Y+17	; 0x11
    11d6:	7a 89       	ldd	r23, Y+18	; 0x12
    11d8:	8b 89       	ldd	r24, Y+19	; 0x13
    11da:	9c 89       	ldd	r25, Y+20	; 0x14
    11dc:	0e 94 83 04 	call	0x906	; 0x906 <dds>
				reg = PORTD;
    11e0:	8b b1       	in	r24, 0x0b	; 11
    11e2:	8d 8b       	std	Y+21, r24	; 0x15
				PORTD = reg & ~RLY_MSK;
    11e4:	8d 89       	ldd	r24, Y+21	; 0x15
    11e6:	8f 7b       	andi	r24, 0xBF	; 191
    11e8:	8b b9       	out	0x0b, r24	; 11
			}
			dot->clearEvent();
    11ea:	89 a5       	ldd	r24, Y+41	; 0x29
    11ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    11ee:	0e 94 43 10 	call	0x2086	; 0x2086 <_ZN2Sw10clearEventEv>
		}
		
		if (dash->hasEvent()) {
    11f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    11f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    11f6:	0e 94 38 10 	call	0x2070	; 0x2070 <_ZN2Sw8hasEventEv>
    11fa:	88 23       	and	r24, r24
    11fc:	01 f1       	breq	.+64     	; 0x123e <_Z6mymainv+0x570>
			if (dash->getEvent() == EV_CLOSE) {
    11fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1200:	9c a5       	ldd	r25, Y+44	; 0x2c
    1202:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN2Sw8getEventEv>
    1206:	82 30       	cpi	r24, 0x02	; 2
    1208:	19 f4       	brne	.+6      	; 0x1210 <_Z6mymainv+0x542>
				sprintf(buf,"DASH_CLOSE");
    120a:	6e e3       	ldi	r22, 0x3E	; 62
    120c:	72 e0       	ldi	r23, 0x02	; 2
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <_Z6mymainv+0x546>
				} else {
				sprintf(buf,"DASH_OPEN ");
    1210:	69 e4       	ldi	r22, 0x49	; 73
    1212:	72 e0       	ldi	r23, 0x02	; 2
    1214:	ce 01       	movw	r24, r28
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <strcpy>
			}
			dash->clearEvent();
    121c:	8b a5       	ldd	r24, Y+43	; 0x2b
    121e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1220:	0e 94 43 10 	call	0x2086	; 0x2086 <_ZN2Sw10clearEventEv>
			l->gotoxy(9,0);
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	69 e0       	ldi	r22, 0x09	; 9
    1228:	88 a1       	ldd	r24, Y+32	; 0x20
    122a:	99 a1       	ldd	r25, Y+33	; 0x21
    122c:	0e 94 8d 0c 	call	0x191a	; 0x191a <_ZN3Lcd6gotoxyEhh>
			l->puts(buf);
    1230:	be 01       	movw	r22, r28
    1232:	6f 5f       	subi	r22, 0xFF	; 255
    1234:	7f 4f       	sbci	r23, 0xFF	; 255
    1236:	88 a1       	ldd	r24, Y+32	; 0x20
    1238:	99 a1       	ldd	r25, Y+33	; 0x21
    123a:	0e 94 3f 0c 	call	0x187e	; 0x187e <_ZN3Lcd4putsEPc>
		}

		if (et->expired()) {
    123e:	89 a9       	ldd	r24, Y+49	; 0x31
    1240:	9a a9       	ldd	r25, Y+50	; 0x32
    1242:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_ZN11ElapsedTime7expiredEv>
    1246:	81 11       	cpse	r24, r1
    1248:	02 c0       	rjmp	.+4      	; 0x124e <_Z6mymainv+0x580>
	params *param = new params(l);
	curMode = param->getMode();

	while(1) {
		
		mode_t newMode = param->getMode();
    124a:	0a a1       	ldd	r16, Y+34	; 0x22
    124c:	3b ce       	rjmp	.-906    	; 0xec4 <_Z6mymainv+0x1f6>
			l->gotoxy(9,0);
			l->puts(buf);
		}

		if (et->expired()) {
			g->gotoxy(9,10);
    124e:	4a e0       	ldi	r20, 0x0A	; 10
    1250:	69 e0       	ldi	r22, 0x09	; 9
    1252:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1254:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1256:	0e 94 8d 0c 	call	0x191a	; 0x191a <_ZN3Lcd6gotoxyEhh>
			fprintf(lcdfp, "Pass %d\n", pass++);
    125a:	8f a0       	ldd	r8, Y+39	; 0x27
    125c:	98 a4       	ldd	r9, Y+40	; 0x28
    125e:	2f ef       	ldi	r18, 0xFF	; 255
    1260:	82 1a       	sub	r8, r18
    1262:	92 0a       	sbc	r9, r18
    1264:	88 a5       	ldd	r24, Y+40	; 0x28
    1266:	8f 93       	push	r24
    1268:	9f a1       	ldd	r25, Y+39	; 0x27
    126a:	9f 93       	push	r25
    126c:	e4 e5       	ldi	r30, 0x54	; 84
    126e:	f2 e0       	ldi	r31, 0x02	; 2
    1270:	ff 93       	push	r31
    1272:	ef 93       	push	r30
    1274:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcdfp+0x1>
    1278:	8f 93       	push	r24
    127a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lcdfp>
    127e:	8f 93       	push	r24
    1280:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <fprintf>
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	98 a6       	std	Y+40, r9	; 0x28
    1292:	8f a2       	std	Y+39, r8	; 0x27
    1294:	da cf       	rjmp	.-76     	; 0x124a <_Z6mymainv+0x57c>

00001296 <setup>:
	delete led;
#endif
}


void setup() {
    1296:	08 95       	ret

00001298 <loop>:

}


void loop() {
  mymain();
    1298:	0e 94 67 06 	call	0xcce	; 0xcce <_Z6mymainv>

0000129c <_ZN3Lcd5resetEv>:
  if (erase) {
    drawChar(' ', 1, cursor.line, cursor.col, fgColor, bgColor);    
  } else {
  	drawChar(' ', 1, cursor.line, cursor.col, bgColor, fgColor);
  }
}
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	1f 92       	push	r1
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	8b b1       	in	r24, 0x0b	; 11
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	8e 7f       	andi	r24, 0xFE	; 254
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	8b b9       	out	0x0b, r24	; 11
    12b4:	80 ea       	ldi	r24, 0xA0	; 160
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 57 04 	call	0x8ae	; 0x8ae <_Z7usecDlyi>
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	81 60       	ori	r24, 0x01	; 1
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	8b b9       	out	0x0b, r24	; 11
    12c6:	6d e0       	ldi	r22, 0x0D	; 13
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <_ZN5Clock5delayEm>
    12d2:	0f 90       	pop	r0
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	08 95       	ret

000012da <_ZN3Lcd8sendByteEh>:
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <_ZN3Lcd8sendByteEh+0x6>
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	9b b1       	in	r25, 0x0b	; 11
    12e6:	9a 83       	std	Y+2, r25	; 0x02
    12e8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ea:	99 83       	std	Y+1, r25	; 0x01
    12ec:	28 e0       	ldi	r18, 0x08	; 8
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	99 81       	ldd	r25, Y+1	; 0x01
    12f2:	87 ff       	sbrs	r24, 7
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <_ZN3Lcd8sendByteEh+0x20>
    12f6:	98 60       	ori	r25, 0x08	; 8
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <_ZN3Lcd8sendByteEh+0x22>
    12fa:	97 7f       	andi	r25, 0xF7	; 247
    12fc:	99 83       	std	Y+1, r25	; 0x01
    12fe:	99 81       	ldd	r25, Y+1	; 0x01
    1300:	9b b9       	out	0x0b, r25	; 11
    1302:	99 81       	ldd	r25, Y+1	; 0x01
    1304:	94 60       	ori	r25, 0x04	; 4
    1306:	9b b9       	out	0x0b, r25	; 11
    1308:	99 81       	ldd	r25, Y+1	; 0x01
    130a:	9b b9       	out	0x0b, r25	; 11
    130c:	88 0f       	add	r24, r24
    130e:	21 50       	subi	r18, 0x01	; 1
    1310:	31 09       	sbc	r19, r1
    1312:	71 f7       	brne	.-36     	; 0x12f0 <_ZN3Lcd8sendByteEh+0x16>
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	8b b9       	out	0x0b, r24	; 11
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	08 95       	ret

00001322 <_ZN3Lcd7sendCmdEh>:
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	1f 92       	push	r1
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	9b b1       	in	r25, 0x0b	; 11
    132e:	99 83       	std	Y+1, r25	; 0x01
    1330:	99 81       	ldd	r25, Y+1	; 0x01
    1332:	9d 7d       	andi	r25, 0xDD	; 221
    1334:	99 83       	std	Y+1, r25	; 0x01
    1336:	99 81       	ldd	r25, Y+1	; 0x01
    1338:	9b b9       	out	0x0b, r25	; 11
    133a:	0e 94 6d 09 	call	0x12da	; 0x12da <_ZN3Lcd8sendByteEh>
    133e:	0f 90       	pop	r0
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	08 95       	ret

00001346 <_ZN3Lcd8sendDataEPhh>:
    1346:	cf 92       	push	r12
    1348:	df 92       	push	r13
    134a:	ef 92       	push	r14
    134c:	ff 92       	push	r15
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	1f 92       	push	r1
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	6c 01       	movw	r12, r24
    135e:	8b b1       	in	r24, 0x0b	; 11
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	82 60       	ori	r24, 0x02	; 2
    1366:	8b b9       	out	0x0b, r24	; 11
    1368:	86 01       	movw	r16, r12
    136a:	e6 2e       	mov	r14, r22
    136c:	f1 2c       	mov	r15, r1
    136e:	c8 01       	movw	r24, r16
    1370:	8c 19       	sub	r24, r12
    1372:	9d 09       	sbc	r25, r13
    1374:	8e 15       	cp	r24, r14
    1376:	9f 05       	cpc	r25, r15
    1378:	34 f4       	brge	.+12     	; 0x1386 <_ZN3Lcd8sendDataEPhh+0x40>
    137a:	f8 01       	movw	r30, r16
    137c:	81 91       	ld	r24, Z+
    137e:	8f 01       	movw	r16, r30
    1380:	0e 94 6d 09 	call	0x12da	; 0x12da <_ZN3Lcd8sendByteEh>
    1384:	f4 cf       	rjmp	.-24     	; 0x136e <_ZN3Lcd8sendDataEPhh+0x28>
    1386:	0f 90       	pop	r0
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	df 90       	pop	r13
    1396:	cf 90       	pop	r12
    1398:	08 95       	ret

0000139a <_ZN3Lcd8cmpltCmdEv>:
    139a:	8b b1       	in	r24, 0x0b	; 11
    139c:	80 7d       	andi	r24, 0xD0	; 208
    139e:	81 62       	ori	r24, 0x21	; 33
    13a0:	8b b9       	out	0x0b, r24	; 11
    13a2:	08 95       	ret

000013a4 <_ZN3Lcd2onEv>:
    13a4:	f8 94       	cli
    13a6:	89 e2       	ldi	r24, 0x29	; 41
    13a8:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN3Lcd7sendCmdEh>
    13ac:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN3Lcd8cmpltCmdEv>
    13b0:	78 94       	sei
    13b2:	08 95       	ret

000013b4 <_ZN3Lcd9sleep_outEv>:
    13b4:	f8 94       	cli
    13b6:	81 e1       	ldi	r24, 0x11	; 17
    13b8:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN3Lcd7sendCmdEh>
    13bc:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN3Lcd8cmpltCmdEv>
    13c0:	78 94       	sei
    13c2:	08 95       	ret

000013c4 <_ZN3Lcd10mem_accessEv>:
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	1f 92       	push	r1
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	80 e6       	ldi	r24, 0x60	; 96
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	f8 94       	cli
    13d4:	86 e3       	ldi	r24, 0x36	; 54
    13d6:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN3Lcd7sendCmdEh>
    13da:	61 e0       	ldi	r22, 0x01	; 1
    13dc:	ce 01       	movw	r24, r28
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN3Lcd8sendDataEPhh>
    13e4:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN3Lcd8cmpltCmdEv>
    13e8:	8a e3       	ldi	r24, 0x3A	; 58
    13ea:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN3Lcd7sendCmdEh>
    13ee:	86 e0       	ldi	r24, 0x06	; 6
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	61 e0       	ldi	r22, 0x01	; 1
    13f4:	ce 01       	movw	r24, r28
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN3Lcd8sendDataEPhh>
    13fc:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN3Lcd8cmpltCmdEv>
    1400:	78 94       	sei
    1402:	0f 90       	pop	r0
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <_ZN3Lcd11lcd_putcharEc>:
    140a:	ef 92       	push	r14
    140c:	ff 92       	push	r15
    140e:	0f 93       	push	r16
    1410:	1f 93       	push	r17
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	a4 97       	sbiw	r28, 0x24	; 36
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	08 2f       	mov	r16, r24
    1428:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <_ZN3Lcd6cursorE>
    142c:	1c e0       	ldi	r17, 0x0C	; 12
    142e:	81 9f       	mul	r24, r17
    1430:	10 2d       	mov	r17, r0
    1432:	11 24       	eor	r1, r1
    1434:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <_ZN3Lcd6cursorE+0x2>
    1438:	88 0f       	add	r24, r24
    143a:	88 0f       	add	r24, r24
    143c:	88 0f       	add	r24, r24
    143e:	f8 94       	cli
    1440:	19 82       	std	Y+1, r1	; 0x01
    1442:	8a 83       	std	Y+2, r24	; 0x02
    1444:	1b 82       	std	Y+3, r1	; 0x03
    1446:	89 5f       	subi	r24, 0xF9	; 249
    1448:	8c 83       	std	Y+4, r24	; 0x04
    144a:	8a e2       	ldi	r24, 0x2A	; 42
    144c:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN3Lcd7sendCmdEh>
    1450:	64 e0       	ldi	r22, 0x04	; 4
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN3Lcd8sendDataEPhh>
    145a:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN3Lcd8cmpltCmdEv>
    145e:	19 82       	std	Y+1, r1	; 0x01
    1460:	1a 83       	std	Y+2, r17	; 0x02
    1462:	1b 82       	std	Y+3, r1	; 0x03
    1464:	15 5f       	subi	r17, 0xF5	; 245
    1466:	1c 83       	std	Y+4, r17	; 0x04
    1468:	8b e2       	ldi	r24, 0x2B	; 43
    146a:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN3Lcd7sendCmdEh>
    146e:	64 e0       	ldi	r22, 0x04	; 4
    1470:	ce 01       	movw	r24, r28
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN3Lcd8sendDataEPhh>
    1478:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN3Lcd8cmpltCmdEv>
    147c:	be 01       	movw	r22, r28
    147e:	67 5e       	subi	r22, 0xE7	; 231
    1480:	7f 4f       	sbci	r23, 0xFF	; 255
    1482:	80 2f       	mov	r24, r16
    1484:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_getPixels>
    1488:	8c e2       	ldi	r24, 0x2C	; 44
    148a:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN3Lcd7sendCmdEh>
    148e:	8e 01       	movw	r16, r28
    1490:	07 5e       	subi	r16, 0xE7	; 231
    1492:	1f 4f       	sbci	r17, 0xFF	; 255
    1494:	7e 01       	movw	r14, r28
    1496:	85 e2       	ldi	r24, 0x25	; 37
    1498:	e8 0e       	add	r14, r24
    149a:	f1 1c       	adc	r15, r1
    149c:	f8 01       	movw	r30, r16
    149e:	91 91       	ld	r25, Z+
    14a0:	8f 01       	movw	r16, r30
    14a2:	20 91 2d 03 	lds	r18, 0x032D	; 0x80032d <_ZN3Lcd7fgColorE>
    14a6:	30 91 2e 03 	lds	r19, 0x032E	; 0x80032e <_ZN3Lcd7fgColorE+0x1>
    14aa:	40 91 2f 03 	lds	r20, 0x032F	; 0x80032f <_ZN3Lcd7fgColorE+0x2>
    14ae:	50 91 2a 03 	lds	r21, 0x032A	; 0x80032a <_ZN3Lcd7bgColorE>
    14b2:	60 91 2b 03 	lds	r22, 0x032B	; 0x80032b <_ZN3Lcd7bgColorE+0x1>
    14b6:	70 91 2c 03 	lds	r23, 0x032C	; 0x80032c <_ZN3Lcd7bgColorE+0x2>
    14ba:	fe 01       	movw	r30, r28
    14bc:	31 96       	adiw	r30, 0x01	; 1
    14be:	83 e0       	ldi	r24, 0x03	; 3
    14c0:	90 ff       	sbrs	r25, 0
    14c2:	04 c0       	rjmp	.+8      	; 0x14cc <_ZN3Lcd11lcd_putcharEc+0xc2>
    14c4:	20 83       	st	Z, r18
    14c6:	31 83       	std	Z+1, r19	; 0x01
    14c8:	42 83       	std	Z+2, r20	; 0x02
    14ca:	03 c0       	rjmp	.+6      	; 0x14d2 <_ZN3Lcd11lcd_putcharEc+0xc8>
    14cc:	50 83       	st	Z, r21
    14ce:	61 83       	std	Z+1, r22	; 0x01
    14d0:	72 83       	std	Z+2, r23	; 0x02
    14d2:	96 95       	lsr	r25
    14d4:	8d 5f       	subi	r24, 0xFD	; 253
    14d6:	33 96       	adiw	r30, 0x03	; 3
    14d8:	8b 31       	cpi	r24, 0x1B	; 27
    14da:	91 f7       	brne	.-28     	; 0x14c0 <_ZN3Lcd11lcd_putcharEc+0xb6>
    14dc:	68 e1       	ldi	r22, 0x18	; 24
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN3Lcd8sendDataEPhh>
    14e6:	0e 15       	cp	r16, r14
    14e8:	1f 05       	cpc	r17, r15
    14ea:	c1 f6       	brne	.-80     	; 0x149c <_ZN3Lcd11lcd_putcharEc+0x92>
    14ec:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN3Lcd8cmpltCmdEv>
    14f0:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <_ZN3Lcd6cursorE+0x2>
    14f4:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <_ZN3Lcd6cursorE+0x3>
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	84 31       	cpi	r24, 0x14	; 20
    14fc:	91 05       	cpc	r25, r1
    14fe:	29 f0       	breq	.+10     	; 0x150a <_ZN3Lcd11lcd_putcharEc+0x100>
    1500:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <_ZN3Lcd6cursorE+0x3>
    1504:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <_ZN3Lcd6cursorE+0x2>
    1508:	15 c0       	rjmp	.+42     	; 0x1534 <_ZN3Lcd11lcd_putcharEc+0x12a>
    150a:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <_ZN3Lcd6cursorE+0x3>
    150e:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <_ZN3Lcd6cursorE+0x2>
    1512:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <_ZN3Lcd6cursorE>
    1516:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <_ZN3Lcd6cursorE+0x1>
    151a:	01 96       	adiw	r24, 0x01	; 1
    151c:	8a 30       	cpi	r24, 0x0A	; 10
    151e:	91 05       	cpc	r25, r1
    1520:	29 f0       	breq	.+10     	; 0x152c <_ZN3Lcd11lcd_putcharEc+0x122>
    1522:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <_ZN3Lcd6cursorE+0x1>
    1526:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <_ZN3Lcd6cursorE>
    152a:	04 c0       	rjmp	.+8      	; 0x1534 <_ZN3Lcd11lcd_putcharEc+0x12a>
    152c:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <_ZN3Lcd6cursorE+0x1>
    1530:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <_ZN3Lcd6cursorE>
    1534:	78 94       	sei
    1536:	a4 96       	adiw	r28, 0x24	; 36
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	ff 90       	pop	r15
    154c:	ef 90       	pop	r14
    154e:	08 95       	ret

00001550 <_ZN3Lcd8drawCharEchhh9_pixColorS0_>:
    1550:	6f 92       	push	r6
    1552:	7f 92       	push	r7
    1554:	8f 92       	push	r8
    1556:	9f 92       	push	r9
    1558:	af 92       	push	r10
    155a:	cf 92       	push	r12
    155c:	df 92       	push	r13
    155e:	ef 92       	push	r14
    1560:	ff 92       	push	r15
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	a4 97       	sbiw	r28, 0x24	; 36
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	76 2e       	mov	r7, r22
    157c:	f4 2e       	mov	r15, r20
    157e:	12 2f       	mov	r17, r18
    1580:	44 23       	and	r20, r20
    1582:	59 f0       	breq	.+22     	; 0x159a <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x4a>
    1584:	10 91 26 03 	lds	r17, 0x0326	; 0x800326 <_ZN3Lcd6cursorE>
    1588:	8c e0       	ldi	r24, 0x0C	; 12
    158a:	18 9f       	mul	r17, r24
    158c:	10 2d       	mov	r17, r0
    158e:	11 24       	eor	r1, r1
    1590:	00 91 28 03 	lds	r16, 0x0328	; 0x800328 <_ZN3Lcd6cursorE+0x2>
    1594:	00 0f       	add	r16, r16
    1596:	00 0f       	add	r16, r16
    1598:	00 0f       	add	r16, r16
    159a:	f8 94       	cli
    159c:	19 82       	std	Y+1, r1	; 0x01
    159e:	0a 83       	std	Y+2, r16	; 0x02
    15a0:	1b 82       	std	Y+3, r1	; 0x03
    15a2:	09 5f       	subi	r16, 0xF9	; 249
    15a4:	0c 83       	std	Y+4, r16	; 0x04
    15a6:	8a e2       	ldi	r24, 0x2A	; 42
    15a8:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN3Lcd7sendCmdEh>
    15ac:	64 e0       	ldi	r22, 0x04	; 4
    15ae:	ce 01       	movw	r24, r28
    15b0:	01 96       	adiw	r24, 0x01	; 1
    15b2:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN3Lcd8sendDataEPhh>
    15b6:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN3Lcd8cmpltCmdEv>
    15ba:	19 82       	std	Y+1, r1	; 0x01
    15bc:	1a 83       	std	Y+2, r17	; 0x02
    15be:	1b 82       	std	Y+3, r1	; 0x03
    15c0:	15 5f       	subi	r17, 0xF5	; 245
    15c2:	1c 83       	std	Y+4, r17	; 0x04
    15c4:	8b e2       	ldi	r24, 0x2B	; 43
    15c6:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN3Lcd7sendCmdEh>
    15ca:	64 e0       	ldi	r22, 0x04	; 4
    15cc:	ce 01       	movw	r24, r28
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN3Lcd8sendDataEPhh>
    15d4:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN3Lcd8cmpltCmdEv>
    15d8:	be 01       	movw	r22, r28
    15da:	67 5e       	subi	r22, 0xE7	; 231
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	87 2d       	mov	r24, r7
    15e0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_getPixels>
    15e4:	8c e2       	ldi	r24, 0x2C	; 44
    15e6:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN3Lcd7sendCmdEh>
    15ea:	8e 01       	movw	r16, r28
    15ec:	07 5e       	subi	r16, 0xE7	; 231
    15ee:	1f 4f       	sbci	r17, 0xFF	; 255
    15f0:	3e 01       	movw	r6, r28
    15f2:	85 e2       	ldi	r24, 0x25	; 37
    15f4:	68 0e       	add	r6, r24
    15f6:	71 1c       	adc	r7, r1
    15f8:	f8 01       	movw	r30, r16
    15fa:	91 91       	ld	r25, Z+
    15fc:	8f 01       	movw	r16, r30
    15fe:	fe 01       	movw	r30, r28
    1600:	31 96       	adiw	r30, 0x01	; 1
    1602:	83 e0       	ldi	r24, 0x03	; 3
    1604:	90 ff       	sbrs	r25, 0
    1606:	04 c0       	rjmp	.+8      	; 0x1610 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0xc0>
    1608:	c0 82       	st	Z, r12
    160a:	d1 82       	std	Z+1, r13	; 0x01
    160c:	e2 82       	std	Z+2, r14	; 0x02
    160e:	03 c0       	rjmp	.+6      	; 0x1616 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0xc6>
    1610:	80 82       	st	Z, r8
    1612:	91 82       	std	Z+1, r9	; 0x01
    1614:	a2 82       	std	Z+2, r10	; 0x02
    1616:	96 95       	lsr	r25
    1618:	8d 5f       	subi	r24, 0xFD	; 253
    161a:	33 96       	adiw	r30, 0x03	; 3
    161c:	8b 31       	cpi	r24, 0x1B	; 27
    161e:	91 f7       	brne	.-28     	; 0x1604 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0xb4>
    1620:	68 e1       	ldi	r22, 0x18	; 24
    1622:	ce 01       	movw	r24, r28
    1624:	01 96       	adiw	r24, 0x01	; 1
    1626:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN3Lcd8sendDataEPhh>
    162a:	06 15       	cp	r16, r6
    162c:	17 05       	cpc	r17, r7
    162e:	21 f7       	brne	.-56     	; 0x15f8 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0xa8>
    1630:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN3Lcd8cmpltCmdEv>
    1634:	ff 20       	and	r15, r15
    1636:	11 f1       	breq	.+68     	; 0x167c <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x12c>
    1638:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <_ZN3Lcd6cursorE+0x2>
    163c:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <_ZN3Lcd6cursorE+0x3>
    1640:	01 96       	adiw	r24, 0x01	; 1
    1642:	84 31       	cpi	r24, 0x14	; 20
    1644:	91 05       	cpc	r25, r1
    1646:	29 f0       	breq	.+10     	; 0x1652 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x102>
    1648:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <_ZN3Lcd6cursorE+0x3>
    164c:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <_ZN3Lcd6cursorE+0x2>
    1650:	15 c0       	rjmp	.+42     	; 0x167c <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x12c>
    1652:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <_ZN3Lcd6cursorE+0x3>
    1656:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <_ZN3Lcd6cursorE+0x2>
    165a:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <_ZN3Lcd6cursorE>
    165e:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <_ZN3Lcd6cursorE+0x1>
    1662:	01 96       	adiw	r24, 0x01	; 1
    1664:	8a 30       	cpi	r24, 0x0A	; 10
    1666:	91 05       	cpc	r25, r1
    1668:	29 f0       	breq	.+10     	; 0x1674 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x124>
    166a:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <_ZN3Lcd6cursorE+0x1>
    166e:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <_ZN3Lcd6cursorE>
    1672:	04 c0       	rjmp	.+8      	; 0x167c <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x12c>
    1674:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <_ZN3Lcd6cursorE+0x1>
    1678:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <_ZN3Lcd6cursorE>
    167c:	78 94       	sei
    167e:	a4 96       	adiw	r28, 0x24	; 36
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	ff 90       	pop	r15
    1694:	ef 90       	pop	r14
    1696:	df 90       	pop	r13
    1698:	cf 90       	pop	r12
    169a:	af 90       	pop	r10
    169c:	9f 90       	pop	r9
    169e:	8f 90       	pop	r8
    16a0:	7f 90       	pop	r7
    16a2:	6f 90       	pop	r6
    16a4:	08 95       	ret

000016a6 <_ZN3Lcd8drawCharEchhh>:
    16a6:	8f 92       	push	r8
    16a8:	9f 92       	push	r9
    16aa:	af 92       	push	r10
    16ac:	cf 92       	push	r12
    16ae:	df 92       	push	r13
    16b0:	ef 92       	push	r14
    16b2:	0f 93       	push	r16
    16b4:	80 90 2a 03 	lds	r8, 0x032A	; 0x80032a <_ZN3Lcd7bgColorE>
    16b8:	90 90 2b 03 	lds	r9, 0x032B	; 0x80032b <_ZN3Lcd7bgColorE+0x1>
    16bc:	a0 90 2c 03 	lds	r10, 0x032C	; 0x80032c <_ZN3Lcd7bgColorE+0x2>
    16c0:	c0 90 2d 03 	lds	r12, 0x032D	; 0x80032d <_ZN3Lcd7fgColorE>
    16c4:	d0 90 2e 03 	lds	r13, 0x032E	; 0x80032e <_ZN3Lcd7fgColorE+0x1>
    16c8:	e0 90 2f 03 	lds	r14, 0x032F	; 0x80032f <_ZN3Lcd7fgColorE+0x2>
    16cc:	0e 94 a8 0a 	call	0x1550	; 0x1550 <_ZN3Lcd8drawCharEchhh9_pixColorS0_>
    16d0:	0f 91       	pop	r16
    16d2:	ef 90       	pop	r14
    16d4:	df 90       	pop	r13
    16d6:	cf 90       	pop	r12
    16d8:	af 90       	pop	r10
    16da:	9f 90       	pop	r9
    16dc:	8f 90       	pop	r8
    16de:	08 95       	ret

000016e0 <_ZN3Lcd7clrScrnEv>:
    16e0:	6f 92       	push	r6
    16e2:	7f 92       	push	r7
    16e4:	8f 92       	push	r8
    16e6:	ef 92       	push	r14
    16e8:	ff 92       	push	r15
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	27 97       	sbiw	r28, 0x07	; 7
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	60 90 2a 03 	lds	r6, 0x032A	; 0x80032a <_ZN3Lcd7bgColorE>
    1706:	70 90 2b 03 	lds	r7, 0x032B	; 0x80032b <_ZN3Lcd7bgColorE+0x1>
    170a:	80 90 2c 03 	lds	r8, 0x032C	; 0x80032c <_ZN3Lcd7bgColorE+0x2>
    170e:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <_ZN3Lcd7bgColorE>
    1712:	8c ef       	ldi	r24, 0xFC	; 252
    1714:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <_ZN3Lcd7bgColorE+0x1>
    1718:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <_ZN3Lcd7bgColorE+0x2>
    171c:	f8 94       	cli
    171e:	19 82       	std	Y+1, r1	; 0x01
    1720:	1a 82       	std	Y+2, r1	; 0x02
    1722:	1b 82       	std	Y+3, r1	; 0x03
    1724:	80 ea       	ldi	r24, 0xA0	; 160
    1726:	8c 83       	std	Y+4, r24	; 0x04
    1728:	8a e2       	ldi	r24, 0x2A	; 42
    172a:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN3Lcd7sendCmdEh>
    172e:	64 e0       	ldi	r22, 0x04	; 4
    1730:	ce 01       	movw	r24, r28
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN3Lcd8sendDataEPhh>
    1738:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN3Lcd8cmpltCmdEv>
    173c:	19 82       	std	Y+1, r1	; 0x01
    173e:	1a 82       	std	Y+2, r1	; 0x02
    1740:	1b 82       	std	Y+3, r1	; 0x03
    1742:	80 e8       	ldi	r24, 0x80	; 128
    1744:	8c 83       	std	Y+4, r24	; 0x04
    1746:	8b e2       	ldi	r24, 0x2B	; 43
    1748:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN3Lcd7sendCmdEh>
    174c:	64 e0       	ldi	r22, 0x04	; 4
    174e:	ce 01       	movw	r24, r28
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN3Lcd8sendDataEPhh>
    1756:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN3Lcd8cmpltCmdEv>
    175a:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <_ZN3Lcd7bgColorE>
    175e:	8d 83       	std	Y+5, r24	; 0x05
    1760:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <_ZN3Lcd7bgColorE+0x1>
    1764:	8e 83       	std	Y+6, r24	; 0x06
    1766:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <_ZN3Lcd7bgColorE+0x2>
    176a:	8f 83       	std	Y+7, r24	; 0x07
    176c:	8c e2       	ldi	r24, 0x2C	; 44
    176e:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN3Lcd7sendCmdEh>
    1772:	00 e8       	ldi	r16, 0x80	; 128
    1774:	10 e0       	ldi	r17, 0x00	; 0
    1776:	80 ea       	ldi	r24, 0xA0	; 160
    1778:	e8 2e       	mov	r14, r24
    177a:	f1 2c       	mov	r15, r1
    177c:	63 e0       	ldi	r22, 0x03	; 3
    177e:	ce 01       	movw	r24, r28
    1780:	05 96       	adiw	r24, 0x05	; 5
    1782:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN3Lcd8sendDataEPhh>
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	e8 1a       	sub	r14, r24
    178a:	f1 08       	sbc	r15, r1
    178c:	b9 f7       	brne	.-18     	; 0x177c <_ZN3Lcd7clrScrnEv+0x9c>
    178e:	01 50       	subi	r16, 0x01	; 1
    1790:	11 09       	sbc	r17, r1
    1792:	89 f7       	brne	.-30     	; 0x1776 <_ZN3Lcd7clrScrnEv+0x96>
    1794:	78 94       	sei
    1796:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <_ZN3Lcd6cursorE+0x1>
    179a:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <_ZN3Lcd6cursorE>
    179e:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <_ZN3Lcd6cursorE+0x3>
    17a2:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <_ZN3Lcd6cursorE+0x2>
    17a6:	60 92 2a 03 	sts	0x032A, r6	; 0x80032a <_ZN3Lcd7bgColorE>
    17aa:	70 92 2b 03 	sts	0x032B, r7	; 0x80032b <_ZN3Lcd7bgColorE+0x1>
    17ae:	80 92 2c 03 	sts	0x032C, r8	; 0x80032c <_ZN3Lcd7bgColorE+0x2>
    17b2:	27 96       	adiw	r28, 0x07	; 7
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	1f 91       	pop	r17
    17c4:	0f 91       	pop	r16
    17c6:	ff 90       	pop	r15
    17c8:	ef 90       	pop	r14
    17ca:	8f 90       	pop	r8
    17cc:	7f 90       	pop	r7
    17ce:	6f 90       	pop	r6
    17d0:	08 95       	ret

000017d2 <_ZN3LcdC1Ev>:
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	1f 92       	push	r1
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	20 91 25 03 	lds	r18, 0x0325	; 0x800325 <_ZN3Lcd14lcdInitializedE>
    17e4:	21 11       	cpse	r18, r1
    17e6:	45 c0       	rjmp	.+138    	; 0x1872 <_ZN3LcdC1Ev+0xa0>
    17e8:	8c 01       	movw	r16, r24
    17ea:	8a b1       	in	r24, 0x0a	; 10
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	8f 62       	ori	r24, 0x2F	; 47
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	8a b9       	out	0x0a, r24	; 10
    17f8:	8b b1       	in	r24, 0x0b	; 11
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	80 7d       	andi	r24, 0xD0	; 208
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	81 62       	ori	r24, 0x21	; 33
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	8b b9       	out	0x0b, r24	; 11
    180c:	8c ef       	ldi	r24, 0xFC	; 252
    180e:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <_ZN3Lcd7fgColorE>
    1812:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <_ZN3Lcd7fgColorE+0x1>
    1816:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <_ZN3Lcd7fgColorE+0x2>
    181a:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <_ZN3Lcd7bgColorE>
    181e:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <_ZN3Lcd7bgColorE+0x1>
    1822:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <_ZN3Lcd7bgColorE+0x2>
    1826:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <_ZN3Lcd6cursorE+0x3>
    182a:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <_ZN3Lcd6cursorE+0x2>
    182e:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <_ZN3Lcd6cursorE+0x1>
    1832:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <_ZN3Lcd6cursorE>
    1836:	c8 01       	movw	r24, r16
    1838:	0e 94 4e 09 	call	0x129c	; 0x129c <_ZN3Lcd5resetEv>
    183c:	c8 01       	movw	r24, r16
    183e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_ZN3Lcd10mem_accessEv>
    1842:	6c e0       	ldi	r22, 0x0C	; 12
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <_ZN5Clock5delayEm>
    184e:	c8 01       	movw	r24, r16
    1850:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_ZN3Lcd9sleep_outEv>
    1854:	6c e0       	ldi	r22, 0x0C	; 12
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <_ZN5Clock5delayEm>
    1860:	c8 01       	movw	r24, r16
    1862:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN3Lcd2onEv>
    1866:	c8 01       	movw	r24, r16
    1868:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <_ZN3Lcd7clrScrnEv>
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <_ZN3Lcd14lcdInitializedE>
    1872:	0f 90       	pop	r0
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	1f 91       	pop	r17
    187a:	0f 91       	pop	r16
    187c:	08 95       	ret

0000187e <_ZN3Lcd4putsEPc>:
    187e:	ef 92       	push	r14
    1880:	ff 92       	push	r15
    1882:	0f 93       	push	r16
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	7c 01       	movw	r14, r24
    188a:	eb 01       	movw	r28, r22
    188c:	69 91       	ld	r22, Y+
    188e:	66 23       	and	r22, r22
    1890:	49 f0       	breq	.+18     	; 0x18a4 <_ZN3Lcd4putsEPc+0x26>
    1892:	00 91 28 03 	lds	r16, 0x0328	; 0x800328 <_ZN3Lcd6cursorE+0x2>
    1896:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <_ZN3Lcd6cursorE>
    189a:	41 e0       	ldi	r20, 0x01	; 1
    189c:	c7 01       	movw	r24, r14
    189e:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <_ZN3Lcd8drawCharEchhh>
    18a2:	f4 cf       	rjmp	.-24     	; 0x188c <_ZN3Lcd4putsEPc+0xe>
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	0f 91       	pop	r16
    18aa:	ff 90       	pop	r15
    18ac:	ef 90       	pop	r14
    18ae:	08 95       	ret

000018b0 <_ZN3Lcd4putsEPc9_pixColor>:
    18b0:	2f 92       	push	r2
    18b2:	3f 92       	push	r3
    18b4:	4f 92       	push	r4
    18b6:	6f 92       	push	r6
    18b8:	7f 92       	push	r7
    18ba:	8f 92       	push	r8
    18bc:	9f 92       	push	r9
    18be:	af 92       	push	r10
    18c0:	cf 92       	push	r12
    18c2:	df 92       	push	r13
    18c4:	ef 92       	push	r14
    18c6:	0f 93       	push	r16
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
    18cc:	3c 01       	movw	r6, r24
    18ce:	19 01       	movw	r2, r18
    18d0:	44 2e       	mov	r4, r20
    18d2:	eb 01       	movw	r28, r22
    18d4:	69 91       	ld	r22, Y+
    18d6:	66 23       	and	r22, r22
    18d8:	89 f0       	breq	.+34     	; 0x18fc <_ZN3Lcd4putsEPc9_pixColor+0x4c>
    18da:	80 90 2a 03 	lds	r8, 0x032A	; 0x80032a <_ZN3Lcd7bgColorE>
    18de:	90 90 2b 03 	lds	r9, 0x032B	; 0x80032b <_ZN3Lcd7bgColorE+0x1>
    18e2:	a0 90 2c 03 	lds	r10, 0x032C	; 0x80032c <_ZN3Lcd7bgColorE+0x2>
    18e6:	e4 2c       	mov	r14, r4
    18e8:	61 01       	movw	r12, r2
    18ea:	00 91 28 03 	lds	r16, 0x0328	; 0x800328 <_ZN3Lcd6cursorE+0x2>
    18ee:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <_ZN3Lcd6cursorE>
    18f2:	41 e0       	ldi	r20, 0x01	; 1
    18f4:	c3 01       	movw	r24, r6
    18f6:	0e 94 a8 0a 	call	0x1550	; 0x1550 <_ZN3Lcd8drawCharEchhh9_pixColorS0_>
    18fa:	ec cf       	rjmp	.-40     	; 0x18d4 <_ZN3Lcd4putsEPc9_pixColor+0x24>
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	0f 91       	pop	r16
    1902:	ef 90       	pop	r14
    1904:	df 90       	pop	r13
    1906:	cf 90       	pop	r12
    1908:	af 90       	pop	r10
    190a:	9f 90       	pop	r9
    190c:	8f 90       	pop	r8
    190e:	7f 90       	pop	r7
    1910:	6f 90       	pop	r6
    1912:	4f 90       	pop	r4
    1914:	3f 90       	pop	r3
    1916:	2f 90       	pop	r2
    1918:	08 95       	ret

0000191a <_ZN3Lcd6gotoxyEhh>:
    191a:	e6 e2       	ldi	r30, 0x26	; 38
    191c:	f3 e0       	ldi	r31, 0x03	; 3
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	71 83       	std	Z+1, r23	; 0x01
    1922:	60 83       	st	Z, r22
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	53 83       	std	Z+3, r21	; 0x03
    1928:	42 83       	std	Z+2, r20	; 0x02
    192a:	08 95       	ret

0000192c <_Z8lcd_putccP6__file>:

//
// fprintf wrapper
//
int lcd_putc(char c, FILE *f) {
	Lcd::lcd_putchar(c);
    192c:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN3Lcd11lcd_putcharEc>
	return 0;
}
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	08 95       	ret

00001936 <_Z6memcpyPvPKvj>:
}


vfo_actv_t params::getActiveVfo(void) {
	return activeVfo;
}
    1936:	fb 01       	movw	r30, r22
    1938:	dc 01       	movw	r26, r24
    193a:	48 0f       	add	r20, r24
    193c:	59 1f       	adc	r21, r25
    193e:	a4 17       	cp	r26, r20
    1940:	b5 07       	cpc	r27, r21
    1942:	19 f0       	breq	.+6      	; 0x194a <_Z6memcpyPvPKvj+0x14>
    1944:	21 91       	ld	r18, Z+
    1946:	2d 93       	st	X+, r18
    1948:	fa cf       	rjmp	.-12     	; 0x193e <_Z6memcpyPvPKvj+0x8>
    194a:	08 95       	ret

0000194c <_ZN6params10initParamsEP3Lcd>:
    194c:	5f 92       	push	r5
    194e:	6f 92       	push	r6
    1950:	7f 92       	push	r7
    1952:	8f 92       	push	r8
    1954:	9f 92       	push	r9
    1956:	af 92       	push	r10
    1958:	bf 92       	push	r11
    195a:	cf 92       	push	r12
    195c:	df 92       	push	r13
    195e:	ef 92       	push	r14
    1960:	ff 92       	push	r15
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	60 97       	sbiw	r28, 0x10	; 16
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	8c 01       	movw	r16, r24
    197c:	6b 01       	movw	r12, r22
    197e:	7c 01       	movw	r14, r24
    1980:	8d e4       	ldi	r24, 0x4D	; 77
    1982:	e8 0e       	add	r14, r24
    1984:	f1 1c       	adc	r15, r1
    1986:	d7 01       	movw	r26, r14
    1988:	1c 92       	st	X, r1
    198a:	61 2c       	mov	r6, r1
    198c:	51 2c       	mov	r5, r1
    198e:	5b e0       	ldi	r21, 0x0B	; 11
    1990:	75 2e       	mov	r7, r21
    1992:	6d e5       	ldi	r22, 0x5D	; 93
    1994:	86 2e       	mov	r8, r22
    1996:	62 e0       	ldi	r22, 0x02	; 2
    1998:	96 2e       	mov	r9, r22
    199a:	fe 01       	movw	r30, r28
    199c:	31 96       	adiw	r30, 0x01	; 1
    199e:	5f 01       	movw	r10, r30
    19a0:	d7 01       	movw	r26, r14
    19a2:	8c 91       	ld	r24, X
    19a4:	86 30       	cpi	r24, 0x06	; 6
    19a6:	09 f4       	brne	.+2      	; 0x19aa <_ZN6params10initParamsEP3Lcd+0x5e>
    19a8:	88 c0       	rjmp	.+272    	; 0x1aba <_ZN6params10initParamsEP3Lcd+0x16e>
    19aa:	f8 01       	movw	r30, r16
    19ac:	78 9e       	mul	r7, r24
    19ae:	e0 0d       	add	r30, r0
    19b0:	f1 1d       	adc	r31, r1
    19b2:	11 24       	eor	r1, r1
    19b4:	46 85       	ldd	r20, Z+14	; 0x0e
    19b6:	64 85       	ldd	r22, Z+12	; 0x0c
    19b8:	c6 01       	movw	r24, r12
    19ba:	0e 94 8d 0c 	call	0x191a	; 0x191a <_ZN3Lcd6gotoxyEhh>
    19be:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <fg_white>
    19c2:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <fg_white+0x1>
    19c6:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <fg_white+0x2>
    19ca:	f7 01       	movw	r30, r14
    19cc:	80 81       	ld	r24, Z
    19ce:	f8 01       	movw	r30, r16
    19d0:	78 9e       	mul	r7, r24
    19d2:	e0 0d       	add	r30, r0
    19d4:	f1 1d       	adc	r31, r1
    19d6:	11 24       	eor	r1, r1
    19d8:	60 89       	ldd	r22, Z+16	; 0x10
    19da:	71 89       	ldd	r23, Z+17	; 0x11
    19dc:	c6 01       	movw	r24, r12
    19de:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN3Lcd4putsEPc9_pixColor>
    19e2:	d7 01       	movw	r26, r14
    19e4:	8c 91       	ld	r24, X
    19e6:	f8 01       	movw	r30, r16
    19e8:	78 9e       	mul	r7, r24
    19ea:	e0 0d       	add	r30, r0
    19ec:	f1 1d       	adc	r31, r1
    19ee:	11 24       	eor	r1, r1
    19f0:	44 89       	ldd	r20, Z+20	; 0x14
    19f2:	62 89       	ldd	r22, Z+18	; 0x12
    19f4:	c6 01       	movw	r24, r12
    19f6:	0e 94 8d 0c 	call	0x191a	; 0x191a <_ZN3Lcd6gotoxyEhh>
    19fa:	f7 01       	movw	r30, r14
    19fc:	80 81       	ld	r24, Z
    19fe:	82 30       	cpi	r24, 0x02	; 2
    1a00:	29 f1       	breq	.+74     	; 0x1a4c <_ZN6params10initParamsEP3Lcd+0x100>
    1a02:	70 f4       	brcc	.+28     	; 0x1a20 <_ZN6params10initParamsEP3Lcd+0xd4>
    1a04:	88 23       	and	r24, r24
    1a06:	d1 f0       	breq	.+52     	; 0x1a3c <_ZN6params10initParamsEP3Lcd+0xf0>
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	09 f0       	breq	.+2      	; 0x1a0e <_ZN6params10initParamsEP3Lcd+0xc2>
    1a0c:	46 c0       	rjmp	.+140    	; 0x1a9a <_ZN6params10initParamsEP3Lcd+0x14e>
    1a0e:	d8 01       	movw	r26, r16
    1a10:	11 96       	adiw	r26, 0x01	; 1
    1a12:	ec 91       	ld	r30, X
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	ee 0f       	add	r30, r30
    1a18:	ff 1f       	adc	r31, r31
    1a1a:	ea 5c       	subi	r30, 0xCA	; 202
    1a1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a1e:	3b c0       	rjmp	.+118    	; 0x1a96 <_ZN6params10initParamsEP3Lcd+0x14a>
    1a20:	84 30       	cpi	r24, 0x04	; 4
    1a22:	31 f1       	breq	.+76     	; 0x1a70 <_ZN6params10initParamsEP3Lcd+0x124>
    1a24:	e0 f0       	brcs	.+56     	; 0x1a5e <_ZN6params10initParamsEP3Lcd+0x112>
    1a26:	85 30       	cpi	r24, 0x05	; 5
    1a28:	c1 f5       	brne	.+112    	; 0x1a9a <_ZN6params10initParamsEP3Lcd+0x14e>
    1a2a:	d8 01       	movw	r26, r16
    1a2c:	13 96       	adiw	r26, 0x03	; 3
    1a2e:	ec 91       	ld	r30, X
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	ee 0f       	add	r30, r30
    1a34:	ff 1f       	adc	r31, r31
    1a36:	ee 5d       	subi	r30, 0xDE	; 222
    1a38:	fe 4f       	sbci	r31, 0xFE	; 254
    1a3a:	2d c0       	rjmp	.+90     	; 0x1a96 <_ZN6params10initParamsEP3Lcd+0x14a>
    1a3c:	d8 01       	movw	r26, r16
    1a3e:	ec 91       	ld	r30, X
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	ee 0f       	add	r30, r30
    1a44:	ff 1f       	adc	r31, r31
    1a46:	e4 5d       	subi	r30, 0xD4	; 212
    1a48:	fe 4f       	sbci	r31, 0xFE	; 254
    1a4a:	25 c0       	rjmp	.+74     	; 0x1a96 <_ZN6params10initParamsEP3Lcd+0x14a>
    1a4c:	d8 01       	movw	r26, r16
    1a4e:	12 96       	adiw	r26, 0x02	; 2
    1a50:	ec 91       	ld	r30, X
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	ee 0f       	add	r30, r30
    1a56:	ff 1f       	adc	r31, r31
    1a58:	ea 5d       	subi	r30, 0xDA	; 218
    1a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5c:	1c c0       	rjmp	.+56     	; 0x1a96 <_ZN6params10initParamsEP3Lcd+0x14a>
    1a5e:	d8 01       	movw	r26, r16
    1a60:	15 96       	adiw	r26, 0x05	; 5
    1a62:	ec 91       	ld	r30, X
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	ee 0f       	add	r30, r30
    1a68:	ff 1f       	adc	r31, r31
    1a6a:	e4 5e       	subi	r30, 0xE4	; 228
    1a6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a6e:	13 c0       	rjmp	.+38     	; 0x1a96 <_ZN6params10initParamsEP3Lcd+0x14a>
    1a70:	f8 01       	movw	r30, r16
    1a72:	86 81       	ldd	r24, Z+6	; 0x06
    1a74:	1f 92       	push	r1
    1a76:	8f 93       	push	r24
    1a78:	9f 92       	push	r9
    1a7a:	8f 92       	push	r8
    1a7c:	bf 92       	push	r11
    1a7e:	af 92       	push	r10
    1a80:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <sprintf>
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	6a 2c       	mov	r6, r10
    1a92:	5b 2c       	mov	r5, r11
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <_ZN6params10initParamsEP3Lcd+0x14e>
    1a96:	60 80       	ld	r6, Z
    1a98:	51 80       	ldd	r5, Z+1	; 0x01
    1a9a:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <fg_white>
    1a9e:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <fg_white+0x1>
    1aa2:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <fg_white+0x2>
    1aa6:	66 2d       	mov	r22, r6
    1aa8:	75 2d       	mov	r23, r5
    1aaa:	c6 01       	movw	r24, r12
    1aac:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN3Lcd4putsEPc9_pixColor>
    1ab0:	f7 01       	movw	r30, r14
    1ab2:	80 81       	ld	r24, Z
    1ab4:	8f 5f       	subi	r24, 0xFF	; 255
    1ab6:	80 83       	st	Z, r24
    1ab8:	73 cf       	rjmp	.-282    	; 0x19a0 <_ZN6params10initParamsEP3Lcd+0x54>
    1aba:	d7 01       	movw	r26, r14
    1abc:	1c 92       	st	X, r1
    1abe:	60 96       	adiw	r28, 0x10	; 16
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	ff 90       	pop	r15
    1ad4:	ef 90       	pop	r14
    1ad6:	df 90       	pop	r13
    1ad8:	cf 90       	pop	r12
    1ada:	bf 90       	pop	r11
    1adc:	af 90       	pop	r10
    1ade:	9f 90       	pop	r9
    1ae0:	8f 90       	pop	r8
    1ae2:	7f 90       	pop	r7
    1ae4:	6f 90       	pop	r6
    1ae6:	5f 90       	pop	r5
    1ae8:	08 95       	ret

00001aea <_ZN6paramsC1EP3Lcd>:
    1aea:	0f 93       	push	r16
    1aec:	1f 93       	push	r17
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	ec 01       	movw	r28, r24
    1af4:	8b 01       	movw	r16, r22
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	88 83       	st	Y, r24
    1afa:	82 e0       	ldi	r24, 0x02	; 2
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	1a 82       	std	Y+2, r1	; 0x02
    1b00:	1b 82       	std	Y+3, r1	; 0x03
    1b02:	1c 82       	std	Y+4, r1	; 0x04
    1b04:	1d 82       	std	Y+5, r1	; 0x05
    1b06:	82 e1       	ldi	r24, 0x12	; 18
    1b08:	8e 83       	std	Y+6, r24	; 0x06
    1b0a:	42 e4       	ldi	r20, 0x42	; 66
    1b0c:	50 e0       	ldi	r21, 0x00	; 0
    1b0e:	68 e4       	ldi	r22, 0x48	; 72
    1b10:	71 e0       	ldi	r23, 0x01	; 1
    1b12:	ce 01       	movw	r24, r28
    1b14:	0b 96       	adiw	r24, 0x0b	; 11
    1b16:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_Z6memcpyPvPKvj>
    1b1a:	b8 01       	movw	r22, r16
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	1f 91       	pop	r17
    1b24:	0f 91       	pop	r16
    1b26:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <_ZN6params10initParamsEP3Lcd>

00001b2a <_ZN6params7getStepEv>:
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	80 81       	ld	r24, Z
    1b2e:	08 95       	ret

00001b30 <_ZN6params7getBandEv>:
    1b30:	fc 01       	movw	r30, r24
    1b32:	81 81       	ldd	r24, Z+1	; 0x01
    1b34:	08 95       	ret

00001b36 <_ZN6params6getVfoEv>:
    1b36:	fc 01       	movw	r30, r24
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	08 95       	ret

00001b3c <_ZN6params7getModeEv>:
 	
	
mode_t	params::getMode(void) {
	return mode;
}
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	84 81       	ldd	r24, Z+4	; 0x04
    1b40:	08 95       	ret

00001b42 <_ZN6params7setModeE7_mode_t>:


void	params::setMode(mode_t newMode) {
	mode = newMode;
    1b42:	fc 01       	movw	r30, r24
    1b44:	64 83       	std	Z+4, r22	; 0x04
    1b46:	08 95       	ret

00001b48 <_ZN6params6updateEP7EncoderP2SwP3Lcd>:
	enc->setEventRate(1);
	update(enc, pb, lcd);	
}


void params::update(Encoder *enc, Sw *pb, Lcd *lcd) {
    1b48:	4f 92       	push	r4
    1b4a:	5f 92       	push	r5
    1b4c:	6f 92       	push	r6
    1b4e:	7f 92       	push	r7
    1b50:	af 92       	push	r10
    1b52:	bf 92       	push	r11
    1b54:	cf 92       	push	r12
    1b56:	df 92       	push	r13
    1b58:	ef 92       	push	r14
    1b5a:	ff 92       	push	r15
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	60 97       	sbiw	r28, 0x10	; 16
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	8c 01       	movw	r16, r24
    1b76:	7b 01       	movw	r14, r22
    1b78:	6a 01       	movw	r12, r20
    1b7a:	59 01       	movw	r10, r18
	uint16_t line;
	uint16_t col;
	char *valp = NULL;
	char buf[16];

	if (pb->hasEvent()) {
    1b7c:	ca 01       	movw	r24, r20
    1b7e:	0e 94 38 10 	call	0x2070	; 0x2070 <_ZN2Sw8hasEventEv>
    1b82:	88 23       	and	r24, r24
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x40>
    1b86:	a4 c0       	rjmp	.+328    	; 0x1cd0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x188>
		if (pb->getEvent() == EV_CLOSE) {
    1b88:	c6 01       	movw	r24, r12
    1b8a:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN2Sw8getEventEv>
    1b8e:	82 30       	cpi	r24, 0x02	; 2
    1b90:	69 f4       	brne	.+26     	; 0x1bac <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x64>
			pbCloseTicks = Clock::getTicks();
    1b92:	0e 94 01 04 	call	0x802	; 0x802 <_ZN5Clock8getTicksEv>
    1b96:	d8 01       	movw	r26, r16
    1b98:	17 96       	adiw	r26, 0x07	; 7
    1b9a:	6d 93       	st	X+, r22
    1b9c:	7d 93       	st	X+, r23
    1b9e:	8d 93       	st	X+, r24
    1ba0:	9c 93       	st	X, r25
    1ba2:	1a 97       	sbiw	r26, 0x0a	; 10
			pb->clearEvent();
    1ba4:	c6 01       	movw	r24, r12
    1ba6:	0e 94 43 10 	call	0x2086	; 0x2086 <_ZN2Sw10clearEventEv>
    1baa:	92 c0       	rjmp	.+292    	; 0x1cd0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x188>

		} else if (pb->getEvent() == EV_OPEN) {
    1bac:	c6 01       	movw	r24, r12
    1bae:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN2Sw8getEventEv>
    1bb2:	81 30       	cpi	r24, 0x01	; 1
    1bb4:	09 f0       	breq	.+2      	; 0x1bb8 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x70>
    1bb6:	8c c0       	rjmp	.+280    	; 0x1cd0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x188>

			uint32_t timeNow = Clock::getTicks();
    1bb8:	0e 94 01 04 	call	0x802	; 0x802 <_ZN5Clock8getTicksEv>
			uint32_t deltaTicks;

			if (timeNow < pbCloseTicks) {
				deltaTicks = timeNow + ((uint32_t)((uint64_t)(0x100000000) - (uint64_t)pbCloseTicks));
			} else {
				deltaTicks = timeNow - pbCloseTicks;
    1bbc:	f8 01       	movw	r30, r16
    1bbe:	47 80       	ldd	r4, Z+7	; 0x07
    1bc0:	50 84       	ldd	r5, Z+8	; 0x08
    1bc2:	61 84       	ldd	r6, Z+9	; 0x09
    1bc4:	72 84       	ldd	r7, Z+10	; 0x0a
    1bc6:	9b 01       	movw	r18, r22
    1bc8:	ac 01       	movw	r20, r24
    1bca:	24 19       	sub	r18, r4
    1bcc:	35 09       	sbc	r19, r5
    1bce:	46 09       	sbc	r20, r6
    1bd0:	57 09       	sbc	r21, r7
    1bd2:	29 01       	movw	r4, r18
    1bd4:	3a 01       	movw	r6, r20
			}
			pb->clearEvent();
    1bd6:	c6 01       	movw	r24, r12
    1bd8:	0e 94 43 10 	call	0x2086	; 0x2086 <_ZN2Sw10clearEventEv>
    1bdc:	a8 01       	movw	r20, r16
    1bde:	43 5b       	subi	r20, 0xB3	; 179
    1be0:	5f 4f       	sbci	r21, 0xFF	; 255
    1be2:	6a 01       	movw	r12, r20

			if (deltaTicks > SHORT_CLOSE) {
    1be4:	59 ec       	ldi	r21, 0xC9	; 201
    1be6:	45 16       	cp	r4, r21
    1be8:	51 04       	cpc	r5, r1
    1bea:	61 04       	cpc	r6, r1
    1bec:	71 04       	cpc	r7, r1
    1bee:	40 f1       	brcs	.+80     	; 0x1c40 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0xf8>
				uint16_t line = param_display[curParam].label_psn.line;
    1bf0:	d6 01       	movw	r26, r12
    1bf2:	8c 91       	ld	r24, X
				uint16_t col =  param_display[curParam].label_psn.col;
    1bf4:	7b e0       	ldi	r23, 0x0B	; 11
    1bf6:	77 2e       	mov	r7, r23
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	78 9e       	mul	r7, r24
    1bfc:	e0 0d       	add	r30, r0
    1bfe:	f1 1d       	adc	r31, r1
    1c00:	11 24       	eor	r1, r1

				lcd->gotoxy(line,col);
    1c02:	46 85       	ldd	r20, Z+14	; 0x0e
    1c04:	64 85       	ldd	r22, Z+12	; 0x0c
    1c06:	c5 01       	movw	r24, r10
    1c08:	0e 94 8d 0c 	call	0x191a	; 0x191a <_ZN3Lcd6gotoxyEhh>
				lcd->puts(param_display[curParam].label, fg_white);
    1c0c:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <fg_white>
    1c10:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <fg_white+0x1>
    1c14:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <fg_white+0x2>
    1c18:	f6 01       	movw	r30, r12
    1c1a:	80 81       	ld	r24, Z
    1c1c:	f8 01       	movw	r30, r16
    1c1e:	78 9e       	mul	r7, r24
    1c20:	e0 0d       	add	r30, r0
    1c22:	f1 1d       	adc	r31, r1
    1c24:	11 24       	eor	r1, r1
    1c26:	60 89       	ldd	r22, Z+16	; 0x10
    1c28:	71 89       	ldd	r23, Z+17	; 0x11
    1c2a:	c5 01       	movw	r24, r10
    1c2c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN3Lcd4putsEPc9_pixColor>
				mode = MODE_NORMAL;
    1c30:	d8 01       	movw	r26, r16
    1c32:	14 96       	adiw	r26, 0x04	; 4
    1c34:	1c 92       	st	X, r1
				enc->setEventRate(4);
    1c36:	64 e0       	ldi	r22, 0x04	; 4
    1c38:	c7 01       	movw	r24, r14
    1c3a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_ZN7Encoder12setEventRateEh>
    1c3e:	5f c1       	rjmp	.+702    	; 0x1efe <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3b6>
				return;

			} else {
				uint16_t line = param_display[curParam].label_psn.line;
    1c40:	f6 01       	movw	r30, r12
    1c42:	80 81       	ld	r24, Z
				uint16_t col =  param_display[curParam].label_psn.col;
    1c44:	6b e0       	ldi	r22, 0x0B	; 11
    1c46:	76 2e       	mov	r7, r22
    1c48:	f8 01       	movw	r30, r16
    1c4a:	78 9e       	mul	r7, r24
    1c4c:	e0 0d       	add	r30, r0
    1c4e:	f1 1d       	adc	r31, r1
    1c50:	11 24       	eor	r1, r1

				lcd->gotoxy(line,col);
    1c52:	46 85       	ldd	r20, Z+14	; 0x0e
    1c54:	64 85       	ldd	r22, Z+12	; 0x0c
    1c56:	c5 01       	movw	r24, r10
    1c58:	0e 94 8d 0c 	call	0x191a	; 0x191a <_ZN3Lcd6gotoxyEhh>
				lcd->puts(param_display[curParam].label, fg_white);
    1c5c:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <fg_white>
    1c60:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <fg_white+0x1>
    1c64:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <fg_white+0x2>
    1c68:	d6 01       	movw	r26, r12
    1c6a:	8c 91       	ld	r24, X
    1c6c:	f8 01       	movw	r30, r16
    1c6e:	78 9e       	mul	r7, r24
    1c70:	e0 0d       	add	r30, r0
    1c72:	f1 1d       	adc	r31, r1
    1c74:	11 24       	eor	r1, r1
    1c76:	60 89       	ldd	r22, Z+16	; 0x10
    1c78:	71 89       	ldd	r23, Z+17	; 0x11
    1c7a:	c5 01       	movw	r24, r10
    1c7c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN3Lcd4putsEPc9_pixColor>
				curParam = (param_t)((int)curParam + 1);
    1c80:	f6 01       	movw	r30, r12
    1c82:	80 81       	ld	r24, Z
    1c84:	8f 5f       	subi	r24, 0xFF	; 255
				if (curParam == PARAM_END) {
    1c86:	86 30       	cpi	r24, 0x06	; 6
    1c88:	11 f0       	breq	.+4      	; 0x1c8e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x146>
				uint16_t line = param_display[curParam].label_psn.line;
				uint16_t col =  param_display[curParam].label_psn.col;

				lcd->gotoxy(line,col);
				lcd->puts(param_display[curParam].label, fg_white);
				curParam = (param_t)((int)curParam + 1);
    1c8a:	80 83       	st	Z, r24
    1c8c:	01 c0       	rjmp	.+2      	; 0x1c90 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x148>
				if (curParam == PARAM_END) {
					curParam = PARAM_STEP;
    1c8e:	10 82       	st	Z, r1
				}					
				line = param_display[curParam].label_psn.line;
    1c90:	f6 01       	movw	r30, r12
    1c92:	80 81       	ld	r24, Z
				col =  param_display[curParam].label_psn.col;
    1c94:	5b e0       	ldi	r21, 0x0B	; 11
    1c96:	75 2e       	mov	r7, r21
    1c98:	f8 01       	movw	r30, r16
    1c9a:	78 9e       	mul	r7, r24
    1c9c:	e0 0d       	add	r30, r0
    1c9e:	f1 1d       	adc	r31, r1
    1ca0:	11 24       	eor	r1, r1
				lcd->gotoxy(line,col);
    1ca2:	46 85       	ldd	r20, Z+14	; 0x0e
    1ca4:	64 85       	ldd	r22, Z+12	; 0x0c
    1ca6:	c5 01       	movw	r24, r10
    1ca8:	0e 94 8d 0c 	call	0x191a	; 0x191a <_ZN3Lcd6gotoxyEhh>
				lcd->puts(param_display[curParam].label, fg_red);
    1cac:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <fg_red>
    1cb0:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <fg_red+0x1>
    1cb4:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <fg_red+0x2>
    1cb8:	d6 01       	movw	r26, r12
    1cba:	8c 91       	ld	r24, X
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	78 9e       	mul	r7, r24
    1cc0:	e0 0d       	add	r30, r0
    1cc2:	f1 1d       	adc	r31, r1
    1cc4:	11 24       	eor	r1, r1
    1cc6:	60 89       	ldd	r22, Z+16	; 0x10
    1cc8:	71 89       	ldd	r23, Z+17	; 0x11
    1cca:	c5 01       	movw	r24, r10
    1ccc:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN3Lcd4putsEPc9_pixColor>
		}
	}
	//		
	// now process encoder events which change the actual parameter value
	//
	if (enc->hasEvent()) {
    1cd0:	c7 01       	movw	r24, r14
    1cd2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_ZN7Encoder8hasEventEv>
    1cd6:	88 23       	and	r24, r24
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x194>
    1cda:	11 c1       	rjmp	.+546    	; 0x1efe <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3b6>
		switch(curParam) {
    1cdc:	68 01       	movw	r12, r16
    1cde:	bd e4       	ldi	r27, 0x4D	; 77
    1ce0:	cb 0e       	add	r12, r27
    1ce2:	d1 1c       	adc	r13, r1
    1ce4:	f6 01       	movw	r30, r12
    1ce6:	80 81       	ld	r24, Z
    1ce8:	82 30       	cpi	r24, 0x02	; 2
    1cea:	09 f4       	brne	.+2      	; 0x1cee <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1a6>
    1cec:	58 c0       	rjmp	.+176    	; 0x1d9e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x256>
    1cee:	28 f4       	brcc	.+10     	; 0x1cfa <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1b2>
    1cf0:	88 23       	and	r24, r24
    1cf2:	61 f0       	breq	.+24     	; 0x1d0c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1c4>
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	71 f1       	breq	.+92     	; 0x1d54 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x20c>
    1cf8:	e5 c0       	rjmp	.+458    	; 0x1ec4 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x37c>
    1cfa:	84 30       	cpi	r24, 0x04	; 4
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1b8>
    1cfe:	93 c0       	rjmp	.+294    	; 0x1e26 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2de>
    1d00:	08 f4       	brcc	.+2      	; 0x1d04 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1bc>
    1d02:	6f c0       	rjmp	.+222    	; 0x1de2 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x29a>
    1d04:	85 30       	cpi	r24, 0x05	; 5
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1c2>
    1d08:	c3 c0       	rjmp	.+390    	; 0x1e90 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x348>
    1d0a:	dc c0       	rjmp	.+440    	; 0x1ec4 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x37c>
			case PARAM_STEP:
				if (enc->getEvent() == ENC_CW_EVENT) {
    1d0c:	c7 01       	movw	r24, r14
    1d0e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN7Encoder8getEventEv>
    1d12:	81 30       	cpi	r24, 0x01	; 1
    1d14:	41 f4       	brne	.+16     	; 0x1d26 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1de>
					step = (step_t)((int)step + 1);
    1d16:	d8 01       	movw	r26, r16
    1d18:	8c 91       	ld	r24, X
    1d1a:	8f 5f       	subi	r24, 0xFF	; 255
					if (step == END_OF_STEP) {
    1d1c:	85 30       	cpi	r24, 0x05	; 5
    1d1e:	69 f4       	brne	.+26     	; 0x1d3a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1f2>
						step = STEP_10HZ;
    1d20:	f8 01       	movw	r30, r16
    1d22:	10 82       	st	Z, r1
    1d24:	0f c0       	rjmp	.+30     	; 0x1d44 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1fc>
					}

				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    1d26:	c7 01       	movw	r24, r14
    1d28:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN7Encoder8getEventEv>
    1d2c:	82 30       	cpi	r24, 0x02	; 2
    1d2e:	51 f4       	brne	.+20     	; 0x1d44 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1fc>
					if (step == STEP_10HZ) {
    1d30:	d8 01       	movw	r26, r16
    1d32:	8c 91       	ld	r24, X
    1d34:	81 11       	cpse	r24, r1
    1d36:	03 c0       	rjmp	.+6      	; 0x1d3e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1f6>
						step = STEP_1MHZ;
    1d38:	84 e0       	ldi	r24, 0x04	; 4
    1d3a:	8c 93       	st	X, r24
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1fc>
					} else {
						step = (step_t)((int)step - 1);
    1d3e:	81 50       	subi	r24, 0x01	; 1
    1d40:	f8 01       	movw	r30, r16
    1d42:	80 83       	st	Z, r24
					}
				}
				valp = step_strings[step];
    1d44:	d8 01       	movw	r26, r16
    1d46:	ec 91       	ld	r30, X
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	ee 0f       	add	r30, r30
    1d4c:	ff 1f       	adc	r31, r31
    1d4e:	e4 5d       	subi	r30, 0xD4	; 212
    1d50:	fe 4f       	sbci	r31, 0xFE	; 254
    1d52:	22 c0       	rjmp	.+68     	; 0x1d98 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x250>
				break;

			case PARAM_BAND:
				if (enc->getEvent() == ENC_CW_EVENT) {
    1d54:	c7 01       	movw	r24, r14
    1d56:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN7Encoder8getEventEv>
    1d5a:	81 30       	cpi	r24, 0x01	; 1
    1d5c:	39 f4       	brne	.+14     	; 0x1d6c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x224>
					band = (band_t)((int)band + 1);
    1d5e:	f8 01       	movw	r30, r16
    1d60:	81 81       	ldd	r24, Z+1	; 0x01
    1d62:	8f 5f       	subi	r24, 0xFF	; 255
					if (band == END_OF_BAND) {
    1d64:	89 30       	cpi	r24, 0x09	; 9
    1d66:	61 f4       	brne	.+24     	; 0x1d80 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x238>
						band = BAND_160;
    1d68:	11 82       	std	Z+1, r1	; 0x01
    1d6a:	0e c0       	rjmp	.+28     	; 0x1d88 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x240>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    1d6c:	c7 01       	movw	r24, r14
    1d6e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN7Encoder8getEventEv>
    1d72:	82 30       	cpi	r24, 0x02	; 2
    1d74:	49 f4       	brne	.+18     	; 0x1d88 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x240>
					if (band == BAND_160) {
    1d76:	f8 01       	movw	r30, r16
    1d78:	81 81       	ldd	r24, Z+1	; 0x01
    1d7a:	81 11       	cpse	r24, r1
    1d7c:	03 c0       	rjmp	.+6      	; 0x1d84 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x23c>
						band = BAND_10;
    1d7e:	88 e0       	ldi	r24, 0x08	; 8
    1d80:	81 83       	std	Z+1, r24	; 0x01
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x240>
					} else {
						band = (band_t)((int)band - 1);
    1d84:	81 50       	subi	r24, 0x01	; 1
    1d86:	81 83       	std	Z+1, r24	; 0x01
					}
				}
				valp = band_strings[band];
    1d88:	d8 01       	movw	r26, r16
    1d8a:	11 96       	adiw	r26, 0x01	; 1
    1d8c:	ec 91       	ld	r30, X
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	ee 0f       	add	r30, r30
    1d92:	ff 1f       	adc	r31, r31
    1d94:	ea 5c       	subi	r30, 0xCA	; 202
    1d96:	fe 4f       	sbci	r31, 0xFE	; 254
    1d98:	70 80       	ld	r7, Z
    1d9a:	61 80       	ldd	r6, Z+1	; 0x01
				break;
    1d9c:	95 c0       	rjmp	.+298    	; 0x1ec8 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x380>

			case PARAM_VFO:
				if (enc->getEvent() == ENC_CW_EVENT) {
    1d9e:	c7 01       	movw	r24, r14
    1da0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN7Encoder8getEventEv>
    1da4:	81 30       	cpi	r24, 0x01	; 1
    1da6:	39 f4       	brne	.+14     	; 0x1db6 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x26e>
					vfo = (vfo_select_t)((int)vfo + 1);
    1da8:	f8 01       	movw	r30, r16
    1daa:	82 81       	ldd	r24, Z+2	; 0x02
    1dac:	8f 5f       	subi	r24, 0xFF	; 255
					if (vfo == END_OF_VFO) {
    1dae:	83 30       	cpi	r24, 0x03	; 3
    1db0:	59 f4       	brne	.+22     	; 0x1dc8 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x280>
						vfo = VFOA;
    1db2:	12 82       	std	Z+2, r1	; 0x02
    1db4:	0d c0       	rjmp	.+26     	; 0x1dd0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x288>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    1db6:	c7 01       	movw	r24, r14
    1db8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN7Encoder8getEventEv>
    1dbc:	82 30       	cpi	r24, 0x02	; 2
    1dbe:	41 f4       	brne	.+16     	; 0x1dd0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x288>
					if (vfo == VFOA) {
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	92 81       	ldd	r25, Z+2	; 0x02
    1dc4:	91 11       	cpse	r25, r1
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x284>
						vfo = SPLIT;
    1dc8:	82 83       	std	Z+2, r24	; 0x02
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x288>
					} else {
						vfo = (vfo_select_t)((int)vfo - 1);
    1dcc:	91 50       	subi	r25, 0x01	; 1
    1dce:	92 83       	std	Z+2, r25	; 0x02
					}
				}
				valp = vfo_strings[vfo];
    1dd0:	d8 01       	movw	r26, r16
    1dd2:	12 96       	adiw	r26, 0x02	; 2
    1dd4:	ec 91       	ld	r30, X
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	ee 0f       	add	r30, r30
    1dda:	ff 1f       	adc	r31, r31
    1ddc:	ea 5d       	subi	r30, 0xDA	; 218
    1dde:	fe 4f       	sbci	r31, 0xFE	; 254
    1de0:	db cf       	rjmp	.-74     	; 0x1d98 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x250>
				break;

			case PARAM_KEY:
				if (enc->getEvent() == ENC_CW_EVENT) {
    1de2:	c7 01       	movw	r24, r14
    1de4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN7Encoder8getEventEv>
    1de8:	81 30       	cpi	r24, 0x01	; 1
    1dea:	39 f4       	brne	.+14     	; 0x1dfa <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2b2>
					key = (key_t)((int)key + 1);
    1dec:	f8 01       	movw	r30, r16
    1dee:	85 81       	ldd	r24, Z+5	; 0x05
    1df0:	8f 5f       	subi	r24, 0xFF	; 255
					if (key == END_OF_KEY) {
    1df2:	83 30       	cpi	r24, 0x03	; 3
    1df4:	59 f4       	brne	.+22     	; 0x1e0c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2c4>
						key = KEY_ST;
    1df6:	15 82       	std	Z+5, r1	; 0x05
    1df8:	0d c0       	rjmp	.+26     	; 0x1e14 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2cc>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    1dfa:	c7 01       	movw	r24, r14
    1dfc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN7Encoder8getEventEv>
    1e00:	82 30       	cpi	r24, 0x02	; 2
    1e02:	41 f4       	brne	.+16     	; 0x1e14 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2cc>
					if (key == KEY_ST) {
    1e04:	f8 01       	movw	r30, r16
    1e06:	95 81       	ldd	r25, Z+5	; 0x05
    1e08:	91 11       	cpse	r25, r1
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2c8>
						key = KEY_PDLS;
    1e0c:	85 83       	std	Z+5, r24	; 0x05
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2cc>
					} else {
						key = (key_t)((int)key - 1);
    1e10:	91 50       	subi	r25, 0x01	; 1
    1e12:	95 83       	std	Z+5, r25	; 0x05
					}
				}
				valp = key_strings[key];
    1e14:	d8 01       	movw	r26, r16
    1e16:	15 96       	adiw	r26, 0x05	; 5
    1e18:	ec 91       	ld	r30, X
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	ee 0f       	add	r30, r30
    1e1e:	ff 1f       	adc	r31, r31
    1e20:	e4 5e       	subi	r30, 0xE4	; 228
    1e22:	fe 4f       	sbci	r31, 0xFE	; 254
    1e24:	b9 cf       	rjmp	.-142    	; 0x1d98 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x250>
				break;

			case PARAM_KEY_SPEED:
				if (enc->getEvent() == ENC_CW_EVENT) {
    1e26:	c7 01       	movw	r24, r14
    1e28:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN7Encoder8getEventEv>
    1e2c:	81 30       	cpi	r24, 0x01	; 1
    1e2e:	39 f4       	brne	.+14     	; 0x1e3e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2f6>
					speed++;
    1e30:	f8 01       	movw	r30, r16
    1e32:	86 81       	ldd	r24, Z+6	; 0x06
    1e34:	8f 5f       	subi	r24, 0xFF	; 255
					if (speed > 25) {
    1e36:	8a 31       	cpi	r24, 0x1A	; 26
    1e38:	60 f0       	brcs	.+24     	; 0x1e52 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x30a>
						speed = 25;
    1e3a:	89 e1       	ldi	r24, 0x19	; 25
    1e3c:	0d c0       	rjmp	.+26     	; 0x1e58 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x310>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    1e3e:	c7 01       	movw	r24, r14
    1e40:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN7Encoder8getEventEv>
    1e44:	82 30       	cpi	r24, 0x02	; 2
    1e46:	59 f4       	brne	.+22     	; 0x1e5e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x316>
					speed--;
    1e48:	f8 01       	movw	r30, r16
    1e4a:	86 81       	ldd	r24, Z+6	; 0x06
    1e4c:	81 50       	subi	r24, 0x01	; 1
					if (speed < 5) {
    1e4e:	85 30       	cpi	r24, 0x05	; 5
    1e50:	10 f0       	brcs	.+4      	; 0x1e56 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x30e>
					speed++;
					if (speed > 25) {
						speed = 25;
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
					speed--;
    1e52:	86 83       	std	Z+6, r24	; 0x06
    1e54:	04 c0       	rjmp	.+8      	; 0x1e5e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x316>
					if (speed < 5) {
						speed = 5;
    1e56:	85 e0       	ldi	r24, 0x05	; 5
    1e58:	d8 01       	movw	r26, r16
    1e5a:	16 96       	adiw	r26, 0x06	; 6
    1e5c:	8c 93       	st	X, r24
					}
				}
				sprintf(buf,"%2i", speed);
    1e5e:	f8 01       	movw	r30, r16
    1e60:	86 81       	ldd	r24, Z+6	; 0x06
    1e62:	1f 92       	push	r1
    1e64:	8f 93       	push	r24
    1e66:	80 e6       	ldi	r24, 0x60	; 96
    1e68:	92 e0       	ldi	r25, 0x02	; 2
    1e6a:	9f 93       	push	r25
    1e6c:	8f 93       	push	r24
    1e6e:	9e 01       	movw	r18, r28
    1e70:	2f 5f       	subi	r18, 0xFF	; 255
    1e72:	3f 4f       	sbci	r19, 0xFF	; 255
    1e74:	29 01       	movw	r4, r18
    1e76:	3f 93       	push	r19
    1e78:	2f 93       	push	r18
    1e7a:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <sprintf>
				valp = buf;
				break;
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
					if (speed < 5) {
						speed = 5;
					}
				}
				sprintf(buf,"%2i", speed);
				valp = buf;
    1e8a:	74 2c       	mov	r7, r4
    1e8c:	65 2c       	mov	r6, r5
				break;
    1e8e:	1c c0       	rjmp	.+56     	; 0x1ec8 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x380>

			case PARAM_ACT_VFO:
				if (enc->getEvent() != ENC_NO_EVENT) {
    1e90:	c7 01       	movw	r24, r14
    1e92:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN7Encoder8getEventEv>
    1e96:	88 23       	and	r24, r24
    1e98:	61 f0       	breq	.+24     	; 0x1eb2 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x36a>
					if (activeVfo == RX) {
    1e9a:	d8 01       	movw	r26, r16
    1e9c:	13 96       	adiw	r26, 0x03	; 3
    1e9e:	8c 91       	ld	r24, X
    1ea0:	13 97       	sbiw	r26, 0x03	; 3
    1ea2:	81 11       	cpse	r24, r1
    1ea4:	04 c0       	rjmp	.+8      	; 0x1eae <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x366>
						activeVfo = TX;
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	13 96       	adiw	r26, 0x03	; 3
    1eaa:	8c 93       	st	X, r24
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x36a>
					} else {
						activeVfo = RX;
    1eae:	f8 01       	movw	r30, r16
    1eb0:	13 82       	std	Z+3, r1	; 0x03
					}
				}
				valp =  vfoact_strings[activeVfo];
    1eb2:	d8 01       	movw	r26, r16
    1eb4:	13 96       	adiw	r26, 0x03	; 3
    1eb6:	ec 91       	ld	r30, X
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	ee 0f       	add	r30, r30
    1ebc:	ff 1f       	adc	r31, r31
    1ebe:	ee 5d       	subi	r30, 0xDE	; 222
    1ec0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ec2:	6a cf       	rjmp	.-300    	; 0x1d98 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x250>


void params::update(Encoder *enc, Sw *pb, Lcd *lcd) {
	uint16_t line;
	uint16_t col;
	char *valp = NULL;
    1ec4:	71 2c       	mov	r7, r1
    1ec6:	61 2c       	mov	r6, r1
				break;

			default:
				break;
		}
		enc->clearEvent();
    1ec8:	c7 01       	movw	r24, r14
    1eca:	0e 94 d2 05 	call	0xba4	; 0xba4 <_ZN7Encoder10clearEventEv>
		line = param_display[curParam].val_psn.line;
    1ece:	f6 01       	movw	r30, r12
    1ed0:	80 81       	ld	r24, Z
		col =  param_display[curParam].val_psn.col;
    1ed2:	f8 01       	movw	r30, r16
    1ed4:	2b e0       	ldi	r18, 0x0B	; 11
    1ed6:	82 9f       	mul	r24, r18
    1ed8:	e0 0d       	add	r30, r0
    1eda:	f1 1d       	adc	r31, r1
    1edc:	11 24       	eor	r1, r1
		lcd->gotoxy(line,col);
    1ede:	44 89       	ldd	r20, Z+20	; 0x14
    1ee0:	62 89       	ldd	r22, Z+18	; 0x12
    1ee2:	c5 01       	movw	r24, r10
    1ee4:	0e 94 8d 0c 	call	0x191a	; 0x191a <_ZN3Lcd6gotoxyEhh>
		lcd->puts(valp, fg_white);
    1ee8:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <fg_white>
    1eec:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <fg_white+0x1>
    1ef0:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <fg_white+0x2>
    1ef4:	67 2d       	mov	r22, r7
    1ef6:	76 2d       	mov	r23, r6
    1ef8:	c5 01       	movw	r24, r10
    1efa:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN3Lcd4putsEPc9_pixColor>
	}


}
    1efe:	60 96       	adiw	r28, 0x10	; 16
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	f8 94       	cli
    1f04:	de bf       	out	0x3e, r29	; 62
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	cd bf       	out	0x3d, r28	; 61
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	1f 91       	pop	r17
    1f10:	0f 91       	pop	r16
    1f12:	ff 90       	pop	r15
    1f14:	ef 90       	pop	r14
    1f16:	df 90       	pop	r13
    1f18:	cf 90       	pop	r12
    1f1a:	bf 90       	pop	r11
    1f1c:	af 90       	pop	r10
    1f1e:	7f 90       	pop	r7
    1f20:	6f 90       	pop	r6
    1f22:	5f 90       	pop	r5
    1f24:	4f 90       	pop	r4
    1f26:	08 95       	ret

00001f28 <_ZN6params11updateEnterEP7EncoderP2SwP3Lcd>:
void	params::setMode(mode_t newMode) {
	mode = newMode;
}

 
void params::updateEnter(Encoder *enc, Sw *pb, Lcd *lcd) {
    1f28:	8f 92       	push	r8
    1f2a:	9f 92       	push	r9
    1f2c:	af 92       	push	r10
    1f2e:	bf 92       	push	r11
    1f30:	df 92       	push	r13
    1f32:	ef 92       	push	r14
    1f34:	ff 92       	push	r15
    1f36:	0f 93       	push	r16
    1f38:	1f 93       	push	r17
    1f3a:	cf 93       	push	r28
    1f3c:	df 93       	push	r29
    1f3e:	ec 01       	movw	r28, r24
    1f40:	7b 01       	movw	r14, r22
    1f42:	4a 01       	movw	r8, r20
    1f44:	89 01       	movw	r16, r18
	//
	// hilight current parameter on entry to update
	//
	uint16_t line = param_display[curParam].label_psn.line;
    1f46:	5c 01       	movw	r10, r24
    1f48:	8d e4       	ldi	r24, 0x4D	; 77
    1f4a:	a8 0e       	add	r10, r24
    1f4c:	b1 1c       	adc	r11, r1
    1f4e:	f5 01       	movw	r30, r10
    1f50:	80 81       	ld	r24, Z
	uint16_t col =  param_display[curParam].label_psn.col;
    1f52:	9b e0       	ldi	r25, 0x0B	; 11
    1f54:	d9 2e       	mov	r13, r25
    1f56:	fe 01       	movw	r30, r28
    1f58:	d8 9e       	mul	r13, r24
    1f5a:	e0 0d       	add	r30, r0
    1f5c:	f1 1d       	adc	r31, r1
    1f5e:	11 24       	eor	r1, r1
	lcd->gotoxy(line,col);
    1f60:	46 85       	ldd	r20, Z+14	; 0x0e
    1f62:	64 85       	ldd	r22, Z+12	; 0x0c
    1f64:	c9 01       	movw	r24, r18
    1f66:	0e 94 8d 0c 	call	0x191a	; 0x191a <_ZN3Lcd6gotoxyEhh>
	lcd->puts(param_display[curParam].label, fg_red);
    1f6a:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <fg_red>
    1f6e:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <fg_red+0x1>
    1f72:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <fg_red+0x2>
    1f76:	f5 01       	movw	r30, r10
    1f78:	80 81       	ld	r24, Z
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	d8 9e       	mul	r13, r24
    1f7e:	e0 0d       	add	r30, r0
    1f80:	f1 1d       	adc	r31, r1
    1f82:	11 24       	eor	r1, r1
    1f84:	60 89       	ldd	r22, Z+16	; 0x10
    1f86:	71 89       	ldd	r23, Z+17	; 0x11
    1f88:	c8 01       	movw	r24, r16
    1f8a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN3Lcd4putsEPc9_pixColor>
	enc->setEventRate(1);
    1f8e:	61 e0       	ldi	r22, 0x01	; 1
    1f90:	c7 01       	movw	r24, r14
    1f92:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_ZN7Encoder12setEventRateEh>
	update(enc, pb, lcd);	
    1f96:	98 01       	movw	r18, r16
    1f98:	a4 01       	movw	r20, r8
    1f9a:	b7 01       	movw	r22, r14
    1f9c:	ce 01       	movw	r24, r28
}
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	1f 91       	pop	r17
    1fa4:	0f 91       	pop	r16
    1fa6:	ff 90       	pop	r15
    1fa8:	ef 90       	pop	r14
    1faa:	df 90       	pop	r13
    1fac:	bf 90       	pop	r11
    1fae:	af 90       	pop	r10
    1fb0:	9f 90       	pop	r9
    1fb2:	8f 90       	pop	r8
	uint16_t line = param_display[curParam].label_psn.line;
	uint16_t col =  param_display[curParam].label_psn.col;
	lcd->gotoxy(line,col);
	lcd->puts(param_display[curParam].label, fg_red);
	enc->setEventRate(1);
	update(enc, pb, lcd);	
    1fb4:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <_ZN6params6updateEP7EncoderP2SwP3Lcd>

00001fb8 <_ZN2SwC1Ehh>:


//
// initialize switches
//
Sw::Sw(uint8_t s, volatile uint8_t p) {
    1fb8:	fc 01       	movw	r30, r24
    1fba:	89 ed       	ldi	r24, 0xD9	; 217
    1fbc:	92 e0       	ldi	r25, 0x02	; 2
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	80 83       	st	Z, r24
	uint8_t temp;
	uint8_t msk = (1 << s);
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	06 2e       	mov	r0, r22
    1fc8:	01 c0       	rjmp	.+2      	; 0x1fcc <_ZN2SwC1Ehh+0x14>
    1fca:	88 0f       	add	r24, r24
    1fcc:	0a 94       	dec	r0
    1fce:	ea f7       	brpl	.-6      	; 0x1fca <_ZN2SwC1Ehh+0x12>

	port = (volatile uint8_t *)p;
    1fd0:	a4 2f       	mov	r26, r20
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	b4 83       	std	Z+4, r27	; 0x04
    1fd6:	a3 83       	std	Z+3, r26	; 0x03
	pin = (volatile uint8_t *)(p-2);
    1fd8:	9d 01       	movw	r18, r26
    1fda:	22 50       	subi	r18, 0x02	; 2
    1fdc:	31 09       	sbc	r19, r1
    1fde:	36 83       	std	Z+6, r19	; 0x06
    1fe0:	25 83       	std	Z+5, r18	; 0x05
	ddr = (volatile uint8_t *)(p-1);
    1fe2:	11 97       	sbiw	r26, 0x01	; 1
    1fe4:	b0 87       	std	Z+8, r27	; 0x08
    1fe6:	a7 83       	std	Z+7, r26	; 0x07
	swNum = s;
    1fe8:	62 83       	std	Z+2, r22	; 0x02

	// set bit as input
	temp = *ddr;
    1fea:	9c 91       	ld	r25, X
	temp &= ~msk;
    1fec:	28 2f       	mov	r18, r24
    1fee:	20 95       	com	r18
    1ff0:	92 23       	and	r25, r18
	*ddr = temp;
    1ff2:	9c 93       	st	X, r25

	// enable input pullup
	temp = *port;
    1ff4:	a3 81       	ldd	r26, Z+3	; 0x03
    1ff6:	b4 81       	ldd	r27, Z+4	; 0x04
    1ff8:	9c 91       	ld	r25, X
	temp |= msk;
    1ffa:	98 2b       	or	r25, r24
	*port = temp;
    1ffc:	9c 93       	st	X, r25

	// get the current state of the switch
	temp = *pin & msk;
    1ffe:	a5 81       	ldd	r26, Z+5	; 0x05
    2000:	b6 81       	ldd	r27, Z+6	; 0x06
    2002:	9c 91       	ld	r25, X
	if (temp) {
    2004:	89 23       	and	r24, r25
    2006:	11 f0       	breq	.+4      	; 0x200c <_ZN2SwC1Ehh+0x54>
		state = PB_OPEN;
    2008:	11 86       	std	Z+9, r1	; 0x09
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <_ZN2SwC1Ehh+0x58>
	}	else {
		state = PB_CLOSE;
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	81 87       	std	Z+9, r24	; 0x09
	}
	lastEvent = EV_NONE;
    2010:	12 86       	std	Z+10, r1	; 0x0a
	Clock::registerPeriodic(this);
    2012:	cf 01       	movw	r24, r30
    2014:	0c 94 0a 04 	jmp	0x814	; 0x814 <_ZN5Clock16registerPeriodicEP8Callback>

00002018 <_ZN2Sw6updateEv>:
}


void Sw::update(void) {
    2018:	fc 01       	movw	r30, r24

uint8_t temp = *pin & (1 << swNum);
    201a:	a5 81       	ldd	r26, Z+5	; 0x05
    201c:	b6 81       	ldd	r27, Z+6	; 0x06
    201e:	2c 91       	ld	r18, X
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	02 80       	ldd	r0, Z+2	; 0x02
    2026:	02 c0       	rjmp	.+4      	; 0x202c <_ZN2Sw6updateEv+0x14>
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	0a 94       	dec	r0
    202e:	e2 f7       	brpl	.-8      	; 0x2028 <_ZN2Sw6updateEv+0x10>
    2030:	82 23       	and	r24, r18

	switch (state) {
    2032:	91 85       	ldd	r25, Z+9	; 0x09
    2034:	91 30       	cpi	r25, 0x01	; 1
    2036:	51 f0       	breq	.+20     	; 0x204c <_ZN2Sw6updateEv+0x34>
    2038:	28 f0       	brcs	.+10     	; 0x2044 <_ZN2Sw6updateEv+0x2c>
    203a:	92 30       	cpi	r25, 0x02	; 2
    203c:	61 f0       	breq	.+24     	; 0x2056 <_ZN2Sw6updateEv+0x3e>
    203e:	93 30       	cpi	r25, 0x03	; 3
    2040:	79 f0       	breq	.+30     	; 0x2060 <_ZN2Sw6updateEv+0x48>
    2042:	08 95       	ret
	
		case PB_OPEN:
			if (!temp) {
    2044:	81 11       	cpse	r24, r1
    2046:	11 c0       	rjmp	.+34     	; 0x206a <_ZN2Sw6updateEv+0x52>
				state = PB_CLOSE_DLY;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	08 c0       	rjmp	.+16     	; 0x205c <_ZN2Sw6updateEv+0x44>
			}
			break;

		case PB_CLOSE_DLY:
			if (!temp) {
    204c:	81 11       	cpse	r24, r1
    204e:	0d c0       	rjmp	.+26     	; 0x206a <_ZN2Sw6updateEv+0x52>
				state = PB_CLOSE;
    2050:	82 e0       	ldi	r24, 0x02	; 2
    2052:	81 87       	std	Z+9, r24	; 0x09
    2054:	09 c0       	rjmp	.+18     	; 0x2068 <_ZN2Sw6updateEv+0x50>
				lastEvent = EV_CLOSE;
			}
			break;	
	
		case PB_CLOSE:
			if (temp) {
    2056:	88 23       	and	r24, r24
    2058:	41 f0       	breq	.+16     	; 0x206a <_ZN2Sw6updateEv+0x52>
				state = PB_OPEN_DLY;
    205a:	83 e0       	ldi	r24, 0x03	; 3
    205c:	81 87       	std	Z+9, r24	; 0x09
    205e:	08 95       	ret
			}	
			break;

		case PB_OPEN_DLY:
			if (temp) {
    2060:	88 23       	and	r24, r24
    2062:	19 f0       	breq	.+6      	; 0x206a <_ZN2Sw6updateEv+0x52>
				state = PB_OPEN;
    2064:	11 86       	std	Z+9, r1	; 0x09
				lastEvent = EV_OPEN;
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	82 87       	std	Z+10, r24	; 0x0a
    206a:	08 95       	ret

0000206c <_ZN2Sw8callbackEv>:
	lastEvent = EV_NONE;
}


void Sw::callback(void) {
	update();
    206c:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <_ZN2Sw6updateEv>

00002070 <_ZN2Sw8hasEventEv>:
	}				
	
}


bool	Sw::hasEvent(void) {
    2070:	21 e0       	ldi	r18, 0x01	; 1
    2072:	fc 01       	movw	r30, r24
    2074:	82 85       	ldd	r24, Z+10	; 0x0a
    2076:	81 11       	cpse	r24, r1
    2078:	01 c0       	rjmp	.+2      	; 0x207c <_ZN2Sw8hasEventEv+0xc>
    207a:	20 e0       	ldi	r18, 0x00	; 0
	if (lastEvent != EV_NONE) {
		return true;
	}
	return false;
}
    207c:	82 2f       	mov	r24, r18
    207e:	08 95       	ret

00002080 <_ZN2Sw8getEventEv>:


event Sw::getEvent(void) {
	return lastEvent;
}
    2080:	fc 01       	movw	r30, r24
    2082:	82 85       	ldd	r24, Z+10	; 0x0a
    2084:	08 95       	ret

00002086 <_ZN2Sw10clearEventEv>:

void Sw::clearEvent(void) {
	lastEvent = EV_NONE;
    2086:	fc 01       	movw	r30, r24
    2088:	12 86       	std	Z+10, r1	; 0x0a
    208a:	08 95       	ret

0000208c <_ZN2Sw8isClosedEv>:
}


bool Sw::isClosed(void) {

	return ((state == PB_CLOSE) || (state == PB_OPEN_DLY));
    208c:	fc 01       	movw	r30, r24
    208e:	91 85       	ldd	r25, Z+9	; 0x09
    2090:	92 50       	subi	r25, 0x02	; 2
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	92 30       	cpi	r25, 0x02	; 2
    2096:	08 f0       	brcs	.+2      	; 0x209a <_ZN2Sw8isClosedEv+0xe>
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	08 95       	ret

0000209c <_ZN3vfoC1EP7EncoderP13vfoParametersj>:
uint32_t freq = vfoData[band].rxFreq;
char tbuf[16];

	intToString32(freq,tbuf);
	formatDisplayFreq(tbuf,buf);
}
    209c:	cf 92       	push	r12
    209e:	df 92       	push	r13
    20a0:	ef 92       	push	r14
    20a2:	ff 92       	push	r15
    20a4:	cf 93       	push	r28
    20a6:	fa 01       	movw	r30, r20
    20a8:	dc 01       	movw	r26, r24
    20aa:	4e 55       	subi	r20, 0x5E	; 94
    20ac:	5f 4f       	sbci	r21, 0xFF	; 255
    20ae:	c0 80       	ld	r12, Z
    20b0:	d1 80       	ldd	r13, Z+1	; 0x01
    20b2:	e2 80       	ldd	r14, Z+2	; 0x02
    20b4:	f3 80       	ldd	r15, Z+3	; 0x03
    20b6:	cd 92       	st	X+, r12
    20b8:	dd 92       	st	X+, r13
    20ba:	ed 92       	st	X+, r14
    20bc:	fc 92       	st	X, r15
    20be:	13 97       	sbiw	r26, 0x03	; 3
    20c0:	c4 80       	ldd	r12, Z+4	; 0x04
    20c2:	d5 80       	ldd	r13, Z+5	; 0x05
    20c4:	e6 80       	ldd	r14, Z+6	; 0x06
    20c6:	f7 80       	ldd	r15, Z+7	; 0x07
    20c8:	14 96       	adiw	r26, 0x04	; 4
    20ca:	cd 92       	st	X+, r12
    20cc:	dd 92       	st	X+, r13
    20ce:	ed 92       	st	X+, r14
    20d0:	fc 92       	st	X, r15
    20d2:	17 97       	sbiw	r26, 0x07	; 7
    20d4:	c0 85       	ldd	r28, Z+8	; 0x08
    20d6:	18 96       	adiw	r26, 0x08	; 8
    20d8:	cc 93       	st	X, r28
    20da:	18 97       	sbiw	r26, 0x08	; 8
    20dc:	c1 84       	ldd	r12, Z+9	; 0x09
    20de:	d2 84       	ldd	r13, Z+10	; 0x0a
    20e0:	e3 84       	ldd	r14, Z+11	; 0x0b
    20e2:	f4 84       	ldd	r15, Z+12	; 0x0c
    20e4:	19 96       	adiw	r26, 0x09	; 9
    20e6:	cd 92       	st	X+, r12
    20e8:	dd 92       	st	X+, r13
    20ea:	ed 92       	st	X+, r14
    20ec:	fc 92       	st	X, r15
    20ee:	1c 97       	sbiw	r26, 0x0c	; 12
    20f0:	c5 84       	ldd	r12, Z+13	; 0x0d
    20f2:	d6 84       	ldd	r13, Z+14	; 0x0e
    20f4:	e7 84       	ldd	r14, Z+15	; 0x0f
    20f6:	f0 88       	ldd	r15, Z+16	; 0x10
    20f8:	1d 96       	adiw	r26, 0x0d	; 13
    20fa:	cd 92       	st	X+, r12
    20fc:	dd 92       	st	X+, r13
    20fe:	ed 92       	st	X+, r14
    2100:	fc 92       	st	X, r15
    2102:	50 97       	sbiw	r26, 0x10	; 16
    2104:	c1 89       	ldd	r28, Z+17	; 0x11
    2106:	51 96       	adiw	r26, 0x11	; 17
    2108:	cc 93       	st	X, r28
    210a:	51 97       	sbiw	r26, 0x11	; 17
    210c:	72 96       	adiw	r30, 0x12	; 18
    210e:	52 96       	adiw	r26, 0x12	; 18
    2110:	e4 17       	cp	r30, r20
    2112:	f5 07       	cpc	r31, r21
    2114:	61 f6       	brne	.-104    	; 0x20ae <_ZN3vfoC1EP7EncoderP13vfoParametersj+0x12>
    2116:	fc 01       	movw	r30, r24
    2118:	e9 55       	subi	r30, 0x59	; 89
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	71 83       	std	Z+1, r23	; 0x01
    211e:	60 83       	st	Z, r22
    2120:	35 97       	sbiw	r30, 0x05	; 5
    2122:	44 e6       	ldi	r20, 0x64	; 100
    2124:	50 e0       	ldi	r21, 0x00	; 0
    2126:	60 e0       	ldi	r22, 0x00	; 0
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	40 83       	st	Z, r20
    212c:	51 83       	std	Z+1, r21	; 0x01
    212e:	62 83       	std	Z+2, r22	; 0x02
    2130:	73 83       	std	Z+3, r23	; 0x03
    2132:	34 96       	adiw	r30, 0x04	; 4
    2134:	41 e0       	ldi	r20, 0x01	; 1
    2136:	40 83       	st	Z, r20
    2138:	33 96       	adiw	r30, 0x03	; 3
    213a:	31 83       	std	Z+1, r19	; 0x01
    213c:	20 83       	st	Z, r18
    213e:	cf 91       	pop	r28
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	df 90       	pop	r13
    2146:	cf 90       	pop	r12
    2148:	08 95       	ret

0000214a <_ZN3vfo6updateEh>:
    214a:	8f 92       	push	r8
    214c:	9f 92       	push	r9
    214e:	af 92       	push	r10
    2150:	bf 92       	push	r11
    2152:	cf 92       	push	r12
    2154:	df 92       	push	r13
    2156:	ef 92       	push	r14
    2158:	ff 92       	push	r15
    215a:	1f 93       	push	r17
    215c:	cf 93       	push	r28
    215e:	df 93       	push	r29
    2160:	ec 01       	movw	r28, r24
    2162:	16 2f       	mov	r17, r22
    2164:	7c 01       	movw	r14, r24
    2166:	27 ea       	ldi	r18, 0xA7	; 167
    2168:	e2 0e       	add	r14, r18
    216a:	f1 1c       	adc	r15, r1
    216c:	f7 01       	movw	r30, r14
    216e:	80 81       	ld	r24, Z
    2170:	91 81       	ldd	r25, Z+1	; 0x01
    2172:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_ZN7Encoder8hasEventEv>
    2176:	88 23       	and	r24, r24
    2178:	09 f4       	brne	.+2      	; 0x217c <_ZN3vfo6updateEh+0x32>
    217a:	6e c0       	rjmp	.+220    	; 0x2258 <_ZN3vfo6updateEh+0x10e>
    217c:	f7 01       	movw	r30, r14
    217e:	80 81       	ld	r24, Z
    2180:	91 81       	ldd	r25, Z+1	; 0x01
    2182:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN7Encoder8getEventEv>
    2186:	82 30       	cpi	r24, 0x02	; 2
    2188:	91 f5       	brne	.+100    	; 0x21ee <_ZN3vfo6updateEh+0xa4>
    218a:	fe 01       	movw	r30, r28
    218c:	ee 55       	subi	r30, 0x5E	; 94
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	80 80       	ld	r8, Z
    2192:	91 80       	ldd	r9, Z+1	; 0x01
    2194:	a2 80       	ldd	r10, Z+2	; 0x02
    2196:	b3 80       	ldd	r11, Z+3	; 0x03
    2198:	f7 01       	movw	r30, r14
    219a:	80 81       	ld	r24, Z
    219c:	91 81       	ldd	r25, Z+1	; 0x01
    219e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <_ZN7Encoder17getMissedCcwCountEv>
    21a2:	dc 01       	movw	r26, r24
    21a4:	11 96       	adiw	r26, 0x01	; 1
    21a6:	a5 01       	movw	r20, r10
    21a8:	94 01       	movw	r18, r8
    21aa:	0e 94 ab 14 	call	0x2956	; 0x2956 <__mulshisi3>
    21ae:	fe 01       	movw	r30, r28
    21b0:	22 e1       	ldi	r18, 0x12	; 18
    21b2:	12 9f       	mul	r17, r18
    21b4:	e0 0d       	add	r30, r0
    21b6:	f1 1d       	adc	r31, r1
    21b8:	11 24       	eor	r1, r1
    21ba:	c0 80       	ld	r12, Z
    21bc:	d1 80       	ldd	r13, Z+1	; 0x01
    21be:	e2 80       	ldd	r14, Z+2	; 0x02
    21c0:	f3 80       	ldd	r15, Z+3	; 0x03
    21c2:	c6 1a       	sub	r12, r22
    21c4:	d7 0a       	sbc	r13, r23
    21c6:	e8 0a       	sbc	r14, r24
    21c8:	f9 0a       	sbc	r15, r25
    21ca:	c0 82       	st	Z, r12
    21cc:	d1 82       	std	Z+1, r13	; 0x01
    21ce:	e2 82       	std	Z+2, r14	; 0x02
    21d0:	f3 82       	std	Z+3, r15	; 0x03
    21d2:	ef 01       	movw	r28, r30
    21d4:	c1 84       	ldd	r12, Z+9	; 0x09
    21d6:	d2 84       	ldd	r13, Z+10	; 0x0a
    21d8:	e3 84       	ldd	r14, Z+11	; 0x0b
    21da:	f4 84       	ldd	r15, Z+12	; 0x0c
    21dc:	a7 01       	movw	r20, r14
    21de:	96 01       	movw	r18, r12
    21e0:	26 1b       	sub	r18, r22
    21e2:	37 0b       	sbc	r19, r23
    21e4:	48 0b       	sbc	r20, r24
    21e6:	59 0b       	sbc	r21, r25
    21e8:	da 01       	movw	r26, r20
    21ea:	c9 01       	movw	r24, r18
    21ec:	31 c0       	rjmp	.+98     	; 0x2250 <_ZN3vfo6updateEh+0x106>
    21ee:	81 30       	cpi	r24, 0x01	; 1
    21f0:	99 f5       	brne	.+102    	; 0x2258 <_ZN3vfo6updateEh+0x10e>
    21f2:	fe 01       	movw	r30, r28
    21f4:	ee 55       	subi	r30, 0x5E	; 94
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	80 80       	ld	r8, Z
    21fa:	91 80       	ldd	r9, Z+1	; 0x01
    21fc:	a2 80       	ldd	r10, Z+2	; 0x02
    21fe:	b3 80       	ldd	r11, Z+3	; 0x03
    2200:	f7 01       	movw	r30, r14
    2202:	80 81       	ld	r24, Z
    2204:	91 81       	ldd	r25, Z+1	; 0x01
    2206:	0e 94 d5 05 	call	0xbaa	; 0xbaa <_ZN7Encoder16getMissedCwCountEv>
    220a:	dc 01       	movw	r26, r24
    220c:	11 96       	adiw	r26, 0x01	; 1
    220e:	a5 01       	movw	r20, r10
    2210:	94 01       	movw	r18, r8
    2212:	0e 94 ab 14 	call	0x2956	; 0x2956 <__mulshisi3>
    2216:	fe 01       	movw	r30, r28
    2218:	22 e1       	ldi	r18, 0x12	; 18
    221a:	12 9f       	mul	r17, r18
    221c:	e0 0d       	add	r30, r0
    221e:	f1 1d       	adc	r31, r1
    2220:	11 24       	eor	r1, r1
    2222:	c0 80       	ld	r12, Z
    2224:	d1 80       	ldd	r13, Z+1	; 0x01
    2226:	e2 80       	ldd	r14, Z+2	; 0x02
    2228:	f3 80       	ldd	r15, Z+3	; 0x03
    222a:	c6 0e       	add	r12, r22
    222c:	d7 1e       	adc	r13, r23
    222e:	e8 1e       	adc	r14, r24
    2230:	f9 1e       	adc	r15, r25
    2232:	c0 82       	st	Z, r12
    2234:	d1 82       	std	Z+1, r13	; 0x01
    2236:	e2 82       	std	Z+2, r14	; 0x02
    2238:	f3 82       	std	Z+3, r15	; 0x03
    223a:	ef 01       	movw	r28, r30
    223c:	c1 84       	ldd	r12, Z+9	; 0x09
    223e:	d2 84       	ldd	r13, Z+10	; 0x0a
    2240:	e3 84       	ldd	r14, Z+11	; 0x0b
    2242:	f4 84       	ldd	r15, Z+12	; 0x0c
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	8c 0d       	add	r24, r12
    224a:	9d 1d       	adc	r25, r13
    224c:	ae 1d       	adc	r26, r14
    224e:	bf 1d       	adc	r27, r15
    2250:	89 87       	std	Y+9, r24	; 0x09
    2252:	9a 87       	std	Y+10, r25	; 0x0a
    2254:	ab 87       	std	Y+11, r26	; 0x0b
    2256:	bc 87       	std	Y+12, r27	; 0x0c
    2258:	df 91       	pop	r29
    225a:	cf 91       	pop	r28
    225c:	1f 91       	pop	r17
    225e:	ff 90       	pop	r15
    2260:	ef 90       	pop	r14
    2262:	df 90       	pop	r13
    2264:	cf 90       	pop	r12
    2266:	bf 90       	pop	r11
    2268:	af 90       	pop	r10
    226a:	9f 90       	pop	r9
    226c:	8f 90       	pop	r8
    226e:	08 95       	ret

00002270 <_ZN3vfo9getRxFreqE5_band>:
    2270:	0f 93       	push	r16
    2272:	1f 93       	push	r17
    2274:	fc 01       	movw	r30, r24
    2276:	02 e1       	ldi	r16, 0x12	; 18
    2278:	60 9f       	mul	r22, r16
    227a:	e0 0d       	add	r30, r0
    227c:	f1 1d       	adc	r31, r1
    227e:	11 24       	eor	r1, r1
    2280:	80 81       	ld	r24, Z
    2282:	91 81       	ldd	r25, Z+1	; 0x01
    2284:	a2 81       	ldd	r26, Z+2	; 0x02
    2286:	b3 81       	ldd	r27, Z+3	; 0x03
    2288:	44 81       	ldd	r20, Z+4	; 0x04
    228a:	55 81       	ldd	r21, Z+5	; 0x05
    228c:	66 81       	ldd	r22, Z+6	; 0x06
    228e:	77 81       	ldd	r23, Z+7	; 0x07
    2290:	8c 01       	movw	r16, r24
    2292:	9d 01       	movw	r18, r26
    2294:	04 0f       	add	r16, r20
    2296:	15 1f       	adc	r17, r21
    2298:	26 1f       	adc	r18, r22
    229a:	37 1f       	adc	r19, r23
    229c:	c9 01       	movw	r24, r18
    229e:	b8 01       	movw	r22, r16
    22a0:	20 85       	ldd	r18, Z+8	; 0x08
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e0       	ldi	r20, 0x00	; 0
    22a6:	50 e0       	ldi	r21, 0x00	; 0
    22a8:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodsi4>
    22ac:	ca 01       	movw	r24, r20
    22ae:	b9 01       	movw	r22, r18
    22b0:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <__floatunsisf>
    22b4:	1f 91       	pop	r17
    22b6:	0f 91       	pop	r16
    22b8:	08 95       	ret

000022ba <_ZN3vfo9getTxFreqE5_band>:
    22ba:	0f 93       	push	r16
    22bc:	1f 93       	push	r17
    22be:	fc 01       	movw	r30, r24
    22c0:	02 e1       	ldi	r16, 0x12	; 18
    22c2:	60 9f       	mul	r22, r16
    22c4:	e0 0d       	add	r30, r0
    22c6:	f1 1d       	adc	r31, r1
    22c8:	11 24       	eor	r1, r1
    22ca:	81 85       	ldd	r24, Z+9	; 0x09
    22cc:	92 85       	ldd	r25, Z+10	; 0x0a
    22ce:	a3 85       	ldd	r26, Z+11	; 0x0b
    22d0:	b4 85       	ldd	r27, Z+12	; 0x0c
    22d2:	45 85       	ldd	r20, Z+13	; 0x0d
    22d4:	56 85       	ldd	r21, Z+14	; 0x0e
    22d6:	67 85       	ldd	r22, Z+15	; 0x0f
    22d8:	70 89       	ldd	r23, Z+16	; 0x10
    22da:	8c 01       	movw	r16, r24
    22dc:	9d 01       	movw	r18, r26
    22de:	04 0f       	add	r16, r20
    22e0:	15 1f       	adc	r17, r21
    22e2:	26 1f       	adc	r18, r22
    22e4:	37 1f       	adc	r19, r23
    22e6:	c9 01       	movw	r24, r18
    22e8:	b8 01       	movw	r22, r16
    22ea:	21 89       	ldd	r18, Z+17	; 0x11
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	50 e0       	ldi	r21, 0x00	; 0
    22f2:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodsi4>
    22f6:	ca 01       	movw	r24, r20
    22f8:	b9 01       	movw	r22, r18
    22fa:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <__floatunsisf>
    22fe:	1f 91       	pop	r17
    2300:	0f 91       	pop	r16
    2302:	08 95       	ret

00002304 <_ZN3vfo7setStepE6step_t>:
    2304:	fc 01       	movw	r30, r24
    2306:	ea 55       	subi	r30, 0x5A	; 90
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	60 83       	st	Z, r22
    230c:	dc 01       	movw	r26, r24
    230e:	ae 55       	subi	r26, 0x5E	; 94
    2310:	bf 4f       	sbci	r27, 0xFF	; 255
    2312:	84 e0       	ldi	r24, 0x04	; 4
    2314:	68 9f       	mul	r22, r24
    2316:	f0 01       	movw	r30, r0
    2318:	11 24       	eor	r1, r1
    231a:	e5 52       	subi	r30, 0x25	; 37
    231c:	fd 4f       	sbci	r31, 0xFD	; 253
    231e:	40 81       	ld	r20, Z
    2320:	51 81       	ldd	r21, Z+1	; 0x01
    2322:	62 81       	ldd	r22, Z+2	; 0x02
    2324:	73 81       	ldd	r23, Z+3	; 0x03
    2326:	4d 93       	st	X+, r20
    2328:	5d 93       	st	X+, r21
    232a:	6d 93       	st	X+, r22
    232c:	7c 93       	st	X, r23
    232e:	13 97       	sbiw	r26, 0x03	; 3
    2330:	08 95       	ret

00002332 <_ZN3vfo13intToString32EmPc>:
    2332:	cf 92       	push	r12
    2334:	df 92       	push	r13
    2336:	ef 92       	push	r14
    2338:	ff 92       	push	r15
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
    233e:	6a 01       	movw	r12, r20
    2340:	7b 01       	movw	r14, r22
    2342:	e9 01       	movw	r28, r18
    2344:	cb 01       	movw	r24, r22
    2346:	ba 01       	movw	r22, r20
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	31 ee       	ldi	r19, 0xE1	; 225
    234c:	45 ef       	ldi	r20, 0xF5	; 245
    234e:	55 e0       	ldi	r21, 0x05	; 5
    2350:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodsi4>
    2354:	80 e3       	ldi	r24, 0x30	; 48
    2356:	82 0f       	add	r24, r18
    2358:	88 83       	st	Y, r24
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	71 ee       	ldi	r23, 0xE1	; 225
    235e:	85 ef       	ldi	r24, 0xF5	; 245
    2360:	95 e0       	ldi	r25, 0x05	; 5
    2362:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__mulsi3>
    2366:	c6 1a       	sub	r12, r22
    2368:	d7 0a       	sbc	r13, r23
    236a:	e8 0a       	sbc	r14, r24
    236c:	f9 0a       	sbc	r15, r25
    236e:	c7 01       	movw	r24, r14
    2370:	b6 01       	movw	r22, r12
    2372:	20 e8       	ldi	r18, 0x80	; 128
    2374:	36 e9       	ldi	r19, 0x96	; 150
    2376:	48 e9       	ldi	r20, 0x98	; 152
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodsi4>
    237e:	80 e3       	ldi	r24, 0x30	; 48
    2380:	82 0f       	add	r24, r18
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	60 e8       	ldi	r22, 0x80	; 128
    2386:	76 e9       	ldi	r23, 0x96	; 150
    2388:	88 e9       	ldi	r24, 0x98	; 152
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__mulsi3>
    2390:	c6 1a       	sub	r12, r22
    2392:	d7 0a       	sbc	r13, r23
    2394:	e8 0a       	sbc	r14, r24
    2396:	f9 0a       	sbc	r15, r25
    2398:	c7 01       	movw	r24, r14
    239a:	b6 01       	movw	r22, r12
    239c:	20 e4       	ldi	r18, 0x40	; 64
    239e:	32 e4       	ldi	r19, 0x42	; 66
    23a0:	4f e0       	ldi	r20, 0x0F	; 15
    23a2:	50 e0       	ldi	r21, 0x00	; 0
    23a4:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodsi4>
    23a8:	80 e3       	ldi	r24, 0x30	; 48
    23aa:	82 0f       	add	r24, r18
    23ac:	8a 83       	std	Y+2, r24	; 0x02
    23ae:	60 e4       	ldi	r22, 0x40	; 64
    23b0:	72 e4       	ldi	r23, 0x42	; 66
    23b2:	8f e0       	ldi	r24, 0x0F	; 15
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__mulsi3>
    23ba:	c6 1a       	sub	r12, r22
    23bc:	d7 0a       	sbc	r13, r23
    23be:	e8 0a       	sbc	r14, r24
    23c0:	f9 0a       	sbc	r15, r25
    23c2:	c7 01       	movw	r24, r14
    23c4:	b6 01       	movw	r22, r12
    23c6:	20 ea       	ldi	r18, 0xA0	; 160
    23c8:	36 e8       	ldi	r19, 0x86	; 134
    23ca:	41 e0       	ldi	r20, 0x01	; 1
    23cc:	50 e0       	ldi	r21, 0x00	; 0
    23ce:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodsi4>
    23d2:	80 e3       	ldi	r24, 0x30	; 48
    23d4:	82 0f       	add	r24, r18
    23d6:	8b 83       	std	Y+3, r24	; 0x03
    23d8:	60 ea       	ldi	r22, 0xA0	; 160
    23da:	76 e8       	ldi	r23, 0x86	; 134
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__mulsi3>
    23e4:	c6 1a       	sub	r12, r22
    23e6:	d7 0a       	sbc	r13, r23
    23e8:	e8 0a       	sbc	r14, r24
    23ea:	f9 0a       	sbc	r15, r25
    23ec:	c7 01       	movw	r24, r14
    23ee:	b6 01       	movw	r22, r12
    23f0:	20 e1       	ldi	r18, 0x10	; 16
    23f2:	37 e2       	ldi	r19, 0x27	; 39
    23f4:	40 e0       	ldi	r20, 0x00	; 0
    23f6:	50 e0       	ldi	r21, 0x00	; 0
    23f8:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodsi4>
    23fc:	80 e3       	ldi	r24, 0x30	; 48
    23fe:	82 0f       	add	r24, r18
    2400:	8c 83       	std	Y+4, r24	; 0x04
    2402:	a0 e1       	ldi	r26, 0x10	; 16
    2404:	b7 e2       	ldi	r27, 0x27	; 39
    2406:	0e 94 a0 14 	call	0x2940	; 0x2940 <__muluhisi3>
    240a:	c6 1a       	sub	r12, r22
    240c:	d7 0a       	sbc	r13, r23
    240e:	e8 0a       	sbc	r14, r24
    2410:	f9 0a       	sbc	r15, r25
    2412:	c7 01       	movw	r24, r14
    2414:	b6 01       	movw	r22, r12
    2416:	28 ee       	ldi	r18, 0xE8	; 232
    2418:	33 e0       	ldi	r19, 0x03	; 3
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	50 e0       	ldi	r21, 0x00	; 0
    241e:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodsi4>
    2422:	80 e3       	ldi	r24, 0x30	; 48
    2424:	82 0f       	add	r24, r18
    2426:	8d 83       	std	Y+5, r24	; 0x05
    2428:	a8 ee       	ldi	r26, 0xE8	; 232
    242a:	b3 e0       	ldi	r27, 0x03	; 3
    242c:	0e 94 a0 14 	call	0x2940	; 0x2940 <__muluhisi3>
    2430:	c6 1a       	sub	r12, r22
    2432:	d7 0a       	sbc	r13, r23
    2434:	e8 0a       	sbc	r14, r24
    2436:	f9 0a       	sbc	r15, r25
    2438:	c7 01       	movw	r24, r14
    243a:	b6 01       	movw	r22, r12
    243c:	24 e6       	ldi	r18, 0x64	; 100
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodsi4>
    2448:	80 e3       	ldi	r24, 0x30	; 48
    244a:	82 0f       	add	r24, r18
    244c:	8e 83       	std	Y+6, r24	; 0x06
    244e:	a4 e6       	ldi	r26, 0x64	; 100
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	0e 94 a0 14 	call	0x2940	; 0x2940 <__muluhisi3>
    2456:	c6 1a       	sub	r12, r22
    2458:	d7 0a       	sbc	r13, r23
    245a:	e8 0a       	sbc	r14, r24
    245c:	f9 0a       	sbc	r15, r25
    245e:	c7 01       	movw	r24, r14
    2460:	b6 01       	movw	r22, r12
    2462:	2a e0       	ldi	r18, 0x0A	; 10
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e0       	ldi	r20, 0x00	; 0
    2468:	50 e0       	ldi	r21, 0x00	; 0
    246a:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodsi4>
    246e:	80 e3       	ldi	r24, 0x30	; 48
    2470:	82 0f       	add	r24, r18
    2472:	8f 83       	std	Y+7, r24	; 0x07
    2474:	aa e0       	ldi	r26, 0x0A	; 10
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	0e 94 a0 14 	call	0x2940	; 0x2940 <__muluhisi3>
    247c:	a7 01       	movw	r20, r14
    247e:	96 01       	movw	r18, r12
    2480:	26 1b       	sub	r18, r22
    2482:	37 0b       	sbc	r19, r23
    2484:	48 0b       	sbc	r20, r24
    2486:	59 0b       	sbc	r21, r25
    2488:	da 01       	movw	r26, r20
    248a:	c9 01       	movw	r24, r18
    248c:	80 5d       	subi	r24, 0xD0	; 208
    248e:	88 87       	std	Y+8, r24	; 0x08
    2490:	19 86       	std	Y+9, r1	; 0x09
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	ff 90       	pop	r15
    2498:	ef 90       	pop	r14
    249a:	df 90       	pop	r13
    249c:	cf 90       	pop	r12
    249e:	08 95       	ret

000024a0 <_ZN3vfo17formatDisplayFreqEPcS0_>:
    24a0:	fa 01       	movw	r30, r20
    24a2:	db 01       	movw	r26, r22
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	5e e2       	ldi	r21, 0x2E	; 46
    24ae:	21 15       	cp	r18, r1
    24b0:	31 05       	cpc	r19, r1
    24b2:	59 f0       	breq	.+22     	; 0x24ca <_ZN3vfo17formatDisplayFreqEPcS0_+0x2a>
    24b4:	83 30       	cpi	r24, 0x03	; 3
    24b6:	91 05       	cpc	r25, r1
    24b8:	19 f0       	breq	.+6      	; 0x24c0 <_ZN3vfo17formatDisplayFreqEPcS0_+0x20>
    24ba:	86 30       	cpi	r24, 0x06	; 6
    24bc:	91 05       	cpc	r25, r1
    24be:	11 f4       	brne	.+4      	; 0x24c4 <_ZN3vfo17formatDisplayFreqEPcS0_+0x24>
    24c0:	50 83       	st	Z, r21
    24c2:	31 96       	adiw	r30, 0x01	; 1
    24c4:	2c 91       	ld	r18, X
    24c6:	20 83       	st	Z, r18
    24c8:	04 c0       	rjmp	.+8      	; 0x24d2 <_ZN3vfo17formatDisplayFreqEPcS0_+0x32>
    24ca:	4c 91       	ld	r20, X
    24cc:	40 33       	cpi	r20, 0x30	; 48
    24ce:	21 f0       	breq	.+8      	; 0x24d8 <_ZN3vfo17formatDisplayFreqEPcS0_+0x38>
    24d0:	40 83       	st	Z, r20
    24d2:	31 96       	adiw	r30, 0x01	; 1
    24d4:	21 e0       	ldi	r18, 0x01	; 1
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	01 96       	adiw	r24, 0x01	; 1
    24da:	11 96       	adiw	r26, 0x01	; 1
    24dc:	89 30       	cpi	r24, 0x09	; 9
    24de:	91 05       	cpc	r25, r1
    24e0:	31 f7       	brne	.-52     	; 0x24ae <_ZN3vfo17formatDisplayFreqEPcS0_+0xe>
    24e2:	10 82       	st	Z, r1
    24e4:	08 95       	ret

000024e6 <_ZN3vfo16getTxDisplayFreqEPc5_band>:
	*dstptr = '\0';
}



void vfo::getTxDisplayFreq(char *buf, band_t band) {
    24e6:	ef 92       	push	r14
    24e8:	ff 92       	push	r15
    24ea:	0f 93       	push	r16
    24ec:	1f 93       	push	r17
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	60 97       	sbiw	r28, 0x10	; 16
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	de bf       	out	0x3e, r29	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	cd bf       	out	0x3d, r28	; 61
    2502:	8c 01       	movw	r16, r24
    2504:	7b 01       	movw	r14, r22

uint32_t freq = vfoData[band].txFreq;
    2506:	fc 01       	movw	r30, r24
    2508:	82 e1       	ldi	r24, 0x12	; 18
    250a:	48 9f       	mul	r20, r24
    250c:	e0 0d       	add	r30, r0
    250e:	f1 1d       	adc	r31, r1
    2510:	11 24       	eor	r1, r1
char tbuf[16];

	intToString32(freq,tbuf);
    2512:	41 85       	ldd	r20, Z+9	; 0x09
    2514:	52 85       	ldd	r21, Z+10	; 0x0a
    2516:	63 85       	ldd	r22, Z+11	; 0x0b
    2518:	74 85       	ldd	r23, Z+12	; 0x0c
    251a:	9e 01       	movw	r18, r28
    251c:	2f 5f       	subi	r18, 0xFF	; 255
    251e:	3f 4f       	sbci	r19, 0xFF	; 255
    2520:	c8 01       	movw	r24, r16
    2522:	0e 94 99 11 	call	0x2332	; 0x2332 <_ZN3vfo13intToString32EmPc>
	formatDisplayFreq(tbuf,buf);
    2526:	a7 01       	movw	r20, r14
    2528:	be 01       	movw	r22, r28
    252a:	6f 5f       	subi	r22, 0xFF	; 255
    252c:	7f 4f       	sbci	r23, 0xFF	; 255
    252e:	c8 01       	movw	r24, r16
    2530:	0e 94 50 12 	call	0x24a0	; 0x24a0 <_ZN3vfo17formatDisplayFreqEPcS0_>
}
    2534:	60 96       	adiw	r28, 0x10	; 16
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	1f 91       	pop	r17
    2546:	0f 91       	pop	r16
    2548:	ff 90       	pop	r15
    254a:	ef 90       	pop	r14
    254c:	08 95       	ret

0000254e <_ZN3vfo7getLineEv>:


uint16_t vfo::getLine(void) {
	return line;
    254e:	87 55       	subi	r24, 0x57	; 87
    2550:	9f 4f       	sbci	r25, 0xFF	; 255
}
    2552:	fc 01       	movw	r30, r24
    2554:	80 81       	ld	r24, Z
    2556:	91 81       	ldd	r25, Z+1	; 0x01
    2558:	08 95       	ret

0000255a <__fixunssfsi>:
    255a:	0e 94 21 13 	call	0x2642	; 0x2642 <__fp_splitA>
    255e:	88 f0       	brcs	.+34     	; 0x2582 <__fixunssfsi+0x28>
    2560:	9f 57       	subi	r25, 0x7F	; 127
    2562:	98 f0       	brcs	.+38     	; 0x258a <__fixunssfsi+0x30>
    2564:	b9 2f       	mov	r27, r25
    2566:	99 27       	eor	r25, r25
    2568:	b7 51       	subi	r27, 0x17	; 23
    256a:	b0 f0       	brcs	.+44     	; 0x2598 <__fixunssfsi+0x3e>
    256c:	e1 f0       	breq	.+56     	; 0x25a6 <__fixunssfsi+0x4c>
    256e:	66 0f       	add	r22, r22
    2570:	77 1f       	adc	r23, r23
    2572:	88 1f       	adc	r24, r24
    2574:	99 1f       	adc	r25, r25
    2576:	1a f0       	brmi	.+6      	; 0x257e <__fixunssfsi+0x24>
    2578:	ba 95       	dec	r27
    257a:	c9 f7       	brne	.-14     	; 0x256e <__fixunssfsi+0x14>
    257c:	14 c0       	rjmp	.+40     	; 0x25a6 <__fixunssfsi+0x4c>
    257e:	b1 30       	cpi	r27, 0x01	; 1
    2580:	91 f0       	breq	.+36     	; 0x25a6 <__fixunssfsi+0x4c>
    2582:	0e 94 3b 13 	call	0x2676	; 0x2676 <__fp_zero>
    2586:	b1 e0       	ldi	r27, 0x01	; 1
    2588:	08 95       	ret
    258a:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__fp_zero>
    258e:	67 2f       	mov	r22, r23
    2590:	78 2f       	mov	r23, r24
    2592:	88 27       	eor	r24, r24
    2594:	b8 5f       	subi	r27, 0xF8	; 248
    2596:	39 f0       	breq	.+14     	; 0x25a6 <__fixunssfsi+0x4c>
    2598:	b9 3f       	cpi	r27, 0xF9	; 249
    259a:	cc f3       	brlt	.-14     	; 0x258e <__fixunssfsi+0x34>
    259c:	86 95       	lsr	r24
    259e:	77 95       	ror	r23
    25a0:	67 95       	ror	r22
    25a2:	b3 95       	inc	r27
    25a4:	d9 f7       	brne	.-10     	; 0x259c <__fixunssfsi+0x42>
    25a6:	3e f4       	brtc	.+14     	; 0x25b6 <__fixunssfsi+0x5c>
    25a8:	90 95       	com	r25
    25aa:	80 95       	com	r24
    25ac:	70 95       	com	r23
    25ae:	61 95       	neg	r22
    25b0:	7f 4f       	sbci	r23, 0xFF	; 255
    25b2:	8f 4f       	sbci	r24, 0xFF	; 255
    25b4:	9f 4f       	sbci	r25, 0xFF	; 255
    25b6:	08 95       	ret

000025b8 <__floatunsisf>:
    25b8:	e8 94       	clt
    25ba:	09 c0       	rjmp	.+18     	; 0x25ce <__floatsisf+0x12>

000025bc <__floatsisf>:
    25bc:	97 fb       	bst	r25, 7
    25be:	3e f4       	brtc	.+14     	; 0x25ce <__floatsisf+0x12>
    25c0:	90 95       	com	r25
    25c2:	80 95       	com	r24
    25c4:	70 95       	com	r23
    25c6:	61 95       	neg	r22
    25c8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ca:	8f 4f       	sbci	r24, 0xFF	; 255
    25cc:	9f 4f       	sbci	r25, 0xFF	; 255
    25ce:	99 23       	and	r25, r25
    25d0:	a9 f0       	breq	.+42     	; 0x25fc <__floatsisf+0x40>
    25d2:	f9 2f       	mov	r31, r25
    25d4:	96 e9       	ldi	r25, 0x96	; 150
    25d6:	bb 27       	eor	r27, r27
    25d8:	93 95       	inc	r25
    25da:	f6 95       	lsr	r31
    25dc:	87 95       	ror	r24
    25de:	77 95       	ror	r23
    25e0:	67 95       	ror	r22
    25e2:	b7 95       	ror	r27
    25e4:	f1 11       	cpse	r31, r1
    25e6:	f8 cf       	rjmp	.-16     	; 0x25d8 <__floatsisf+0x1c>
    25e8:	fa f4       	brpl	.+62     	; 0x2628 <__floatsisf+0x6c>
    25ea:	bb 0f       	add	r27, r27
    25ec:	11 f4       	brne	.+4      	; 0x25f2 <__floatsisf+0x36>
    25ee:	60 ff       	sbrs	r22, 0
    25f0:	1b c0       	rjmp	.+54     	; 0x2628 <__floatsisf+0x6c>
    25f2:	6f 5f       	subi	r22, 0xFF	; 255
    25f4:	7f 4f       	sbci	r23, 0xFF	; 255
    25f6:	8f 4f       	sbci	r24, 0xFF	; 255
    25f8:	9f 4f       	sbci	r25, 0xFF	; 255
    25fa:	16 c0       	rjmp	.+44     	; 0x2628 <__floatsisf+0x6c>
    25fc:	88 23       	and	r24, r24
    25fe:	11 f0       	breq	.+4      	; 0x2604 <__floatsisf+0x48>
    2600:	96 e9       	ldi	r25, 0x96	; 150
    2602:	11 c0       	rjmp	.+34     	; 0x2626 <__floatsisf+0x6a>
    2604:	77 23       	and	r23, r23
    2606:	21 f0       	breq	.+8      	; 0x2610 <__floatsisf+0x54>
    2608:	9e e8       	ldi	r25, 0x8E	; 142
    260a:	87 2f       	mov	r24, r23
    260c:	76 2f       	mov	r23, r22
    260e:	05 c0       	rjmp	.+10     	; 0x261a <__floatsisf+0x5e>
    2610:	66 23       	and	r22, r22
    2612:	71 f0       	breq	.+28     	; 0x2630 <__floatsisf+0x74>
    2614:	96 e8       	ldi	r25, 0x86	; 134
    2616:	86 2f       	mov	r24, r22
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	2a f0       	brmi	.+10     	; 0x2628 <__floatsisf+0x6c>
    261e:	9a 95       	dec	r25
    2620:	66 0f       	add	r22, r22
    2622:	77 1f       	adc	r23, r23
    2624:	88 1f       	adc	r24, r24
    2626:	da f7       	brpl	.-10     	; 0x261e <__floatsisf+0x62>
    2628:	88 0f       	add	r24, r24
    262a:	96 95       	lsr	r25
    262c:	87 95       	ror	r24
    262e:	97 f9       	bld	r25, 7
    2630:	08 95       	ret

00002632 <__fp_split3>:
    2632:	57 fd       	sbrc	r21, 7
    2634:	90 58       	subi	r25, 0x80	; 128
    2636:	44 0f       	add	r20, r20
    2638:	55 1f       	adc	r21, r21
    263a:	59 f0       	breq	.+22     	; 0x2652 <__fp_splitA+0x10>
    263c:	5f 3f       	cpi	r21, 0xFF	; 255
    263e:	71 f0       	breq	.+28     	; 0x265c <__fp_splitA+0x1a>
    2640:	47 95       	ror	r20

00002642 <__fp_splitA>:
    2642:	88 0f       	add	r24, r24
    2644:	97 fb       	bst	r25, 7
    2646:	99 1f       	adc	r25, r25
    2648:	61 f0       	breq	.+24     	; 0x2662 <__fp_splitA+0x20>
    264a:	9f 3f       	cpi	r25, 0xFF	; 255
    264c:	79 f0       	breq	.+30     	; 0x266c <__fp_splitA+0x2a>
    264e:	87 95       	ror	r24
    2650:	08 95       	ret
    2652:	12 16       	cp	r1, r18
    2654:	13 06       	cpc	r1, r19
    2656:	14 06       	cpc	r1, r20
    2658:	55 1f       	adc	r21, r21
    265a:	f2 cf       	rjmp	.-28     	; 0x2640 <__fp_split3+0xe>
    265c:	46 95       	lsr	r20
    265e:	f1 df       	rcall	.-30     	; 0x2642 <__fp_splitA>
    2660:	08 c0       	rjmp	.+16     	; 0x2672 <__fp_splitA+0x30>
    2662:	16 16       	cp	r1, r22
    2664:	17 06       	cpc	r1, r23
    2666:	18 06       	cpc	r1, r24
    2668:	99 1f       	adc	r25, r25
    266a:	f1 cf       	rjmp	.-30     	; 0x264e <__fp_splitA+0xc>
    266c:	86 95       	lsr	r24
    266e:	71 05       	cpc	r23, r1
    2670:	61 05       	cpc	r22, r1
    2672:	08 94       	sec
    2674:	08 95       	ret

00002676 <__fp_zero>:
    2676:	e8 94       	clt

00002678 <__fp_szero>:
    2678:	bb 27       	eor	r27, r27
    267a:	66 27       	eor	r22, r22
    267c:	77 27       	eor	r23, r23
    267e:	cb 01       	movw	r24, r22
    2680:	97 f9       	bld	r25, 7
    2682:	08 95       	ret

00002684 <__mulsf3>:
    2684:	0e 94 55 13 	call	0x26aa	; 0x26aa <__mulsf3x>
    2688:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__fp_round>
    268c:	0e 94 b8 13 	call	0x2770	; 0x2770 <__fp_pscA>
    2690:	38 f0       	brcs	.+14     	; 0x26a0 <__mulsf3+0x1c>
    2692:	0e 94 bf 13 	call	0x277e	; 0x277e <__fp_pscB>
    2696:	20 f0       	brcs	.+8      	; 0x26a0 <__mulsf3+0x1c>
    2698:	95 23       	and	r25, r21
    269a:	11 f0       	breq	.+4      	; 0x26a0 <__mulsf3+0x1c>
    269c:	0c 94 af 13 	jmp	0x275e	; 0x275e <__fp_inf>
    26a0:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__fp_nan>
    26a4:	11 24       	eor	r1, r1
    26a6:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__fp_szero>

000026aa <__mulsf3x>:
    26aa:	0e 94 19 13 	call	0x2632	; 0x2632 <__fp_split3>
    26ae:	70 f3       	brcs	.-36     	; 0x268c <__mulsf3+0x8>

000026b0 <__mulsf3_pse>:
    26b0:	95 9f       	mul	r25, r21
    26b2:	c1 f3       	breq	.-16     	; 0x26a4 <__mulsf3+0x20>
    26b4:	95 0f       	add	r25, r21
    26b6:	50 e0       	ldi	r21, 0x00	; 0
    26b8:	55 1f       	adc	r21, r21
    26ba:	62 9f       	mul	r22, r18
    26bc:	f0 01       	movw	r30, r0
    26be:	72 9f       	mul	r23, r18
    26c0:	bb 27       	eor	r27, r27
    26c2:	f0 0d       	add	r31, r0
    26c4:	b1 1d       	adc	r27, r1
    26c6:	63 9f       	mul	r22, r19
    26c8:	aa 27       	eor	r26, r26
    26ca:	f0 0d       	add	r31, r0
    26cc:	b1 1d       	adc	r27, r1
    26ce:	aa 1f       	adc	r26, r26
    26d0:	64 9f       	mul	r22, r20
    26d2:	66 27       	eor	r22, r22
    26d4:	b0 0d       	add	r27, r0
    26d6:	a1 1d       	adc	r26, r1
    26d8:	66 1f       	adc	r22, r22
    26da:	82 9f       	mul	r24, r18
    26dc:	22 27       	eor	r18, r18
    26de:	b0 0d       	add	r27, r0
    26e0:	a1 1d       	adc	r26, r1
    26e2:	62 1f       	adc	r22, r18
    26e4:	73 9f       	mul	r23, r19
    26e6:	b0 0d       	add	r27, r0
    26e8:	a1 1d       	adc	r26, r1
    26ea:	62 1f       	adc	r22, r18
    26ec:	83 9f       	mul	r24, r19
    26ee:	a0 0d       	add	r26, r0
    26f0:	61 1d       	adc	r22, r1
    26f2:	22 1f       	adc	r18, r18
    26f4:	74 9f       	mul	r23, r20
    26f6:	33 27       	eor	r19, r19
    26f8:	a0 0d       	add	r26, r0
    26fa:	61 1d       	adc	r22, r1
    26fc:	23 1f       	adc	r18, r19
    26fe:	84 9f       	mul	r24, r20
    2700:	60 0d       	add	r22, r0
    2702:	21 1d       	adc	r18, r1
    2704:	82 2f       	mov	r24, r18
    2706:	76 2f       	mov	r23, r22
    2708:	6a 2f       	mov	r22, r26
    270a:	11 24       	eor	r1, r1
    270c:	9f 57       	subi	r25, 0x7F	; 127
    270e:	50 40       	sbci	r21, 0x00	; 0
    2710:	9a f0       	brmi	.+38     	; 0x2738 <__mulsf3_pse+0x88>
    2712:	f1 f0       	breq	.+60     	; 0x2750 <__mulsf3_pse+0xa0>
    2714:	88 23       	and	r24, r24
    2716:	4a f0       	brmi	.+18     	; 0x272a <__mulsf3_pse+0x7a>
    2718:	ee 0f       	add	r30, r30
    271a:	ff 1f       	adc	r31, r31
    271c:	bb 1f       	adc	r27, r27
    271e:	66 1f       	adc	r22, r22
    2720:	77 1f       	adc	r23, r23
    2722:	88 1f       	adc	r24, r24
    2724:	91 50       	subi	r25, 0x01	; 1
    2726:	50 40       	sbci	r21, 0x00	; 0
    2728:	a9 f7       	brne	.-22     	; 0x2714 <__mulsf3_pse+0x64>
    272a:	9e 3f       	cpi	r25, 0xFE	; 254
    272c:	51 05       	cpc	r21, r1
    272e:	80 f0       	brcs	.+32     	; 0x2750 <__mulsf3_pse+0xa0>
    2730:	0c 94 af 13 	jmp	0x275e	; 0x275e <__fp_inf>
    2734:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__fp_szero>
    2738:	5f 3f       	cpi	r21, 0xFF	; 255
    273a:	e4 f3       	brlt	.-8      	; 0x2734 <__mulsf3_pse+0x84>
    273c:	98 3e       	cpi	r25, 0xE8	; 232
    273e:	d4 f3       	brlt	.-12     	; 0x2734 <__mulsf3_pse+0x84>
    2740:	86 95       	lsr	r24
    2742:	77 95       	ror	r23
    2744:	67 95       	ror	r22
    2746:	b7 95       	ror	r27
    2748:	f7 95       	ror	r31
    274a:	e7 95       	ror	r30
    274c:	9f 5f       	subi	r25, 0xFF	; 255
    274e:	c1 f7       	brne	.-16     	; 0x2740 <__mulsf3_pse+0x90>
    2750:	fe 2b       	or	r31, r30
    2752:	88 0f       	add	r24, r24
    2754:	91 1d       	adc	r25, r1
    2756:	96 95       	lsr	r25
    2758:	87 95       	ror	r24
    275a:	97 f9       	bld	r25, 7
    275c:	08 95       	ret

0000275e <__fp_inf>:
    275e:	97 f9       	bld	r25, 7
    2760:	9f 67       	ori	r25, 0x7F	; 127
    2762:	80 e8       	ldi	r24, 0x80	; 128
    2764:	70 e0       	ldi	r23, 0x00	; 0
    2766:	60 e0       	ldi	r22, 0x00	; 0
    2768:	08 95       	ret

0000276a <__fp_nan>:
    276a:	9f ef       	ldi	r25, 0xFF	; 255
    276c:	80 ec       	ldi	r24, 0xC0	; 192
    276e:	08 95       	ret

00002770 <__fp_pscA>:
    2770:	00 24       	eor	r0, r0
    2772:	0a 94       	dec	r0
    2774:	16 16       	cp	r1, r22
    2776:	17 06       	cpc	r1, r23
    2778:	18 06       	cpc	r1, r24
    277a:	09 06       	cpc	r0, r25
    277c:	08 95       	ret

0000277e <__fp_pscB>:
    277e:	00 24       	eor	r0, r0
    2780:	0a 94       	dec	r0
    2782:	12 16       	cp	r1, r18
    2784:	13 06       	cpc	r1, r19
    2786:	14 06       	cpc	r1, r20
    2788:	05 06       	cpc	r0, r21
    278a:	08 95       	ret

0000278c <__fp_round>:
    278c:	09 2e       	mov	r0, r25
    278e:	03 94       	inc	r0
    2790:	00 0c       	add	r0, r0
    2792:	11 f4       	brne	.+4      	; 0x2798 <__fp_round+0xc>
    2794:	88 23       	and	r24, r24
    2796:	52 f0       	brmi	.+20     	; 0x27ac <__fp_round+0x20>
    2798:	bb 0f       	add	r27, r27
    279a:	40 f4       	brcc	.+16     	; 0x27ac <__fp_round+0x20>
    279c:	bf 2b       	or	r27, r31
    279e:	11 f4       	brne	.+4      	; 0x27a4 <__fp_round+0x18>
    27a0:	60 ff       	sbrs	r22, 0
    27a2:	04 c0       	rjmp	.+8      	; 0x27ac <__fp_round+0x20>
    27a4:	6f 5f       	subi	r22, 0xFF	; 255
    27a6:	7f 4f       	sbci	r23, 0xFF	; 255
    27a8:	8f 4f       	sbci	r24, 0xFF	; 255
    27aa:	9f 4f       	sbci	r25, 0xFF	; 255
    27ac:	08 95       	ret

000027ae <initVariant>:
    27ae:	08 95       	ret

000027b0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    27b0:	0e 94 33 14 	call	0x2866	; 0x2866 <init>

	initVariant();
    27b4:	0e 94 d7 13 	call	0x27ae	; 0x27ae <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    27b8:	0e 94 4b 09 	call	0x1296	; 0x1296 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    27bc:	c0 e0       	ldi	r28, 0x00	; 0
    27be:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    27c0:	0e 94 4c 09 	call	0x1298	; 0x1298 <loop>
		if (serialEventRun) serialEventRun();
    27c4:	20 97       	sbiw	r28, 0x00	; 0
    27c6:	e1 f3       	breq	.-8      	; 0x27c0 <main+0x10>
    27c8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    27cc:	f9 cf       	rjmp	.-14     	; 0x27c0 <main+0x10>

000027ce <_Znwj>:
    27ce:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <malloc>

000027d2 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    27d2:	1f 92       	push	r1
    27d4:	0f 92       	push	r0
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	0f 92       	push	r0
    27da:	11 24       	eor	r1, r1
    27dc:	2f 93       	push	r18
    27de:	3f 93       	push	r19
    27e0:	8f 93       	push	r24
    27e2:	9f 93       	push	r25
    27e4:	af 93       	push	r26
    27e6:	bf 93       	push	r27
    27e8:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <timer0_millis>
    27ec:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <timer0_millis+0x1>
    27f0:	a0 91 33 03 	lds	r26, 0x0333	; 0x800333 <timer0_millis+0x2>
    27f4:	b0 91 34 03 	lds	r27, 0x0334	; 0x800334 <timer0_millis+0x3>
    27f8:	30 91 30 03 	lds	r19, 0x0330	; 0x800330 <timer0_fract>
    27fc:	23 e0       	ldi	r18, 0x03	; 3
    27fe:	23 0f       	add	r18, r19
    2800:	2d 37       	cpi	r18, 0x7D	; 125
    2802:	20 f4       	brcc	.+8      	; 0x280c <__vector_16+0x3a>
    2804:	01 96       	adiw	r24, 0x01	; 1
    2806:	a1 1d       	adc	r26, r1
    2808:	b1 1d       	adc	r27, r1
    280a:	05 c0       	rjmp	.+10     	; 0x2816 <__vector_16+0x44>
    280c:	26 e8       	ldi	r18, 0x86	; 134
    280e:	23 0f       	add	r18, r19
    2810:	02 96       	adiw	r24, 0x02	; 2
    2812:	a1 1d       	adc	r26, r1
    2814:	b1 1d       	adc	r27, r1
    2816:	20 93 30 03 	sts	0x0330, r18	; 0x800330 <timer0_fract>
    281a:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <timer0_millis>
    281e:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <timer0_millis+0x1>
    2822:	a0 93 33 03 	sts	0x0333, r26	; 0x800333 <timer0_millis+0x2>
    2826:	b0 93 34 03 	sts	0x0334, r27	; 0x800334 <timer0_millis+0x3>
    282a:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <timer0_overflow_count>
    282e:	90 91 36 03 	lds	r25, 0x0336	; 0x800336 <timer0_overflow_count+0x1>
    2832:	a0 91 37 03 	lds	r26, 0x0337	; 0x800337 <timer0_overflow_count+0x2>
    2836:	b0 91 38 03 	lds	r27, 0x0338	; 0x800338 <timer0_overflow_count+0x3>
    283a:	01 96       	adiw	r24, 0x01	; 1
    283c:	a1 1d       	adc	r26, r1
    283e:	b1 1d       	adc	r27, r1
    2840:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <timer0_overflow_count>
    2844:	90 93 36 03 	sts	0x0336, r25	; 0x800336 <timer0_overflow_count+0x1>
    2848:	a0 93 37 03 	sts	0x0337, r26	; 0x800337 <timer0_overflow_count+0x2>
    284c:	b0 93 38 03 	sts	0x0338, r27	; 0x800338 <timer0_overflow_count+0x3>
    2850:	bf 91       	pop	r27
    2852:	af 91       	pop	r26
    2854:	9f 91       	pop	r25
    2856:	8f 91       	pop	r24
    2858:	3f 91       	pop	r19
    285a:	2f 91       	pop	r18
    285c:	0f 90       	pop	r0
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	0f 90       	pop	r0
    2862:	1f 90       	pop	r1
    2864:	18 95       	reti

00002866 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2866:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2868:	84 b5       	in	r24, 0x24	; 36
    286a:	82 60       	ori	r24, 0x02	; 2
    286c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    286e:	84 b5       	in	r24, 0x24	; 36
    2870:	81 60       	ori	r24, 0x01	; 1
    2872:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2874:	85 b5       	in	r24, 0x25	; 37
    2876:	82 60       	ori	r24, 0x02	; 2
    2878:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    287a:	85 b5       	in	r24, 0x25	; 37
    287c:	81 60       	ori	r24, 0x01	; 1
    287e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2880:	ee e6       	ldi	r30, 0x6E	; 110
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	81 60       	ori	r24, 0x01	; 1
    2888:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    288a:	e1 e8       	ldi	r30, 0x81	; 129
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2890:	80 81       	ld	r24, Z
    2892:	82 60       	ori	r24, 0x02	; 2
    2894:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2896:	80 81       	ld	r24, Z
    2898:	81 60       	ori	r24, 0x01	; 1
    289a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    289c:	e0 e8       	ldi	r30, 0x80	; 128
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	81 60       	ori	r24, 0x01	; 1
    28a4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    28a6:	e1 eb       	ldi	r30, 0xB1	; 177
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	84 60       	ori	r24, 0x04	; 4
    28ae:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    28b0:	e0 eb       	ldi	r30, 0xB0	; 176
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	81 60       	ori	r24, 0x01	; 1
    28b8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    28ba:	ea e7       	ldi	r30, 0x7A	; 122
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	84 60       	ori	r24, 0x04	; 4
    28c2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    28c4:	80 81       	ld	r24, Z
    28c6:	82 60       	ori	r24, 0x02	; 2
    28c8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    28ca:	80 81       	ld	r24, Z
    28cc:	81 60       	ori	r24, 0x01	; 1
    28ce:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    28d0:	80 81       	ld	r24, Z
    28d2:	80 68       	ori	r24, 0x80	; 128
    28d4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    28d6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    28da:	08 95       	ret

000028dc <__mulsi3>:
    28dc:	db 01       	movw	r26, r22
    28de:	8f 93       	push	r24
    28e0:	9f 93       	push	r25
    28e2:	0e 94 a0 14 	call	0x2940	; 0x2940 <__muluhisi3>
    28e6:	bf 91       	pop	r27
    28e8:	af 91       	pop	r26
    28ea:	a2 9f       	mul	r26, r18
    28ec:	80 0d       	add	r24, r0
    28ee:	91 1d       	adc	r25, r1
    28f0:	a3 9f       	mul	r26, r19
    28f2:	90 0d       	add	r25, r0
    28f4:	b2 9f       	mul	r27, r18
    28f6:	90 0d       	add	r25, r0
    28f8:	11 24       	eor	r1, r1
    28fa:	08 95       	ret

000028fc <__udivmodsi4>:
    28fc:	a1 e2       	ldi	r26, 0x21	; 33
    28fe:	1a 2e       	mov	r1, r26
    2900:	aa 1b       	sub	r26, r26
    2902:	bb 1b       	sub	r27, r27
    2904:	fd 01       	movw	r30, r26
    2906:	0d c0       	rjmp	.+26     	; 0x2922 <__udivmodsi4_ep>

00002908 <__udivmodsi4_loop>:
    2908:	aa 1f       	adc	r26, r26
    290a:	bb 1f       	adc	r27, r27
    290c:	ee 1f       	adc	r30, r30
    290e:	ff 1f       	adc	r31, r31
    2910:	a2 17       	cp	r26, r18
    2912:	b3 07       	cpc	r27, r19
    2914:	e4 07       	cpc	r30, r20
    2916:	f5 07       	cpc	r31, r21
    2918:	20 f0       	brcs	.+8      	; 0x2922 <__udivmodsi4_ep>
    291a:	a2 1b       	sub	r26, r18
    291c:	b3 0b       	sbc	r27, r19
    291e:	e4 0b       	sbc	r30, r20
    2920:	f5 0b       	sbc	r31, r21

00002922 <__udivmodsi4_ep>:
    2922:	66 1f       	adc	r22, r22
    2924:	77 1f       	adc	r23, r23
    2926:	88 1f       	adc	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	1a 94       	dec	r1
    292c:	69 f7       	brne	.-38     	; 0x2908 <__udivmodsi4_loop>
    292e:	60 95       	com	r22
    2930:	70 95       	com	r23
    2932:	80 95       	com	r24
    2934:	90 95       	com	r25
    2936:	9b 01       	movw	r18, r22
    2938:	ac 01       	movw	r20, r24
    293a:	bd 01       	movw	r22, r26
    293c:	cf 01       	movw	r24, r30
    293e:	08 95       	ret

00002940 <__muluhisi3>:
    2940:	0e 94 b3 14 	call	0x2966	; 0x2966 <__umulhisi3>
    2944:	a5 9f       	mul	r26, r21
    2946:	90 0d       	add	r25, r0
    2948:	b4 9f       	mul	r27, r20
    294a:	90 0d       	add	r25, r0
    294c:	a4 9f       	mul	r26, r20
    294e:	80 0d       	add	r24, r0
    2950:	91 1d       	adc	r25, r1
    2952:	11 24       	eor	r1, r1
    2954:	08 95       	ret

00002956 <__mulshisi3>:
    2956:	b7 ff       	sbrs	r27, 7
    2958:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__muluhisi3>

0000295c <__mulohisi3>:
    295c:	0e 94 a0 14 	call	0x2940	; 0x2940 <__muluhisi3>
    2960:	82 1b       	sub	r24, r18
    2962:	93 0b       	sbc	r25, r19
    2964:	08 95       	ret

00002966 <__umulhisi3>:
    2966:	a2 9f       	mul	r26, r18
    2968:	b0 01       	movw	r22, r0
    296a:	b3 9f       	mul	r27, r19
    296c:	c0 01       	movw	r24, r0
    296e:	a3 9f       	mul	r26, r19
    2970:	70 0d       	add	r23, r0
    2972:	81 1d       	adc	r24, r1
    2974:	11 24       	eor	r1, r1
    2976:	91 1d       	adc	r25, r1
    2978:	b2 9f       	mul	r27, r18
    297a:	70 0d       	add	r23, r0
    297c:	81 1d       	adc	r24, r1
    297e:	11 24       	eor	r1, r1
    2980:	91 1d       	adc	r25, r1
    2982:	08 95       	ret

00002984 <malloc>:
    2984:	0f 93       	push	r16
    2986:	1f 93       	push	r17
    2988:	cf 93       	push	r28
    298a:	df 93       	push	r29
    298c:	82 30       	cpi	r24, 0x02	; 2
    298e:	91 05       	cpc	r25, r1
    2990:	10 f4       	brcc	.+4      	; 0x2996 <malloc+0x12>
    2992:	82 e0       	ldi	r24, 0x02	; 2
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	e0 91 3b 03 	lds	r30, 0x033B	; 0x80033b <__flp>
    299a:	f0 91 3c 03 	lds	r31, 0x033C	; 0x80033c <__flp+0x1>
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	a0 e0       	ldi	r26, 0x00	; 0
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	30 97       	sbiw	r30, 0x00	; 0
    29a8:	19 f1       	breq	.+70     	; 0x29f0 <malloc+0x6c>
    29aa:	40 81       	ld	r20, Z
    29ac:	51 81       	ldd	r21, Z+1	; 0x01
    29ae:	02 81       	ldd	r16, Z+2	; 0x02
    29b0:	13 81       	ldd	r17, Z+3	; 0x03
    29b2:	48 17       	cp	r20, r24
    29b4:	59 07       	cpc	r21, r25
    29b6:	c8 f0       	brcs	.+50     	; 0x29ea <malloc+0x66>
    29b8:	84 17       	cp	r24, r20
    29ba:	95 07       	cpc	r25, r21
    29bc:	69 f4       	brne	.+26     	; 0x29d8 <malloc+0x54>
    29be:	10 97       	sbiw	r26, 0x00	; 0
    29c0:	31 f0       	breq	.+12     	; 0x29ce <malloc+0x4a>
    29c2:	12 96       	adiw	r26, 0x02	; 2
    29c4:	0c 93       	st	X, r16
    29c6:	12 97       	sbiw	r26, 0x02	; 2
    29c8:	13 96       	adiw	r26, 0x03	; 3
    29ca:	1c 93       	st	X, r17
    29cc:	27 c0       	rjmp	.+78     	; 0x2a1c <malloc+0x98>
    29ce:	00 93 3b 03 	sts	0x033B, r16	; 0x80033b <__flp>
    29d2:	10 93 3c 03 	sts	0x033C, r17	; 0x80033c <__flp+0x1>
    29d6:	22 c0       	rjmp	.+68     	; 0x2a1c <malloc+0x98>
    29d8:	21 15       	cp	r18, r1
    29da:	31 05       	cpc	r19, r1
    29dc:	19 f0       	breq	.+6      	; 0x29e4 <malloc+0x60>
    29de:	42 17       	cp	r20, r18
    29e0:	53 07       	cpc	r21, r19
    29e2:	18 f4       	brcc	.+6      	; 0x29ea <malloc+0x66>
    29e4:	9a 01       	movw	r18, r20
    29e6:	bd 01       	movw	r22, r26
    29e8:	ef 01       	movw	r28, r30
    29ea:	df 01       	movw	r26, r30
    29ec:	f8 01       	movw	r30, r16
    29ee:	db cf       	rjmp	.-74     	; 0x29a6 <malloc+0x22>
    29f0:	21 15       	cp	r18, r1
    29f2:	31 05       	cpc	r19, r1
    29f4:	f9 f0       	breq	.+62     	; 0x2a34 <malloc+0xb0>
    29f6:	28 1b       	sub	r18, r24
    29f8:	39 0b       	sbc	r19, r25
    29fa:	24 30       	cpi	r18, 0x04	; 4
    29fc:	31 05       	cpc	r19, r1
    29fe:	80 f4       	brcc	.+32     	; 0x2a20 <malloc+0x9c>
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	9b 81       	ldd	r25, Y+3	; 0x03
    2a04:	61 15       	cp	r22, r1
    2a06:	71 05       	cpc	r23, r1
    2a08:	21 f0       	breq	.+8      	; 0x2a12 <malloc+0x8e>
    2a0a:	fb 01       	movw	r30, r22
    2a0c:	93 83       	std	Z+3, r25	; 0x03
    2a0e:	82 83       	std	Z+2, r24	; 0x02
    2a10:	04 c0       	rjmp	.+8      	; 0x2a1a <malloc+0x96>
    2a12:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <__flp+0x1>
    2a16:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <__flp>
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	32 96       	adiw	r30, 0x02	; 2
    2a1e:	44 c0       	rjmp	.+136    	; 0x2aa8 <malloc+0x124>
    2a20:	fe 01       	movw	r30, r28
    2a22:	e2 0f       	add	r30, r18
    2a24:	f3 1f       	adc	r31, r19
    2a26:	81 93       	st	Z+, r24
    2a28:	91 93       	st	Z+, r25
    2a2a:	22 50       	subi	r18, 0x02	; 2
    2a2c:	31 09       	sbc	r19, r1
    2a2e:	39 83       	std	Y+1, r19	; 0x01
    2a30:	28 83       	st	Y, r18
    2a32:	3a c0       	rjmp	.+116    	; 0x2aa8 <malloc+0x124>
    2a34:	20 91 39 03 	lds	r18, 0x0339	; 0x800339 <__brkval>
    2a38:	30 91 3a 03 	lds	r19, 0x033A	; 0x80033a <__brkval+0x1>
    2a3c:	23 2b       	or	r18, r19
    2a3e:	41 f4       	brne	.+16     	; 0x2a50 <malloc+0xcc>
    2a40:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2a44:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2a48:	30 93 3a 03 	sts	0x033A, r19	; 0x80033a <__brkval+0x1>
    2a4c:	20 93 39 03 	sts	0x0339, r18	; 0x800339 <__brkval>
    2a50:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2a54:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2a58:	21 15       	cp	r18, r1
    2a5a:	31 05       	cpc	r19, r1
    2a5c:	41 f4       	brne	.+16     	; 0x2a6e <malloc+0xea>
    2a5e:	2d b7       	in	r18, 0x3d	; 61
    2a60:	3e b7       	in	r19, 0x3e	; 62
    2a62:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2a66:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2a6a:	24 1b       	sub	r18, r20
    2a6c:	35 0b       	sbc	r19, r21
    2a6e:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <__brkval>
    2a72:	f0 91 3a 03 	lds	r31, 0x033A	; 0x80033a <__brkval+0x1>
    2a76:	e2 17       	cp	r30, r18
    2a78:	f3 07       	cpc	r31, r19
    2a7a:	a0 f4       	brcc	.+40     	; 0x2aa4 <malloc+0x120>
    2a7c:	2e 1b       	sub	r18, r30
    2a7e:	3f 0b       	sbc	r19, r31
    2a80:	28 17       	cp	r18, r24
    2a82:	39 07       	cpc	r19, r25
    2a84:	78 f0       	brcs	.+30     	; 0x2aa4 <malloc+0x120>
    2a86:	ac 01       	movw	r20, r24
    2a88:	4e 5f       	subi	r20, 0xFE	; 254
    2a8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a8c:	24 17       	cp	r18, r20
    2a8e:	35 07       	cpc	r19, r21
    2a90:	48 f0       	brcs	.+18     	; 0x2aa4 <malloc+0x120>
    2a92:	4e 0f       	add	r20, r30
    2a94:	5f 1f       	adc	r21, r31
    2a96:	50 93 3a 03 	sts	0x033A, r21	; 0x80033a <__brkval+0x1>
    2a9a:	40 93 39 03 	sts	0x0339, r20	; 0x800339 <__brkval>
    2a9e:	81 93       	st	Z+, r24
    2aa0:	91 93       	st	Z+, r25
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <malloc+0x124>
    2aa4:	e0 e0       	ldi	r30, 0x00	; 0
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	cf 01       	movw	r24, r30
    2aaa:	df 91       	pop	r29
    2aac:	cf 91       	pop	r28
    2aae:	1f 91       	pop	r17
    2ab0:	0f 91       	pop	r16
    2ab2:	08 95       	ret

00002ab4 <free>:
    2ab4:	cf 93       	push	r28
    2ab6:	df 93       	push	r29
    2ab8:	00 97       	sbiw	r24, 0x00	; 0
    2aba:	09 f4       	brne	.+2      	; 0x2abe <free+0xa>
    2abc:	81 c0       	rjmp	.+258    	; 0x2bc0 <free+0x10c>
    2abe:	fc 01       	movw	r30, r24
    2ac0:	32 97       	sbiw	r30, 0x02	; 2
    2ac2:	13 82       	std	Z+3, r1	; 0x03
    2ac4:	12 82       	std	Z+2, r1	; 0x02
    2ac6:	a0 91 3b 03 	lds	r26, 0x033B	; 0x80033b <__flp>
    2aca:	b0 91 3c 03 	lds	r27, 0x033C	; 0x80033c <__flp+0x1>
    2ace:	10 97       	sbiw	r26, 0x00	; 0
    2ad0:	81 f4       	brne	.+32     	; 0x2af2 <free+0x3e>
    2ad2:	20 81       	ld	r18, Z
    2ad4:	31 81       	ldd	r19, Z+1	; 0x01
    2ad6:	82 0f       	add	r24, r18
    2ad8:	93 1f       	adc	r25, r19
    2ada:	20 91 39 03 	lds	r18, 0x0339	; 0x800339 <__brkval>
    2ade:	30 91 3a 03 	lds	r19, 0x033A	; 0x80033a <__brkval+0x1>
    2ae2:	28 17       	cp	r18, r24
    2ae4:	39 07       	cpc	r19, r25
    2ae6:	51 f5       	brne	.+84     	; 0x2b3c <free+0x88>
    2ae8:	f0 93 3a 03 	sts	0x033A, r31	; 0x80033a <__brkval+0x1>
    2aec:	e0 93 39 03 	sts	0x0339, r30	; 0x800339 <__brkval>
    2af0:	67 c0       	rjmp	.+206    	; 0x2bc0 <free+0x10c>
    2af2:	ed 01       	movw	r28, r26
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	ce 17       	cp	r28, r30
    2afa:	df 07       	cpc	r29, r31
    2afc:	40 f4       	brcc	.+16     	; 0x2b0e <free+0x5a>
    2afe:	4a 81       	ldd	r20, Y+2	; 0x02
    2b00:	5b 81       	ldd	r21, Y+3	; 0x03
    2b02:	9e 01       	movw	r18, r28
    2b04:	41 15       	cp	r20, r1
    2b06:	51 05       	cpc	r21, r1
    2b08:	f1 f0       	breq	.+60     	; 0x2b46 <free+0x92>
    2b0a:	ea 01       	movw	r28, r20
    2b0c:	f5 cf       	rjmp	.-22     	; 0x2af8 <free+0x44>
    2b0e:	d3 83       	std	Z+3, r29	; 0x03
    2b10:	c2 83       	std	Z+2, r28	; 0x02
    2b12:	40 81       	ld	r20, Z
    2b14:	51 81       	ldd	r21, Z+1	; 0x01
    2b16:	84 0f       	add	r24, r20
    2b18:	95 1f       	adc	r25, r21
    2b1a:	c8 17       	cp	r28, r24
    2b1c:	d9 07       	cpc	r29, r25
    2b1e:	59 f4       	brne	.+22     	; 0x2b36 <free+0x82>
    2b20:	88 81       	ld	r24, Y
    2b22:	99 81       	ldd	r25, Y+1	; 0x01
    2b24:	84 0f       	add	r24, r20
    2b26:	95 1f       	adc	r25, r21
    2b28:	02 96       	adiw	r24, 0x02	; 2
    2b2a:	91 83       	std	Z+1, r25	; 0x01
    2b2c:	80 83       	st	Z, r24
    2b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b30:	9b 81       	ldd	r25, Y+3	; 0x03
    2b32:	93 83       	std	Z+3, r25	; 0x03
    2b34:	82 83       	std	Z+2, r24	; 0x02
    2b36:	21 15       	cp	r18, r1
    2b38:	31 05       	cpc	r19, r1
    2b3a:	29 f4       	brne	.+10     	; 0x2b46 <free+0x92>
    2b3c:	f0 93 3c 03 	sts	0x033C, r31	; 0x80033c <__flp+0x1>
    2b40:	e0 93 3b 03 	sts	0x033B, r30	; 0x80033b <__flp>
    2b44:	3d c0       	rjmp	.+122    	; 0x2bc0 <free+0x10c>
    2b46:	e9 01       	movw	r28, r18
    2b48:	fb 83       	std	Y+3, r31	; 0x03
    2b4a:	ea 83       	std	Y+2, r30	; 0x02
    2b4c:	49 91       	ld	r20, Y+
    2b4e:	59 91       	ld	r21, Y+
    2b50:	c4 0f       	add	r28, r20
    2b52:	d5 1f       	adc	r29, r21
    2b54:	ec 17       	cp	r30, r28
    2b56:	fd 07       	cpc	r31, r29
    2b58:	61 f4       	brne	.+24     	; 0x2b72 <free+0xbe>
    2b5a:	80 81       	ld	r24, Z
    2b5c:	91 81       	ldd	r25, Z+1	; 0x01
    2b5e:	84 0f       	add	r24, r20
    2b60:	95 1f       	adc	r25, r21
    2b62:	02 96       	adiw	r24, 0x02	; 2
    2b64:	e9 01       	movw	r28, r18
    2b66:	99 83       	std	Y+1, r25	; 0x01
    2b68:	88 83       	st	Y, r24
    2b6a:	82 81       	ldd	r24, Z+2	; 0x02
    2b6c:	93 81       	ldd	r25, Z+3	; 0x03
    2b6e:	9b 83       	std	Y+3, r25	; 0x03
    2b70:	8a 83       	std	Y+2, r24	; 0x02
    2b72:	e0 e0       	ldi	r30, 0x00	; 0
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	12 96       	adiw	r26, 0x02	; 2
    2b78:	8d 91       	ld	r24, X+
    2b7a:	9c 91       	ld	r25, X
    2b7c:	13 97       	sbiw	r26, 0x03	; 3
    2b7e:	00 97       	sbiw	r24, 0x00	; 0
    2b80:	19 f0       	breq	.+6      	; 0x2b88 <free+0xd4>
    2b82:	fd 01       	movw	r30, r26
    2b84:	dc 01       	movw	r26, r24
    2b86:	f7 cf       	rjmp	.-18     	; 0x2b76 <free+0xc2>
    2b88:	8d 91       	ld	r24, X+
    2b8a:	9c 91       	ld	r25, X
    2b8c:	11 97       	sbiw	r26, 0x01	; 1
    2b8e:	9d 01       	movw	r18, r26
    2b90:	2e 5f       	subi	r18, 0xFE	; 254
    2b92:	3f 4f       	sbci	r19, 0xFF	; 255
    2b94:	82 0f       	add	r24, r18
    2b96:	93 1f       	adc	r25, r19
    2b98:	20 91 39 03 	lds	r18, 0x0339	; 0x800339 <__brkval>
    2b9c:	30 91 3a 03 	lds	r19, 0x033A	; 0x80033a <__brkval+0x1>
    2ba0:	28 17       	cp	r18, r24
    2ba2:	39 07       	cpc	r19, r25
    2ba4:	69 f4       	brne	.+26     	; 0x2bc0 <free+0x10c>
    2ba6:	30 97       	sbiw	r30, 0x00	; 0
    2ba8:	29 f4       	brne	.+10     	; 0x2bb4 <free+0x100>
    2baa:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <__flp+0x1>
    2bae:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <__flp>
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <free+0x104>
    2bb4:	13 82       	std	Z+3, r1	; 0x03
    2bb6:	12 82       	std	Z+2, r1	; 0x02
    2bb8:	b0 93 3a 03 	sts	0x033A, r27	; 0x80033a <__brkval+0x1>
    2bbc:	a0 93 39 03 	sts	0x0339, r26	; 0x800339 <__brkval>
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	08 95       	ret

00002bc6 <strcpy>:
    2bc6:	fb 01       	movw	r30, r22
    2bc8:	dc 01       	movw	r26, r24
    2bca:	01 90       	ld	r0, Z+
    2bcc:	0d 92       	st	X+, r0
    2bce:	00 20       	and	r0, r0
    2bd0:	e1 f7       	brne	.-8      	; 0x2bca <strcpy+0x4>
    2bd2:	08 95       	ret

00002bd4 <fprintf>:
    2bd4:	a0 e0       	ldi	r26, 0x00	; 0
    2bd6:	b0 e0       	ldi	r27, 0x00	; 0
    2bd8:	e0 ef       	ldi	r30, 0xF0	; 240
    2bda:	f5 e1       	ldi	r31, 0x15	; 21
    2bdc:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__prologue_saves__+0x20>
    2be0:	ae 01       	movw	r20, r28
    2be2:	47 5f       	subi	r20, 0xF7	; 247
    2be4:	5f 4f       	sbci	r21, 0xFF	; 255
    2be6:	6f 81       	ldd	r22, Y+7	; 0x07
    2be8:	78 85       	ldd	r23, Y+8	; 0x08
    2bea:	8d 81       	ldd	r24, Y+5	; 0x05
    2bec:	9e 81       	ldd	r25, Y+6	; 0x06
    2bee:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <vfprintf>
    2bf2:	e2 e0       	ldi	r30, 0x02	; 2
    2bf4:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__epilogue_restores__+0x20>

00002bf8 <sprintf>:
    2bf8:	ae e0       	ldi	r26, 0x0E	; 14
    2bfa:	b0 e0       	ldi	r27, 0x00	; 0
    2bfc:	e2 e0       	ldi	r30, 0x02	; 2
    2bfe:	f6 e1       	ldi	r31, 0x16	; 22
    2c00:	0c 94 bd 18 	jmp	0x317a	; 0x317a <__prologue_saves__+0x1c>
    2c04:	0d 89       	ldd	r16, Y+21	; 0x15
    2c06:	1e 89       	ldd	r17, Y+22	; 0x16
    2c08:	86 e0       	ldi	r24, 0x06	; 6
    2c0a:	8c 83       	std	Y+4, r24	; 0x04
    2c0c:	1a 83       	std	Y+2, r17	; 0x02
    2c0e:	09 83       	std	Y+1, r16	; 0x01
    2c10:	8f ef       	ldi	r24, 0xFF	; 255
    2c12:	9f e7       	ldi	r25, 0x7F	; 127
    2c14:	9e 83       	std	Y+6, r25	; 0x06
    2c16:	8d 83       	std	Y+5, r24	; 0x05
    2c18:	ae 01       	movw	r20, r28
    2c1a:	47 5e       	subi	r20, 0xE7	; 231
    2c1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c1e:	6f 89       	ldd	r22, Y+23	; 0x17
    2c20:	78 8d       	ldd	r23, Y+24	; 0x18
    2c22:	ce 01       	movw	r24, r28
    2c24:	01 96       	adiw	r24, 0x01	; 1
    2c26:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <vfprintf>
    2c2a:	ef 81       	ldd	r30, Y+7	; 0x07
    2c2c:	f8 85       	ldd	r31, Y+8	; 0x08
    2c2e:	e0 0f       	add	r30, r16
    2c30:	f1 1f       	adc	r31, r17
    2c32:	10 82       	st	Z, r1
    2c34:	2e 96       	adiw	r28, 0x0e	; 14
    2c36:	e4 e0       	ldi	r30, 0x04	; 4
    2c38:	0c 94 d9 18 	jmp	0x31b2	; 0x31b2 <__epilogue_restores__+0x1c>

00002c3c <vfprintf>:
    2c3c:	ab e0       	ldi	r26, 0x0B	; 11
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	e4 e2       	ldi	r30, 0x24	; 36
    2c42:	f6 e1       	ldi	r31, 0x16	; 22
    2c44:	0c 94 af 18 	jmp	0x315e	; 0x315e <__prologue_saves__>
    2c48:	6c 01       	movw	r12, r24
    2c4a:	7b 01       	movw	r14, r22
    2c4c:	8a 01       	movw	r16, r20
    2c4e:	fc 01       	movw	r30, r24
    2c50:	17 82       	std	Z+7, r1	; 0x07
    2c52:	16 82       	std	Z+6, r1	; 0x06
    2c54:	83 81       	ldd	r24, Z+3	; 0x03
    2c56:	81 ff       	sbrs	r24, 1
    2c58:	cc c1       	rjmp	.+920    	; 0x2ff2 <vfprintf+0x3b6>
    2c5a:	ce 01       	movw	r24, r28
    2c5c:	01 96       	adiw	r24, 0x01	; 1
    2c5e:	3c 01       	movw	r6, r24
    2c60:	f6 01       	movw	r30, r12
    2c62:	93 81       	ldd	r25, Z+3	; 0x03
    2c64:	f7 01       	movw	r30, r14
    2c66:	93 fd       	sbrc	r25, 3
    2c68:	85 91       	lpm	r24, Z+
    2c6a:	93 ff       	sbrs	r25, 3
    2c6c:	81 91       	ld	r24, Z+
    2c6e:	7f 01       	movw	r14, r30
    2c70:	88 23       	and	r24, r24
    2c72:	09 f4       	brne	.+2      	; 0x2c76 <vfprintf+0x3a>
    2c74:	ba c1       	rjmp	.+884    	; 0x2fea <vfprintf+0x3ae>
    2c76:	85 32       	cpi	r24, 0x25	; 37
    2c78:	39 f4       	brne	.+14     	; 0x2c88 <vfprintf+0x4c>
    2c7a:	93 fd       	sbrc	r25, 3
    2c7c:	85 91       	lpm	r24, Z+
    2c7e:	93 ff       	sbrs	r25, 3
    2c80:	81 91       	ld	r24, Z+
    2c82:	7f 01       	movw	r14, r30
    2c84:	85 32       	cpi	r24, 0x25	; 37
    2c86:	29 f4       	brne	.+10     	; 0x2c92 <vfprintf+0x56>
    2c88:	b6 01       	movw	r22, r12
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	0e 94 15 18 	call	0x302a	; 0x302a <fputc>
    2c90:	e7 cf       	rjmp	.-50     	; 0x2c60 <vfprintf+0x24>
    2c92:	91 2c       	mov	r9, r1
    2c94:	21 2c       	mov	r2, r1
    2c96:	31 2c       	mov	r3, r1
    2c98:	ff e1       	ldi	r31, 0x1F	; 31
    2c9a:	f3 15       	cp	r31, r3
    2c9c:	d8 f0       	brcs	.+54     	; 0x2cd4 <vfprintf+0x98>
    2c9e:	8b 32       	cpi	r24, 0x2B	; 43
    2ca0:	79 f0       	breq	.+30     	; 0x2cc0 <vfprintf+0x84>
    2ca2:	38 f4       	brcc	.+14     	; 0x2cb2 <vfprintf+0x76>
    2ca4:	80 32       	cpi	r24, 0x20	; 32
    2ca6:	79 f0       	breq	.+30     	; 0x2cc6 <vfprintf+0x8a>
    2ca8:	83 32       	cpi	r24, 0x23	; 35
    2caa:	a1 f4       	brne	.+40     	; 0x2cd4 <vfprintf+0x98>
    2cac:	23 2d       	mov	r18, r3
    2cae:	20 61       	ori	r18, 0x10	; 16
    2cb0:	1d c0       	rjmp	.+58     	; 0x2cec <vfprintf+0xb0>
    2cb2:	8d 32       	cpi	r24, 0x2D	; 45
    2cb4:	61 f0       	breq	.+24     	; 0x2cce <vfprintf+0x92>
    2cb6:	80 33       	cpi	r24, 0x30	; 48
    2cb8:	69 f4       	brne	.+26     	; 0x2cd4 <vfprintf+0x98>
    2cba:	23 2d       	mov	r18, r3
    2cbc:	21 60       	ori	r18, 0x01	; 1
    2cbe:	16 c0       	rjmp	.+44     	; 0x2cec <vfprintf+0xb0>
    2cc0:	83 2d       	mov	r24, r3
    2cc2:	82 60       	ori	r24, 0x02	; 2
    2cc4:	38 2e       	mov	r3, r24
    2cc6:	e3 2d       	mov	r30, r3
    2cc8:	e4 60       	ori	r30, 0x04	; 4
    2cca:	3e 2e       	mov	r3, r30
    2ccc:	2a c0       	rjmp	.+84     	; 0x2d22 <vfprintf+0xe6>
    2cce:	f3 2d       	mov	r31, r3
    2cd0:	f8 60       	ori	r31, 0x08	; 8
    2cd2:	1d c0       	rjmp	.+58     	; 0x2d0e <vfprintf+0xd2>
    2cd4:	37 fc       	sbrc	r3, 7
    2cd6:	2d c0       	rjmp	.+90     	; 0x2d32 <vfprintf+0xf6>
    2cd8:	20 ed       	ldi	r18, 0xD0	; 208
    2cda:	28 0f       	add	r18, r24
    2cdc:	2a 30       	cpi	r18, 0x0A	; 10
    2cde:	40 f0       	brcs	.+16     	; 0x2cf0 <vfprintf+0xb4>
    2ce0:	8e 32       	cpi	r24, 0x2E	; 46
    2ce2:	b9 f4       	brne	.+46     	; 0x2d12 <vfprintf+0xd6>
    2ce4:	36 fc       	sbrc	r3, 6
    2ce6:	81 c1       	rjmp	.+770    	; 0x2fea <vfprintf+0x3ae>
    2ce8:	23 2d       	mov	r18, r3
    2cea:	20 64       	ori	r18, 0x40	; 64
    2cec:	32 2e       	mov	r3, r18
    2cee:	19 c0       	rjmp	.+50     	; 0x2d22 <vfprintf+0xe6>
    2cf0:	36 fe       	sbrs	r3, 6
    2cf2:	06 c0       	rjmp	.+12     	; 0x2d00 <vfprintf+0xc4>
    2cf4:	8a e0       	ldi	r24, 0x0A	; 10
    2cf6:	98 9e       	mul	r9, r24
    2cf8:	20 0d       	add	r18, r0
    2cfa:	11 24       	eor	r1, r1
    2cfc:	92 2e       	mov	r9, r18
    2cfe:	11 c0       	rjmp	.+34     	; 0x2d22 <vfprintf+0xe6>
    2d00:	ea e0       	ldi	r30, 0x0A	; 10
    2d02:	2e 9e       	mul	r2, r30
    2d04:	20 0d       	add	r18, r0
    2d06:	11 24       	eor	r1, r1
    2d08:	22 2e       	mov	r2, r18
    2d0a:	f3 2d       	mov	r31, r3
    2d0c:	f0 62       	ori	r31, 0x20	; 32
    2d0e:	3f 2e       	mov	r3, r31
    2d10:	08 c0       	rjmp	.+16     	; 0x2d22 <vfprintf+0xe6>
    2d12:	8c 36       	cpi	r24, 0x6C	; 108
    2d14:	21 f4       	brne	.+8      	; 0x2d1e <vfprintf+0xe2>
    2d16:	83 2d       	mov	r24, r3
    2d18:	80 68       	ori	r24, 0x80	; 128
    2d1a:	38 2e       	mov	r3, r24
    2d1c:	02 c0       	rjmp	.+4      	; 0x2d22 <vfprintf+0xe6>
    2d1e:	88 36       	cpi	r24, 0x68	; 104
    2d20:	41 f4       	brne	.+16     	; 0x2d32 <vfprintf+0xf6>
    2d22:	f7 01       	movw	r30, r14
    2d24:	93 fd       	sbrc	r25, 3
    2d26:	85 91       	lpm	r24, Z+
    2d28:	93 ff       	sbrs	r25, 3
    2d2a:	81 91       	ld	r24, Z+
    2d2c:	7f 01       	movw	r14, r30
    2d2e:	81 11       	cpse	r24, r1
    2d30:	b3 cf       	rjmp	.-154    	; 0x2c98 <vfprintf+0x5c>
    2d32:	98 2f       	mov	r25, r24
    2d34:	9f 7d       	andi	r25, 0xDF	; 223
    2d36:	95 54       	subi	r25, 0x45	; 69
    2d38:	93 30       	cpi	r25, 0x03	; 3
    2d3a:	28 f4       	brcc	.+10     	; 0x2d46 <vfprintf+0x10a>
    2d3c:	0c 5f       	subi	r16, 0xFC	; 252
    2d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d40:	9f e3       	ldi	r25, 0x3F	; 63
    2d42:	99 83       	std	Y+1, r25	; 0x01
    2d44:	0d c0       	rjmp	.+26     	; 0x2d60 <vfprintf+0x124>
    2d46:	83 36       	cpi	r24, 0x63	; 99
    2d48:	31 f0       	breq	.+12     	; 0x2d56 <vfprintf+0x11a>
    2d4a:	83 37       	cpi	r24, 0x73	; 115
    2d4c:	71 f0       	breq	.+28     	; 0x2d6a <vfprintf+0x12e>
    2d4e:	83 35       	cpi	r24, 0x53	; 83
    2d50:	09 f0       	breq	.+2      	; 0x2d54 <vfprintf+0x118>
    2d52:	59 c0       	rjmp	.+178    	; 0x2e06 <vfprintf+0x1ca>
    2d54:	21 c0       	rjmp	.+66     	; 0x2d98 <vfprintf+0x15c>
    2d56:	f8 01       	movw	r30, r16
    2d58:	80 81       	ld	r24, Z
    2d5a:	89 83       	std	Y+1, r24	; 0x01
    2d5c:	0e 5f       	subi	r16, 0xFE	; 254
    2d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d60:	88 24       	eor	r8, r8
    2d62:	83 94       	inc	r8
    2d64:	91 2c       	mov	r9, r1
    2d66:	53 01       	movw	r10, r6
    2d68:	13 c0       	rjmp	.+38     	; 0x2d90 <vfprintf+0x154>
    2d6a:	28 01       	movw	r4, r16
    2d6c:	f2 e0       	ldi	r31, 0x02	; 2
    2d6e:	4f 0e       	add	r4, r31
    2d70:	51 1c       	adc	r5, r1
    2d72:	f8 01       	movw	r30, r16
    2d74:	a0 80       	ld	r10, Z
    2d76:	b1 80       	ldd	r11, Z+1	; 0x01
    2d78:	36 fe       	sbrs	r3, 6
    2d7a:	03 c0       	rjmp	.+6      	; 0x2d82 <vfprintf+0x146>
    2d7c:	69 2d       	mov	r22, r9
    2d7e:	70 e0       	ldi	r23, 0x00	; 0
    2d80:	02 c0       	rjmp	.+4      	; 0x2d86 <vfprintf+0x14a>
    2d82:	6f ef       	ldi	r22, 0xFF	; 255
    2d84:	7f ef       	ldi	r23, 0xFF	; 255
    2d86:	c5 01       	movw	r24, r10
    2d88:	0e 94 0a 18 	call	0x3014	; 0x3014 <strnlen>
    2d8c:	4c 01       	movw	r8, r24
    2d8e:	82 01       	movw	r16, r4
    2d90:	f3 2d       	mov	r31, r3
    2d92:	ff 77       	andi	r31, 0x7F	; 127
    2d94:	3f 2e       	mov	r3, r31
    2d96:	16 c0       	rjmp	.+44     	; 0x2dc4 <vfprintf+0x188>
    2d98:	28 01       	movw	r4, r16
    2d9a:	22 e0       	ldi	r18, 0x02	; 2
    2d9c:	42 0e       	add	r4, r18
    2d9e:	51 1c       	adc	r5, r1
    2da0:	f8 01       	movw	r30, r16
    2da2:	a0 80       	ld	r10, Z
    2da4:	b1 80       	ldd	r11, Z+1	; 0x01
    2da6:	36 fe       	sbrs	r3, 6
    2da8:	03 c0       	rjmp	.+6      	; 0x2db0 <vfprintf+0x174>
    2daa:	69 2d       	mov	r22, r9
    2dac:	70 e0       	ldi	r23, 0x00	; 0
    2dae:	02 c0       	rjmp	.+4      	; 0x2db4 <vfprintf+0x178>
    2db0:	6f ef       	ldi	r22, 0xFF	; 255
    2db2:	7f ef       	ldi	r23, 0xFF	; 255
    2db4:	c5 01       	movw	r24, r10
    2db6:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <strnlen_P>
    2dba:	4c 01       	movw	r8, r24
    2dbc:	f3 2d       	mov	r31, r3
    2dbe:	f0 68       	ori	r31, 0x80	; 128
    2dc0:	3f 2e       	mov	r3, r31
    2dc2:	82 01       	movw	r16, r4
    2dc4:	33 fc       	sbrc	r3, 3
    2dc6:	1b c0       	rjmp	.+54     	; 0x2dfe <vfprintf+0x1c2>
    2dc8:	82 2d       	mov	r24, r2
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	88 16       	cp	r8, r24
    2dce:	99 06       	cpc	r9, r25
    2dd0:	b0 f4       	brcc	.+44     	; 0x2dfe <vfprintf+0x1c2>
    2dd2:	b6 01       	movw	r22, r12
    2dd4:	80 e2       	ldi	r24, 0x20	; 32
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	0e 94 15 18 	call	0x302a	; 0x302a <fputc>
    2ddc:	2a 94       	dec	r2
    2dde:	f4 cf       	rjmp	.-24     	; 0x2dc8 <vfprintf+0x18c>
    2de0:	f5 01       	movw	r30, r10
    2de2:	37 fc       	sbrc	r3, 7
    2de4:	85 91       	lpm	r24, Z+
    2de6:	37 fe       	sbrs	r3, 7
    2de8:	81 91       	ld	r24, Z+
    2dea:	5f 01       	movw	r10, r30
    2dec:	b6 01       	movw	r22, r12
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	0e 94 15 18 	call	0x302a	; 0x302a <fputc>
    2df4:	21 10       	cpse	r2, r1
    2df6:	2a 94       	dec	r2
    2df8:	21 e0       	ldi	r18, 0x01	; 1
    2dfa:	82 1a       	sub	r8, r18
    2dfc:	91 08       	sbc	r9, r1
    2dfe:	81 14       	cp	r8, r1
    2e00:	91 04       	cpc	r9, r1
    2e02:	71 f7       	brne	.-36     	; 0x2de0 <vfprintf+0x1a4>
    2e04:	e8 c0       	rjmp	.+464    	; 0x2fd6 <vfprintf+0x39a>
    2e06:	84 36       	cpi	r24, 0x64	; 100
    2e08:	11 f0       	breq	.+4      	; 0x2e0e <vfprintf+0x1d2>
    2e0a:	89 36       	cpi	r24, 0x69	; 105
    2e0c:	41 f5       	brne	.+80     	; 0x2e5e <vfprintf+0x222>
    2e0e:	f8 01       	movw	r30, r16
    2e10:	37 fe       	sbrs	r3, 7
    2e12:	07 c0       	rjmp	.+14     	; 0x2e22 <vfprintf+0x1e6>
    2e14:	60 81       	ld	r22, Z
    2e16:	71 81       	ldd	r23, Z+1	; 0x01
    2e18:	82 81       	ldd	r24, Z+2	; 0x02
    2e1a:	93 81       	ldd	r25, Z+3	; 0x03
    2e1c:	0c 5f       	subi	r16, 0xFC	; 252
    2e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e20:	08 c0       	rjmp	.+16     	; 0x2e32 <vfprintf+0x1f6>
    2e22:	60 81       	ld	r22, Z
    2e24:	71 81       	ldd	r23, Z+1	; 0x01
    2e26:	07 2e       	mov	r0, r23
    2e28:	00 0c       	add	r0, r0
    2e2a:	88 0b       	sbc	r24, r24
    2e2c:	99 0b       	sbc	r25, r25
    2e2e:	0e 5f       	subi	r16, 0xFE	; 254
    2e30:	1f 4f       	sbci	r17, 0xFF	; 255
    2e32:	f3 2d       	mov	r31, r3
    2e34:	ff 76       	andi	r31, 0x6F	; 111
    2e36:	3f 2e       	mov	r3, r31
    2e38:	97 ff       	sbrs	r25, 7
    2e3a:	09 c0       	rjmp	.+18     	; 0x2e4e <vfprintf+0x212>
    2e3c:	90 95       	com	r25
    2e3e:	80 95       	com	r24
    2e40:	70 95       	com	r23
    2e42:	61 95       	neg	r22
    2e44:	7f 4f       	sbci	r23, 0xFF	; 255
    2e46:	8f 4f       	sbci	r24, 0xFF	; 255
    2e48:	9f 4f       	sbci	r25, 0xFF	; 255
    2e4a:	f0 68       	ori	r31, 0x80	; 128
    2e4c:	3f 2e       	mov	r3, r31
    2e4e:	2a e0       	ldi	r18, 0x0A	; 10
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	a3 01       	movw	r20, r6
    2e54:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__ultoa_invert>
    2e58:	88 2e       	mov	r8, r24
    2e5a:	86 18       	sub	r8, r6
    2e5c:	45 c0       	rjmp	.+138    	; 0x2ee8 <vfprintf+0x2ac>
    2e5e:	85 37       	cpi	r24, 0x75	; 117
    2e60:	31 f4       	brne	.+12     	; 0x2e6e <vfprintf+0x232>
    2e62:	23 2d       	mov	r18, r3
    2e64:	2f 7e       	andi	r18, 0xEF	; 239
    2e66:	b2 2e       	mov	r11, r18
    2e68:	2a e0       	ldi	r18, 0x0A	; 10
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	25 c0       	rjmp	.+74     	; 0x2eb8 <vfprintf+0x27c>
    2e6e:	93 2d       	mov	r25, r3
    2e70:	99 7f       	andi	r25, 0xF9	; 249
    2e72:	b9 2e       	mov	r11, r25
    2e74:	8f 36       	cpi	r24, 0x6F	; 111
    2e76:	c1 f0       	breq	.+48     	; 0x2ea8 <vfprintf+0x26c>
    2e78:	18 f4       	brcc	.+6      	; 0x2e80 <vfprintf+0x244>
    2e7a:	88 35       	cpi	r24, 0x58	; 88
    2e7c:	79 f0       	breq	.+30     	; 0x2e9c <vfprintf+0x260>
    2e7e:	b5 c0       	rjmp	.+362    	; 0x2fea <vfprintf+0x3ae>
    2e80:	80 37       	cpi	r24, 0x70	; 112
    2e82:	19 f0       	breq	.+6      	; 0x2e8a <vfprintf+0x24e>
    2e84:	88 37       	cpi	r24, 0x78	; 120
    2e86:	21 f0       	breq	.+8      	; 0x2e90 <vfprintf+0x254>
    2e88:	b0 c0       	rjmp	.+352    	; 0x2fea <vfprintf+0x3ae>
    2e8a:	e9 2f       	mov	r30, r25
    2e8c:	e0 61       	ori	r30, 0x10	; 16
    2e8e:	be 2e       	mov	r11, r30
    2e90:	b4 fe       	sbrs	r11, 4
    2e92:	0d c0       	rjmp	.+26     	; 0x2eae <vfprintf+0x272>
    2e94:	fb 2d       	mov	r31, r11
    2e96:	f4 60       	ori	r31, 0x04	; 4
    2e98:	bf 2e       	mov	r11, r31
    2e9a:	09 c0       	rjmp	.+18     	; 0x2eae <vfprintf+0x272>
    2e9c:	34 fe       	sbrs	r3, 4
    2e9e:	0a c0       	rjmp	.+20     	; 0x2eb4 <vfprintf+0x278>
    2ea0:	29 2f       	mov	r18, r25
    2ea2:	26 60       	ori	r18, 0x06	; 6
    2ea4:	b2 2e       	mov	r11, r18
    2ea6:	06 c0       	rjmp	.+12     	; 0x2eb4 <vfprintf+0x278>
    2ea8:	28 e0       	ldi	r18, 0x08	; 8
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	05 c0       	rjmp	.+10     	; 0x2eb8 <vfprintf+0x27c>
    2eae:	20 e1       	ldi	r18, 0x10	; 16
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	02 c0       	rjmp	.+4      	; 0x2eb8 <vfprintf+0x27c>
    2eb4:	20 e1       	ldi	r18, 0x10	; 16
    2eb6:	32 e0       	ldi	r19, 0x02	; 2
    2eb8:	f8 01       	movw	r30, r16
    2eba:	b7 fe       	sbrs	r11, 7
    2ebc:	07 c0       	rjmp	.+14     	; 0x2ecc <vfprintf+0x290>
    2ebe:	60 81       	ld	r22, Z
    2ec0:	71 81       	ldd	r23, Z+1	; 0x01
    2ec2:	82 81       	ldd	r24, Z+2	; 0x02
    2ec4:	93 81       	ldd	r25, Z+3	; 0x03
    2ec6:	0c 5f       	subi	r16, 0xFC	; 252
    2ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eca:	06 c0       	rjmp	.+12     	; 0x2ed8 <vfprintf+0x29c>
    2ecc:	60 81       	ld	r22, Z
    2ece:	71 81       	ldd	r23, Z+1	; 0x01
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	0e 5f       	subi	r16, 0xFE	; 254
    2ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed8:	a3 01       	movw	r20, r6
    2eda:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__ultoa_invert>
    2ede:	88 2e       	mov	r8, r24
    2ee0:	86 18       	sub	r8, r6
    2ee2:	fb 2d       	mov	r31, r11
    2ee4:	ff 77       	andi	r31, 0x7F	; 127
    2ee6:	3f 2e       	mov	r3, r31
    2ee8:	36 fe       	sbrs	r3, 6
    2eea:	0d c0       	rjmp	.+26     	; 0x2f06 <vfprintf+0x2ca>
    2eec:	23 2d       	mov	r18, r3
    2eee:	2e 7f       	andi	r18, 0xFE	; 254
    2ef0:	a2 2e       	mov	r10, r18
    2ef2:	89 14       	cp	r8, r9
    2ef4:	58 f4       	brcc	.+22     	; 0x2f0c <vfprintf+0x2d0>
    2ef6:	34 fe       	sbrs	r3, 4
    2ef8:	0b c0       	rjmp	.+22     	; 0x2f10 <vfprintf+0x2d4>
    2efa:	32 fc       	sbrc	r3, 2
    2efc:	09 c0       	rjmp	.+18     	; 0x2f10 <vfprintf+0x2d4>
    2efe:	83 2d       	mov	r24, r3
    2f00:	8e 7e       	andi	r24, 0xEE	; 238
    2f02:	a8 2e       	mov	r10, r24
    2f04:	05 c0       	rjmp	.+10     	; 0x2f10 <vfprintf+0x2d4>
    2f06:	b8 2c       	mov	r11, r8
    2f08:	a3 2c       	mov	r10, r3
    2f0a:	03 c0       	rjmp	.+6      	; 0x2f12 <vfprintf+0x2d6>
    2f0c:	b8 2c       	mov	r11, r8
    2f0e:	01 c0       	rjmp	.+2      	; 0x2f12 <vfprintf+0x2d6>
    2f10:	b9 2c       	mov	r11, r9
    2f12:	a4 fe       	sbrs	r10, 4
    2f14:	0f c0       	rjmp	.+30     	; 0x2f34 <vfprintf+0x2f8>
    2f16:	fe 01       	movw	r30, r28
    2f18:	e8 0d       	add	r30, r8
    2f1a:	f1 1d       	adc	r31, r1
    2f1c:	80 81       	ld	r24, Z
    2f1e:	80 33       	cpi	r24, 0x30	; 48
    2f20:	21 f4       	brne	.+8      	; 0x2f2a <vfprintf+0x2ee>
    2f22:	9a 2d       	mov	r25, r10
    2f24:	99 7e       	andi	r25, 0xE9	; 233
    2f26:	a9 2e       	mov	r10, r25
    2f28:	09 c0       	rjmp	.+18     	; 0x2f3c <vfprintf+0x300>
    2f2a:	a2 fe       	sbrs	r10, 2
    2f2c:	06 c0       	rjmp	.+12     	; 0x2f3a <vfprintf+0x2fe>
    2f2e:	b3 94       	inc	r11
    2f30:	b3 94       	inc	r11
    2f32:	04 c0       	rjmp	.+8      	; 0x2f3c <vfprintf+0x300>
    2f34:	8a 2d       	mov	r24, r10
    2f36:	86 78       	andi	r24, 0x86	; 134
    2f38:	09 f0       	breq	.+2      	; 0x2f3c <vfprintf+0x300>
    2f3a:	b3 94       	inc	r11
    2f3c:	a3 fc       	sbrc	r10, 3
    2f3e:	11 c0       	rjmp	.+34     	; 0x2f62 <vfprintf+0x326>
    2f40:	a0 fe       	sbrs	r10, 0
    2f42:	06 c0       	rjmp	.+12     	; 0x2f50 <vfprintf+0x314>
    2f44:	b2 14       	cp	r11, r2
    2f46:	88 f4       	brcc	.+34     	; 0x2f6a <vfprintf+0x32e>
    2f48:	28 0c       	add	r2, r8
    2f4a:	92 2c       	mov	r9, r2
    2f4c:	9b 18       	sub	r9, r11
    2f4e:	0e c0       	rjmp	.+28     	; 0x2f6c <vfprintf+0x330>
    2f50:	b2 14       	cp	r11, r2
    2f52:	60 f4       	brcc	.+24     	; 0x2f6c <vfprintf+0x330>
    2f54:	b6 01       	movw	r22, r12
    2f56:	80 e2       	ldi	r24, 0x20	; 32
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	0e 94 15 18 	call	0x302a	; 0x302a <fputc>
    2f5e:	b3 94       	inc	r11
    2f60:	f7 cf       	rjmp	.-18     	; 0x2f50 <vfprintf+0x314>
    2f62:	b2 14       	cp	r11, r2
    2f64:	18 f4       	brcc	.+6      	; 0x2f6c <vfprintf+0x330>
    2f66:	2b 18       	sub	r2, r11
    2f68:	02 c0       	rjmp	.+4      	; 0x2f6e <vfprintf+0x332>
    2f6a:	98 2c       	mov	r9, r8
    2f6c:	21 2c       	mov	r2, r1
    2f6e:	a4 fe       	sbrs	r10, 4
    2f70:	10 c0       	rjmp	.+32     	; 0x2f92 <vfprintf+0x356>
    2f72:	b6 01       	movw	r22, r12
    2f74:	80 e3       	ldi	r24, 0x30	; 48
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	0e 94 15 18 	call	0x302a	; 0x302a <fputc>
    2f7c:	a2 fe       	sbrs	r10, 2
    2f7e:	17 c0       	rjmp	.+46     	; 0x2fae <vfprintf+0x372>
    2f80:	a1 fc       	sbrc	r10, 1
    2f82:	03 c0       	rjmp	.+6      	; 0x2f8a <vfprintf+0x34e>
    2f84:	88 e7       	ldi	r24, 0x78	; 120
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	02 c0       	rjmp	.+4      	; 0x2f8e <vfprintf+0x352>
    2f8a:	88 e5       	ldi	r24, 0x58	; 88
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	b6 01       	movw	r22, r12
    2f90:	0c c0       	rjmp	.+24     	; 0x2faa <vfprintf+0x36e>
    2f92:	8a 2d       	mov	r24, r10
    2f94:	86 78       	andi	r24, 0x86	; 134
    2f96:	59 f0       	breq	.+22     	; 0x2fae <vfprintf+0x372>
    2f98:	a1 fe       	sbrs	r10, 1
    2f9a:	02 c0       	rjmp	.+4      	; 0x2fa0 <vfprintf+0x364>
    2f9c:	8b e2       	ldi	r24, 0x2B	; 43
    2f9e:	01 c0       	rjmp	.+2      	; 0x2fa2 <vfprintf+0x366>
    2fa0:	80 e2       	ldi	r24, 0x20	; 32
    2fa2:	a7 fc       	sbrc	r10, 7
    2fa4:	8d e2       	ldi	r24, 0x2D	; 45
    2fa6:	b6 01       	movw	r22, r12
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	0e 94 15 18 	call	0x302a	; 0x302a <fputc>
    2fae:	89 14       	cp	r8, r9
    2fb0:	38 f4       	brcc	.+14     	; 0x2fc0 <vfprintf+0x384>
    2fb2:	b6 01       	movw	r22, r12
    2fb4:	80 e3       	ldi	r24, 0x30	; 48
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	0e 94 15 18 	call	0x302a	; 0x302a <fputc>
    2fbc:	9a 94       	dec	r9
    2fbe:	f7 cf       	rjmp	.-18     	; 0x2fae <vfprintf+0x372>
    2fc0:	8a 94       	dec	r8
    2fc2:	f3 01       	movw	r30, r6
    2fc4:	e8 0d       	add	r30, r8
    2fc6:	f1 1d       	adc	r31, r1
    2fc8:	80 81       	ld	r24, Z
    2fca:	b6 01       	movw	r22, r12
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	0e 94 15 18 	call	0x302a	; 0x302a <fputc>
    2fd2:	81 10       	cpse	r8, r1
    2fd4:	f5 cf       	rjmp	.-22     	; 0x2fc0 <vfprintf+0x384>
    2fd6:	22 20       	and	r2, r2
    2fd8:	09 f4       	brne	.+2      	; 0x2fdc <vfprintf+0x3a0>
    2fda:	42 ce       	rjmp	.-892    	; 0x2c60 <vfprintf+0x24>
    2fdc:	b6 01       	movw	r22, r12
    2fde:	80 e2       	ldi	r24, 0x20	; 32
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	0e 94 15 18 	call	0x302a	; 0x302a <fputc>
    2fe6:	2a 94       	dec	r2
    2fe8:	f6 cf       	rjmp	.-20     	; 0x2fd6 <vfprintf+0x39a>
    2fea:	f6 01       	movw	r30, r12
    2fec:	86 81       	ldd	r24, Z+6	; 0x06
    2fee:	97 81       	ldd	r25, Z+7	; 0x07
    2ff0:	02 c0       	rjmp	.+4      	; 0x2ff6 <vfprintf+0x3ba>
    2ff2:	8f ef       	ldi	r24, 0xFF	; 255
    2ff4:	9f ef       	ldi	r25, 0xFF	; 255
    2ff6:	2b 96       	adiw	r28, 0x0b	; 11
    2ff8:	e2 e1       	ldi	r30, 0x12	; 18
    2ffa:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__epilogue_restores__>

00002ffe <strnlen_P>:
    2ffe:	fc 01       	movw	r30, r24
    3000:	05 90       	lpm	r0, Z+
    3002:	61 50       	subi	r22, 0x01	; 1
    3004:	70 40       	sbci	r23, 0x00	; 0
    3006:	01 10       	cpse	r0, r1
    3008:	d8 f7       	brcc	.-10     	; 0x3000 <strnlen_P+0x2>
    300a:	80 95       	com	r24
    300c:	90 95       	com	r25
    300e:	8e 0f       	add	r24, r30
    3010:	9f 1f       	adc	r25, r31
    3012:	08 95       	ret

00003014 <strnlen>:
    3014:	fc 01       	movw	r30, r24
    3016:	61 50       	subi	r22, 0x01	; 1
    3018:	70 40       	sbci	r23, 0x00	; 0
    301a:	01 90       	ld	r0, Z+
    301c:	01 10       	cpse	r0, r1
    301e:	d8 f7       	brcc	.-10     	; 0x3016 <strnlen+0x2>
    3020:	80 95       	com	r24
    3022:	90 95       	com	r25
    3024:	8e 0f       	add	r24, r30
    3026:	9f 1f       	adc	r25, r31
    3028:	08 95       	ret

0000302a <fputc>:
    302a:	0f 93       	push	r16
    302c:	1f 93       	push	r17
    302e:	cf 93       	push	r28
    3030:	df 93       	push	r29
    3032:	fb 01       	movw	r30, r22
    3034:	23 81       	ldd	r18, Z+3	; 0x03
    3036:	21 fd       	sbrc	r18, 1
    3038:	03 c0       	rjmp	.+6      	; 0x3040 <fputc+0x16>
    303a:	8f ef       	ldi	r24, 0xFF	; 255
    303c:	9f ef       	ldi	r25, 0xFF	; 255
    303e:	2c c0       	rjmp	.+88     	; 0x3098 <fputc+0x6e>
    3040:	22 ff       	sbrs	r18, 2
    3042:	16 c0       	rjmp	.+44     	; 0x3070 <fputc+0x46>
    3044:	46 81       	ldd	r20, Z+6	; 0x06
    3046:	57 81       	ldd	r21, Z+7	; 0x07
    3048:	24 81       	ldd	r18, Z+4	; 0x04
    304a:	35 81       	ldd	r19, Z+5	; 0x05
    304c:	42 17       	cp	r20, r18
    304e:	53 07       	cpc	r21, r19
    3050:	44 f4       	brge	.+16     	; 0x3062 <fputc+0x38>
    3052:	a0 81       	ld	r26, Z
    3054:	b1 81       	ldd	r27, Z+1	; 0x01
    3056:	9d 01       	movw	r18, r26
    3058:	2f 5f       	subi	r18, 0xFF	; 255
    305a:	3f 4f       	sbci	r19, 0xFF	; 255
    305c:	31 83       	std	Z+1, r19	; 0x01
    305e:	20 83       	st	Z, r18
    3060:	8c 93       	st	X, r24
    3062:	26 81       	ldd	r18, Z+6	; 0x06
    3064:	37 81       	ldd	r19, Z+7	; 0x07
    3066:	2f 5f       	subi	r18, 0xFF	; 255
    3068:	3f 4f       	sbci	r19, 0xFF	; 255
    306a:	37 83       	std	Z+7, r19	; 0x07
    306c:	26 83       	std	Z+6, r18	; 0x06
    306e:	14 c0       	rjmp	.+40     	; 0x3098 <fputc+0x6e>
    3070:	8b 01       	movw	r16, r22
    3072:	ec 01       	movw	r28, r24
    3074:	fb 01       	movw	r30, r22
    3076:	00 84       	ldd	r0, Z+8	; 0x08
    3078:	f1 85       	ldd	r31, Z+9	; 0x09
    307a:	e0 2d       	mov	r30, r0
    307c:	09 95       	icall
    307e:	89 2b       	or	r24, r25
    3080:	e1 f6       	brne	.-72     	; 0x303a <fputc+0x10>
    3082:	d8 01       	movw	r26, r16
    3084:	16 96       	adiw	r26, 0x06	; 6
    3086:	8d 91       	ld	r24, X+
    3088:	9c 91       	ld	r25, X
    308a:	17 97       	sbiw	r26, 0x07	; 7
    308c:	01 96       	adiw	r24, 0x01	; 1
    308e:	17 96       	adiw	r26, 0x07	; 7
    3090:	9c 93       	st	X, r25
    3092:	8e 93       	st	-X, r24
    3094:	16 97       	sbiw	r26, 0x06	; 6
    3096:	ce 01       	movw	r24, r28
    3098:	df 91       	pop	r29
    309a:	cf 91       	pop	r28
    309c:	1f 91       	pop	r17
    309e:	0f 91       	pop	r16
    30a0:	08 95       	ret

000030a2 <__ultoa_invert>:
    30a2:	fa 01       	movw	r30, r20
    30a4:	aa 27       	eor	r26, r26
    30a6:	28 30       	cpi	r18, 0x08	; 8
    30a8:	51 f1       	breq	.+84     	; 0x30fe <__ultoa_invert+0x5c>
    30aa:	20 31       	cpi	r18, 0x10	; 16
    30ac:	81 f1       	breq	.+96     	; 0x310e <__ultoa_invert+0x6c>
    30ae:	e8 94       	clt
    30b0:	6f 93       	push	r22
    30b2:	6e 7f       	andi	r22, 0xFE	; 254
    30b4:	6e 5f       	subi	r22, 0xFE	; 254
    30b6:	7f 4f       	sbci	r23, 0xFF	; 255
    30b8:	8f 4f       	sbci	r24, 0xFF	; 255
    30ba:	9f 4f       	sbci	r25, 0xFF	; 255
    30bc:	af 4f       	sbci	r26, 0xFF	; 255
    30be:	b1 e0       	ldi	r27, 0x01	; 1
    30c0:	3e d0       	rcall	.+124    	; 0x313e <__ultoa_invert+0x9c>
    30c2:	b4 e0       	ldi	r27, 0x04	; 4
    30c4:	3c d0       	rcall	.+120    	; 0x313e <__ultoa_invert+0x9c>
    30c6:	67 0f       	add	r22, r23
    30c8:	78 1f       	adc	r23, r24
    30ca:	89 1f       	adc	r24, r25
    30cc:	9a 1f       	adc	r25, r26
    30ce:	a1 1d       	adc	r26, r1
    30d0:	68 0f       	add	r22, r24
    30d2:	79 1f       	adc	r23, r25
    30d4:	8a 1f       	adc	r24, r26
    30d6:	91 1d       	adc	r25, r1
    30d8:	a1 1d       	adc	r26, r1
    30da:	6a 0f       	add	r22, r26
    30dc:	71 1d       	adc	r23, r1
    30de:	81 1d       	adc	r24, r1
    30e0:	91 1d       	adc	r25, r1
    30e2:	a1 1d       	adc	r26, r1
    30e4:	20 d0       	rcall	.+64     	; 0x3126 <__ultoa_invert+0x84>
    30e6:	09 f4       	brne	.+2      	; 0x30ea <__ultoa_invert+0x48>
    30e8:	68 94       	set
    30ea:	3f 91       	pop	r19
    30ec:	2a e0       	ldi	r18, 0x0A	; 10
    30ee:	26 9f       	mul	r18, r22
    30f0:	11 24       	eor	r1, r1
    30f2:	30 19       	sub	r19, r0
    30f4:	30 5d       	subi	r19, 0xD0	; 208
    30f6:	31 93       	st	Z+, r19
    30f8:	de f6       	brtc	.-74     	; 0x30b0 <__ultoa_invert+0xe>
    30fa:	cf 01       	movw	r24, r30
    30fc:	08 95       	ret
    30fe:	46 2f       	mov	r20, r22
    3100:	47 70       	andi	r20, 0x07	; 7
    3102:	40 5d       	subi	r20, 0xD0	; 208
    3104:	41 93       	st	Z+, r20
    3106:	b3 e0       	ldi	r27, 0x03	; 3
    3108:	0f d0       	rcall	.+30     	; 0x3128 <__ultoa_invert+0x86>
    310a:	c9 f7       	brne	.-14     	; 0x30fe <__ultoa_invert+0x5c>
    310c:	f6 cf       	rjmp	.-20     	; 0x30fa <__ultoa_invert+0x58>
    310e:	46 2f       	mov	r20, r22
    3110:	4f 70       	andi	r20, 0x0F	; 15
    3112:	40 5d       	subi	r20, 0xD0	; 208
    3114:	4a 33       	cpi	r20, 0x3A	; 58
    3116:	18 f0       	brcs	.+6      	; 0x311e <__ultoa_invert+0x7c>
    3118:	49 5d       	subi	r20, 0xD9	; 217
    311a:	31 fd       	sbrc	r19, 1
    311c:	40 52       	subi	r20, 0x20	; 32
    311e:	41 93       	st	Z+, r20
    3120:	02 d0       	rcall	.+4      	; 0x3126 <__ultoa_invert+0x84>
    3122:	a9 f7       	brne	.-22     	; 0x310e <__ultoa_invert+0x6c>
    3124:	ea cf       	rjmp	.-44     	; 0x30fa <__ultoa_invert+0x58>
    3126:	b4 e0       	ldi	r27, 0x04	; 4
    3128:	a6 95       	lsr	r26
    312a:	97 95       	ror	r25
    312c:	87 95       	ror	r24
    312e:	77 95       	ror	r23
    3130:	67 95       	ror	r22
    3132:	ba 95       	dec	r27
    3134:	c9 f7       	brne	.-14     	; 0x3128 <__ultoa_invert+0x86>
    3136:	00 97       	sbiw	r24, 0x00	; 0
    3138:	61 05       	cpc	r22, r1
    313a:	71 05       	cpc	r23, r1
    313c:	08 95       	ret
    313e:	9b 01       	movw	r18, r22
    3140:	ac 01       	movw	r20, r24
    3142:	0a 2e       	mov	r0, r26
    3144:	06 94       	lsr	r0
    3146:	57 95       	ror	r21
    3148:	47 95       	ror	r20
    314a:	37 95       	ror	r19
    314c:	27 95       	ror	r18
    314e:	ba 95       	dec	r27
    3150:	c9 f7       	brne	.-14     	; 0x3144 <__ultoa_invert+0xa2>
    3152:	62 0f       	add	r22, r18
    3154:	73 1f       	adc	r23, r19
    3156:	84 1f       	adc	r24, r20
    3158:	95 1f       	adc	r25, r21
    315a:	a0 1d       	adc	r26, r0
    315c:	08 95       	ret

0000315e <__prologue_saves__>:
    315e:	2f 92       	push	r2
    3160:	3f 92       	push	r3
    3162:	4f 92       	push	r4
    3164:	5f 92       	push	r5
    3166:	6f 92       	push	r6
    3168:	7f 92       	push	r7
    316a:	8f 92       	push	r8
    316c:	9f 92       	push	r9
    316e:	af 92       	push	r10
    3170:	bf 92       	push	r11
    3172:	cf 92       	push	r12
    3174:	df 92       	push	r13
    3176:	ef 92       	push	r14
    3178:	ff 92       	push	r15
    317a:	0f 93       	push	r16
    317c:	1f 93       	push	r17
    317e:	cf 93       	push	r28
    3180:	df 93       	push	r29
    3182:	cd b7       	in	r28, 0x3d	; 61
    3184:	de b7       	in	r29, 0x3e	; 62
    3186:	ca 1b       	sub	r28, r26
    3188:	db 0b       	sbc	r29, r27
    318a:	0f b6       	in	r0, 0x3f	; 63
    318c:	f8 94       	cli
    318e:	de bf       	out	0x3e, r29	; 62
    3190:	0f be       	out	0x3f, r0	; 63
    3192:	cd bf       	out	0x3d, r28	; 61
    3194:	09 94       	ijmp

00003196 <__epilogue_restores__>:
    3196:	2a 88       	ldd	r2, Y+18	; 0x12
    3198:	39 88       	ldd	r3, Y+17	; 0x11
    319a:	48 88       	ldd	r4, Y+16	; 0x10
    319c:	5f 84       	ldd	r5, Y+15	; 0x0f
    319e:	6e 84       	ldd	r6, Y+14	; 0x0e
    31a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    31a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    31a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    31a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    31a8:	b9 84       	ldd	r11, Y+9	; 0x09
    31aa:	c8 84       	ldd	r12, Y+8	; 0x08
    31ac:	df 80       	ldd	r13, Y+7	; 0x07
    31ae:	ee 80       	ldd	r14, Y+6	; 0x06
    31b0:	fd 80       	ldd	r15, Y+5	; 0x05
    31b2:	0c 81       	ldd	r16, Y+4	; 0x04
    31b4:	1b 81       	ldd	r17, Y+3	; 0x03
    31b6:	aa 81       	ldd	r26, Y+2	; 0x02
    31b8:	b9 81       	ldd	r27, Y+1	; 0x01
    31ba:	ce 0f       	add	r28, r30
    31bc:	d1 1d       	adc	r29, r1
    31be:	0f b6       	in	r0, 0x3f	; 63
    31c0:	f8 94       	cli
    31c2:	de bf       	out	0x3e, r29	; 62
    31c4:	0f be       	out	0x3f, r0	; 63
    31c6:	cd bf       	out	0x3d, r28	; 61
    31c8:	ed 01       	movw	r28, r26
    31ca:	08 95       	ret

000031cc <_exit>:
    31cc:	f8 94       	cli

000031ce <__stop_program>:
    31ce:	ff cf       	rjmp	.-2      	; 0x31ce <__stop_program>
