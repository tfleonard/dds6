
dds6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000216  00800100  0000355a  000035ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000355a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  00800316  00800316  00003804  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003804  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003860  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c8  00000000  00000000  000038a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008747  00000000  00000000  00003d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a31  00000000  00000000  0000c4af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d7f  00000000  00000000  0000eee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ea0  00000000  00000000  00011c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019c7  00000000  00000000  00012b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004770  00000000  00000000  000144c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  00018c37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e5       	ldi	r30, 0x5A	; 90
      7c:	f5 e3       	ldi	r31, 0x35	; 53
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 31       	cpi	r26, 0x16	; 22
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a6 e1       	ldi	r26, 0x16	; 22
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 37       	cpi	r26, 0x75	; 117
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <main>
      9e:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FONT>:
	...
     232:	00 08       	sbc	r0, r0
     234:	08 08       	sbc	r0, r8
     236:	08 08       	sbc	r0, r8
     238:	08 00       	.word	0x0008	; ????
     23a:	08 00       	.word	0x0008	; ????
     23c:	00 00       	nop
     23e:	00 14       	cp	r0, r0
     240:	14 14       	cp	r1, r4
	...
     24a:	00 00       	nop
     24c:	14 14       	cp	r1, r4
     24e:	3e 14       	cp	r3, r14
     250:	3e 14       	cp	r3, r14
     252:	14 00       	.word	0x0014	; ????
     254:	00 00       	nop
     256:	00 00       	nop
     258:	08 3c       	cpi	r16, 0xC8	; 200
     25a:	0a 1c       	adc	r0, r10
     25c:	28 1e       	adc	r2, r24
     25e:	08 00       	.word	0x0008	; ????
     260:	00 00       	nop
     262:	00 00       	nop
     264:	06 26       	eor	r0, r22
     266:	10 08       	sbc	r1, r0
     268:	04 32       	cpi	r16, 0x24	; 36
     26a:	30 00       	.word	0x0030	; ????
     26c:	00 00       	nop
     26e:	00 00       	nop
     270:	1c 02       	muls	r17, r28
     272:	02 04       	cpc	r0, r2
     274:	2a 12       	cpse	r2, r26
     276:	2c 00       	.word	0x002c	; ????
     278:	00 00       	nop
     27a:	00 18       	sub	r0, r0
     27c:	08 04       	cpc	r0, r8
	...
     286:	20 10       	cpse	r2, r0
     288:	10 08       	sbc	r1, r0
     28a:	08 08       	sbc	r0, r8
     28c:	08 08       	sbc	r0, r8
     28e:	10 10       	cpse	r1, r0
     290:	20 00       	.word	0x0020	; ????
     292:	02 04       	cpc	r0, r2
     294:	04 08       	sbc	r0, r4
     296:	08 08       	sbc	r0, r8
     298:	08 08       	sbc	r0, r8
     29a:	04 04       	cpc	r0, r4
     29c:	02 00       	.word	0x0002	; ????
     29e:	00 00       	nop
     2a0:	00 08       	sbc	r0, r0
     2a2:	2a 1c       	adc	r2, r10
     2a4:	2a 08       	sbc	r2, r10
     2a6:	00 00       	nop
     2a8:	00 00       	nop
     2aa:	00 00       	nop
     2ac:	00 08       	sbc	r0, r0
     2ae:	08 3e       	cpi	r16, 0xE8	; 232
     2b0:	08 08       	sbc	r0, r8
	...
     2ba:	00 00       	nop
     2bc:	00 18       	sub	r0, r0
     2be:	18 08       	sbc	r1, r8
     2c0:	04 00       	.word	0x0004	; ????
     2c2:	00 00       	nop
     2c4:	00 00       	nop
     2c6:	00 3e       	cpi	r16, 0xE0	; 224
	...
     2d4:	00 18       	sub	r0, r0
     2d6:	18 00       	.word	0x0018	; ????
     2d8:	00 00       	nop
     2da:	20 20       	and	r2, r0
     2dc:	10 10       	cpse	r1, r0
     2de:	08 08       	sbc	r0, r8
     2e0:	04 04       	cpc	r0, r4
     2e2:	02 02       	muls	r16, r18
     2e4:	00 00       	nop
     2e6:	00 1c       	adc	r0, r0
     2e8:	22 32       	cpi	r18, 0x22	; 34
     2ea:	2a 26       	eor	r2, r26
     2ec:	22 22       	and	r2, r18
     2ee:	1c 00       	.word	0x001c	; ????
     2f0:	00 00       	nop
     2f2:	00 08       	sbc	r0, r0
     2f4:	0c 08       	sbc	r0, r12
     2f6:	08 08       	sbc	r0, r8
     2f8:	08 08       	sbc	r0, r8
     2fa:	08 00       	.word	0x0008	; ????
     2fc:	00 00       	nop
     2fe:	00 1c       	adc	r0, r0
     300:	22 20       	and	r2, r2
     302:	10 08       	sbc	r1, r0
     304:	04 02       	muls	r16, r20
     306:	3e 00       	.word	0x003e	; ????
     308:	00 00       	nop
     30a:	00 1c       	adc	r0, r0
     30c:	22 20       	and	r2, r2
     30e:	18 20       	and	r1, r8
     310:	20 22       	and	r2, r16
     312:	1c 00       	.word	0x001c	; ????
     314:	00 00       	nop
     316:	00 10       	cpse	r0, r0
     318:	18 18       	sub	r1, r8
     31a:	14 14       	cp	r1, r4
     31c:	3e 10       	cpse	r3, r14
     31e:	38 00       	.word	0x0038	; ????
     320:	00 00       	nop
     322:	00 3e       	cpi	r16, 0xE0	; 224
     324:	02 02       	muls	r16, r18
     326:	1e 20       	and	r1, r14
     328:	20 22       	and	r2, r16
     32a:	1c 00       	.word	0x001c	; ????
     32c:	00 00       	nop
     32e:	00 18       	sub	r0, r0
     330:	04 02       	muls	r16, r20
     332:	1e 22       	and	r1, r30
     334:	22 22       	and	r2, r18
     336:	1c 00       	.word	0x001c	; ????
     338:	00 00       	nop
     33a:	00 3e       	cpi	r16, 0xE0	; 224
     33c:	22 20       	and	r2, r2
     33e:	20 10       	cpse	r2, r0
     340:	10 08       	sbc	r1, r0
     342:	08 00       	.word	0x0008	; ????
     344:	00 00       	nop
     346:	00 1c       	adc	r0, r0
     348:	22 22       	and	r2, r18
     34a:	1c 22       	and	r1, r28
     34c:	22 22       	and	r2, r18
     34e:	1c 00       	.word	0x001c	; ????
     350:	00 00       	nop
     352:	00 1c       	adc	r0, r0
     354:	22 22       	and	r2, r18
     356:	22 3c       	cpi	r18, 0xC2	; 194
     358:	20 10       	cpse	r2, r0
     35a:	0c 00       	.word	0x000c	; ????
     35c:	00 00       	nop
     35e:	00 00       	nop
     360:	00 18       	sub	r0, r0
     362:	18 00       	.word	0x0018	; ????
     364:	00 18       	sub	r0, r0
     366:	18 00       	.word	0x0018	; ????
     368:	00 00       	nop
     36a:	00 00       	nop
     36c:	00 18       	sub	r0, r0
     36e:	18 00       	.word	0x0018	; ????
     370:	00 18       	sub	r0, r0
     372:	18 08       	sbc	r1, r8
     374:	04 00       	.word	0x0004	; ????
     376:	00 00       	nop
     378:	00 30       	cpi	r16, 0x00	; 0
     37a:	0c 03       	fmul	r16, r20
     37c:	0c 30       	cpi	r16, 0x0C	; 12
	...
     386:	3e 00       	.word	0x003e	; ????
     388:	3e 00       	.word	0x003e	; ????
     38a:	00 00       	nop
     38c:	00 00       	nop
     38e:	00 00       	nop
     390:	00 03       	mulsu	r16, r16
     392:	0c 30       	cpi	r16, 0x0C	; 12
     394:	0c 03       	fmul	r16, r20
     396:	00 00       	nop
     398:	00 00       	nop
     39a:	00 1c       	adc	r0, r0
     39c:	22 20       	and	r2, r2
     39e:	10 08       	sbc	r1, r0
     3a0:	08 00       	.word	0x0008	; ????
     3a2:	08 00       	.word	0x0008	; ????
     3a4:	00 00       	nop
     3a6:	00 00       	nop
     3a8:	1c 22       	and	r1, r28
     3aa:	3a 3a       	cpi	r19, 0xAA	; 170
     3ac:	1a 02       	muls	r17, r26
     3ae:	1c 00       	.word	0x001c	; ????
     3b0:	00 00       	nop
     3b2:	00 00       	nop
     3b4:	08 14       	cp	r0, r8
     3b6:	22 22       	and	r2, r18
     3b8:	3e 22       	and	r3, r30
     3ba:	22 00       	.word	0x0022	; ????
     3bc:	00 00       	nop
     3be:	00 00       	nop
     3c0:	1e 22       	and	r1, r30
     3c2:	22 1e       	adc	r2, r18
     3c4:	22 22       	and	r2, r18
     3c6:	1e 00       	.word	0x001e	; ????
     3c8:	00 00       	nop
     3ca:	00 00       	nop
     3cc:	1c 22       	and	r1, r28
     3ce:	02 02       	muls	r16, r18
     3d0:	02 22       	and	r0, r18
     3d2:	1c 00       	.word	0x001c	; ????
     3d4:	00 00       	nop
     3d6:	00 00       	nop
     3d8:	0e 12       	cpse	r0, r30
     3da:	22 22       	and	r2, r18
     3dc:	22 12       	cpse	r2, r18
     3de:	0e 00       	.word	0x000e	; ????
     3e0:	00 00       	nop
     3e2:	00 00       	nop
     3e4:	3e 02       	muls	r19, r30
     3e6:	02 1e       	adc	r0, r18
     3e8:	02 02       	muls	r16, r18
     3ea:	3e 00       	.word	0x003e	; ????
     3ec:	00 00       	nop
     3ee:	00 00       	nop
     3f0:	3e 02       	muls	r19, r30
     3f2:	02 1e       	adc	r0, r18
     3f4:	02 02       	muls	r16, r18
     3f6:	02 00       	.word	0x0002	; ????
     3f8:	00 00       	nop
     3fa:	00 00       	nop
     3fc:	1c 22       	and	r1, r28
     3fe:	02 32       	cpi	r16, 0x22	; 34
     400:	22 22       	and	r2, r18
     402:	3c 00       	.word	0x003c	; ????
     404:	00 00       	nop
     406:	00 00       	nop
     408:	22 22       	and	r2, r18
     40a:	22 3e       	cpi	r18, 0xE2	; 226
     40c:	22 22       	and	r2, r18
     40e:	22 00       	.word	0x0022	; ????
     410:	00 00       	nop
     412:	00 00       	nop
     414:	3e 08       	sbc	r3, r14
     416:	08 08       	sbc	r0, r8
     418:	08 08       	sbc	r0, r8
     41a:	3e 00       	.word	0x003e	; ????
     41c:	00 00       	nop
     41e:	00 00       	nop
     420:	38 20       	and	r3, r8
     422:	20 20       	and	r2, r0
     424:	22 22       	and	r2, r18
     426:	1c 00       	.word	0x001c	; ????
     428:	00 00       	nop
     42a:	00 00       	nop
     42c:	22 12       	cpse	r2, r18
     42e:	0a 06       	cpc	r0, r26
     430:	0a 12       	cpse	r0, r26
     432:	22 00       	.word	0x0022	; ????
     434:	00 00       	nop
     436:	00 00       	nop
     438:	02 02       	muls	r16, r18
     43a:	02 02       	muls	r16, r18
     43c:	02 02       	muls	r16, r18
     43e:	3e 00       	.word	0x003e	; ????
     440:	00 00       	nop
     442:	00 00       	nop
     444:	22 36       	cpi	r18, 0x62	; 98
     446:	2a 2a       	or	r2, r26
     448:	22 22       	and	r2, r18
     44a:	22 00       	.word	0x0022	; ????
     44c:	00 00       	nop
     44e:	00 00       	nop
     450:	22 26       	eor	r2, r18
     452:	26 2a       	or	r2, r22
     454:	32 32       	cpi	r19, 0x22	; 34
     456:	22 00       	.word	0x0022	; ????
     458:	00 00       	nop
     45a:	00 00       	nop
     45c:	1c 22       	and	r1, r28
     45e:	22 22       	and	r2, r18
     460:	22 22       	and	r2, r18
     462:	1c 00       	.word	0x001c	; ????
     464:	00 00       	nop
     466:	00 00       	nop
     468:	1e 22       	and	r1, r30
     46a:	22 1e       	adc	r2, r18
     46c:	02 02       	muls	r16, r18
     46e:	02 00       	.word	0x0002	; ????
     470:	00 00       	nop
     472:	00 00       	nop
     474:	1c 22       	and	r1, r28
     476:	22 22       	and	r2, r18
     478:	22 22       	and	r2, r18
     47a:	1c 30       	cpi	r17, 0x0C	; 12
     47c:	00 00       	nop
     47e:	00 00       	nop
     480:	1e 22       	and	r1, r30
     482:	22 1e       	adc	r2, r18
     484:	0a 12       	cpse	r0, r26
     486:	22 00       	.word	0x0022	; ????
     488:	00 00       	nop
     48a:	00 00       	nop
     48c:	1c 22       	and	r1, r28
     48e:	02 1c       	adc	r0, r2
     490:	20 22       	and	r2, r16
     492:	1c 00       	.word	0x001c	; ????
     494:	00 00       	nop
     496:	00 00       	nop
     498:	3e 08       	sbc	r3, r14
     49a:	08 08       	sbc	r0, r8
     49c:	08 08       	sbc	r0, r8
     49e:	08 00       	.word	0x0008	; ????
     4a0:	00 00       	nop
     4a2:	00 00       	nop
     4a4:	22 22       	and	r2, r18
     4a6:	22 22       	and	r2, r18
     4a8:	22 22       	and	r2, r18
     4aa:	1c 00       	.word	0x001c	; ????
     4ac:	00 00       	nop
     4ae:	00 00       	nop
     4b0:	22 22       	and	r2, r18
     4b2:	22 14       	cp	r2, r2
     4b4:	14 08       	sbc	r1, r4
     4b6:	08 00       	.word	0x0008	; ????
     4b8:	00 00       	nop
     4ba:	00 00       	nop
     4bc:	22 22       	and	r2, r18
     4be:	22 2a       	or	r2, r18
     4c0:	2a 36       	cpi	r18, 0x6A	; 106
     4c2:	22 00       	.word	0x0022	; ????
     4c4:	00 00       	nop
     4c6:	00 00       	nop
     4c8:	22 22       	and	r2, r18
     4ca:	14 08       	sbc	r1, r4
     4cc:	14 22       	and	r1, r20
     4ce:	22 00       	.word	0x0022	; ????
     4d0:	00 00       	nop
     4d2:	00 00       	nop
     4d4:	22 22       	and	r2, r18
     4d6:	14 08       	sbc	r1, r4
     4d8:	08 08       	sbc	r0, r8
     4da:	08 00       	.word	0x0008	; ????
     4dc:	00 00       	nop
     4de:	00 00       	nop
     4e0:	3e 20       	and	r3, r14
     4e2:	10 08       	sbc	r1, r0
     4e4:	04 02       	muls	r16, r20
     4e6:	3e 00       	.word	0x003e	; ????
     4e8:	00 00       	nop
     4ea:	38 08       	sbc	r3, r8
     4ec:	08 08       	sbc	r0, r8
     4ee:	08 08       	sbc	r0, r8
     4f0:	08 08       	sbc	r0, r8
     4f2:	08 08       	sbc	r0, r8
     4f4:	38 00       	.word	0x0038	; ????
     4f6:	02 02       	muls	r16, r18
     4f8:	04 04       	cpc	r0, r4
     4fa:	08 08       	sbc	r0, r8
     4fc:	10 10       	cpse	r1, r0
     4fe:	20 20       	and	r2, r0
     500:	00 00       	nop
     502:	0e 08       	sbc	r0, r14
     504:	08 08       	sbc	r0, r8
     506:	08 08       	sbc	r0, r8
     508:	08 08       	sbc	r0, r8
     50a:	08 08       	sbc	r0, r8
     50c:	0e 00       	.word	0x000e	; ????
     50e:	00 08       	sbc	r0, r0
     510:	14 22       	and	r1, r20
	...
     522:	00 3f       	cpi	r16, 0xF0	; 240
     524:	00 00       	nop
     526:	00 0c       	add	r0, r0
     528:	08 10       	cpse	r0, r8
	...
     536:	3c 22       	and	r3, r28
     538:	22 32       	cpi	r18, 0x22	; 34
     53a:	2c 00       	.word	0x002c	; ????
     53c:	00 00       	nop
     53e:	00 02       	muls	r16, r16
     540:	02 02       	muls	r16, r18
     542:	1e 22       	and	r1, r30
     544:	22 22       	and	r2, r18
     546:	1e 00       	.word	0x001e	; ????
     548:	00 00       	nop
     54a:	00 00       	nop
     54c:	00 00       	nop
     54e:	3c 02       	muls	r19, r28
     550:	02 02       	muls	r16, r18
     552:	3c 00       	.word	0x003c	; ????
     554:	00 00       	nop
     556:	00 20       	and	r0, r0
     558:	20 20       	and	r2, r0
     55a:	3c 22       	and	r3, r28
     55c:	22 22       	and	r2, r18
     55e:	3c 00       	.word	0x003c	; ????
     560:	00 00       	nop
     562:	00 00       	nop
     564:	00 00       	nop
     566:	1c 22       	and	r1, r28
     568:	3e 02       	muls	r19, r30
     56a:	1c 00       	.word	0x001c	; ????
     56c:	00 00       	nop
     56e:	00 38       	cpi	r16, 0x80	; 128
     570:	04 04       	cpc	r0, r4
     572:	1e 04       	cpc	r1, r14
     574:	04 04       	cpc	r0, r4
     576:	04 00       	.word	0x0004	; ????
     578:	00 00       	nop
     57a:	00 00       	nop
     57c:	00 00       	nop
     57e:	3c 22       	and	r3, r28
     580:	22 22       	and	r2, r18
     582:	3c 20       	and	r3, r12
     584:	20 1c       	adc	r2, r0
     586:	00 02       	muls	r16, r16
     588:	02 02       	muls	r16, r18
     58a:	1e 22       	and	r1, r30
     58c:	22 22       	and	r2, r18
     58e:	22 00       	.word	0x0022	; ????
     590:	00 00       	nop
     592:	00 08       	sbc	r0, r0
     594:	08 00       	.word	0x0008	; ????
     596:	0c 08       	sbc	r0, r12
     598:	08 08       	sbc	r0, r8
     59a:	1c 00       	.word	0x001c	; ????
     59c:	00 00       	nop
     59e:	00 10       	cpse	r0, r0
     5a0:	10 00       	.word	0x0010	; ????
     5a2:	1c 10       	cpse	r1, r12
     5a4:	10 10       	cpse	r1, r0
     5a6:	10 10       	cpse	r1, r0
     5a8:	10 0e       	add	r1, r16
     5aa:	00 02       	muls	r16, r16
     5ac:	02 02       	muls	r16, r18
     5ae:	12 0a       	sbc	r1, r18
     5b0:	06 0a       	sbc	r0, r22
     5b2:	12 00       	.word	0x0012	; ????
     5b4:	00 00       	nop
     5b6:	00 0c       	add	r0, r0
     5b8:	08 08       	sbc	r0, r8
     5ba:	08 08       	sbc	r0, r8
     5bc:	08 08       	sbc	r0, r8
     5be:	1c 00       	.word	0x001c	; ????
     5c0:	00 00       	nop
     5c2:	00 00       	nop
     5c4:	00 00       	nop
     5c6:	16 2a       	or	r1, r22
     5c8:	2a 2a       	or	r2, r26
     5ca:	22 00       	.word	0x0022	; ????
     5cc:	00 00       	nop
     5ce:	00 00       	nop
     5d0:	00 00       	nop
     5d2:	1a 26       	eor	r1, r26
     5d4:	22 22       	and	r2, r18
     5d6:	22 00       	.word	0x0022	; ????
     5d8:	00 00       	nop
     5da:	00 00       	nop
     5dc:	00 00       	nop
     5de:	1c 22       	and	r1, r28
     5e0:	22 22       	and	r2, r18
     5e2:	1c 00       	.word	0x001c	; ????
     5e4:	00 00       	nop
     5e6:	00 00       	nop
     5e8:	00 00       	nop
     5ea:	1e 22       	and	r1, r30
     5ec:	22 22       	and	r2, r18
     5ee:	1e 02       	muls	r17, r30
     5f0:	02 02       	muls	r16, r18
     5f2:	00 00       	nop
     5f4:	00 00       	nop
     5f6:	3c 22       	and	r3, r28
     5f8:	22 22       	and	r2, r18
     5fa:	3c 20       	and	r3, r12
     5fc:	20 20       	and	r2, r0
     5fe:	00 00       	nop
     600:	00 00       	nop
     602:	1a 06       	cpc	r1, r26
     604:	02 02       	muls	r16, r18
     606:	02 00       	.word	0x0002	; ????
     608:	00 00       	nop
     60a:	00 00       	nop
     60c:	00 00       	nop
     60e:	3c 02       	muls	r19, r28
     610:	1c 20       	and	r1, r12
     612:	1e 00       	.word	0x001e	; ????
     614:	00 00       	nop
     616:	00 08       	sbc	r0, r0
     618:	08 08       	sbc	r0, r8
     61a:	3e 08       	sbc	r3, r14
     61c:	08 08       	sbc	r0, r8
     61e:	30 00       	.word	0x0030	; ????
     620:	00 00       	nop
     622:	00 00       	nop
     624:	00 00       	nop
     626:	22 22       	and	r2, r18
     628:	22 32       	cpi	r18, 0x22	; 34
     62a:	2c 00       	.word	0x002c	; ????
     62c:	00 00       	nop
     62e:	00 00       	nop
     630:	00 00       	nop
     632:	36 14       	cp	r3, r6
     634:	14 08       	sbc	r1, r4
     636:	08 00       	.word	0x0008	; ????
     638:	00 00       	nop
     63a:	00 00       	nop
     63c:	00 00       	nop
     63e:	22 2a       	or	r2, r18
     640:	2a 2a       	or	r2, r26
     642:	14 00       	.word	0x0014	; ????
     644:	00 00       	nop
     646:	00 00       	nop
     648:	00 00       	nop
     64a:	22 14       	cp	r2, r2
     64c:	08 14       	cp	r0, r8
     64e:	22 00       	.word	0x0022	; ????
     650:	00 00       	nop
     652:	00 00       	nop
     654:	00 00       	nop
     656:	22 22       	and	r2, r18
     658:	22 22       	and	r2, r18
     65a:	3c 20       	and	r3, r12
     65c:	20 1c       	adc	r2, r0
     65e:	00 00       	nop
     660:	00 00       	nop
     662:	3e 10       	cpse	r3, r14
     664:	08 04       	cpc	r0, r8
     666:	3e 00       	.word	0x003e	; ????
     668:	00 00       	nop
     66a:	20 10       	cpse	r2, r0
     66c:	10 10       	cpse	r1, r0
     66e:	10 08       	sbc	r1, r0
     670:	10 10       	cpse	r1, r0
     672:	10 10       	cpse	r1, r0
     674:	20 00       	.word	0x0020	; ????
     676:	08 08       	sbc	r0, r8
     678:	08 08       	sbc	r0, r8
     67a:	08 08       	sbc	r0, r8
     67c:	08 08       	sbc	r0, r8
     67e:	08 08       	sbc	r0, r8
     680:	08 00       	.word	0x0008	; ????
     682:	02 04       	cpc	r0, r2
     684:	04 04       	cpc	r0, r4
     686:	04 08       	sbc	r0, r4
     688:	04 04       	cpc	r0, r4
     68a:	04 04       	cpc	r0, r4
     68c:	02 00       	.word	0x0002	; ????
     68e:	00 04       	cpc	r0, r0
     690:	2a 10       	cpse	r2, r10
	...
     69a:	00 00       	nop
     69c:	00 08       	sbc	r0, r0
     69e:	08 14       	cp	r0, r8
     6a0:	14 22       	and	r1, r20
     6a2:	3e 00       	.word	0x003e	; ????
	...

000006a6 <_getPixels>:

;
; c is in r24, buf in r23:r22
;
_getPixels:
	push	r28
     6a6:	cf 93       	push	r28
	push	r29								; save y
     6a8:	df 93       	push	r29
	
	ldi		r25,CHEIGHT
     6aa:	9c e0       	ldi	r25, 0x0C	; 12
	mul		r24,r25						; offs = c * CHAR_HEIGHT, in r1:r0
     6ac:	89 9f       	mul	r24, r25

000006ae <_gp1>:

_gp1:
  ldi   r30,pm_lo8(FONT)    ; z gets address of FONT, pm get the relocatable address
     6ae:	e3 e5       	ldi	r30, 0x53	; 83
  ldi   r31,pm_hi8(FONT)
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
  lsl	r30										; FONT address is a hword address, convert to byte
     6b2:	ee 0f       	add	r30, r30
  rol	r31
     6b4:	ff 1f       	adc	r31, r31
  add   r30,r0             ; z + offs
     6b6:	e0 0d       	add	r30, r0
  adc   r31,r1
     6b8:	f1 1d       	adc	r31, r1

  ldi   r24,CHEIGHT				; number of bytes in char
     6ba:	8c e0       	ldi	r24, 0x0C	; 12
  movw  y,r22								; buf address
     6bc:	eb 01       	movw	r28, r22

000006be <gpix1>:

gpix1:
  lpm   r25,z+
     6be:	95 91       	lpm	r25, Z+
  st    y+,r25
     6c0:	99 93       	st	Y+, r25
  dec   r24
     6c2:	8a 95       	dec	r24
  brne   gpix1
     6c4:	e1 f7       	brne	.-8      	; 0x6be <gpix1>

	clr		r1									; restore r1 to zero
     6c6:	11 24       	eor	r1, r1
	pop		r29
     6c8:	df 91       	pop	r29
	pop		r28
     6ca:	cf 91       	pop	r28

	ret
     6cc:	08 95       	ret

000006ce <_ZN5Clock4tickEv>:

  sei();
}


Clock::~Clock(void) {
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <_ZN5Clock8sysclockE>
     6da:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <_ZN5Clock8sysclockE+0x1>
     6de:	a0 91 55 03 	lds	r26, 0x0355	; 0x800355 <_ZN5Clock8sysclockE+0x2>
     6e2:	b0 91 56 03 	lds	r27, 0x0356	; 0x800356 <_ZN5Clock8sysclockE+0x3>
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	a1 1d       	adc	r26, r1
     6ea:	b1 1d       	adc	r27, r1
     6ec:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <_ZN5Clock8sysclockE>
     6f0:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <_ZN5Clock8sysclockE+0x1>
     6f4:	a0 93 55 03 	sts	0x0355, r26	; 0x800355 <_ZN5Clock8sysclockE+0x2>
     6f8:	b0 93 56 03 	sts	0x0356, r27	; 0x800356 <_ZN5Clock8sysclockE+0x3>
     6fc:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <_ZN5Clock9delayTimeE>
     700:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <_ZN5Clock9delayTimeE+0x1>
     704:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <_ZN5Clock9delayTimeE+0x2>
     708:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <_ZN5Clock9delayTimeE+0x3>
     70c:	89 2b       	or	r24, r25
     70e:	8a 2b       	or	r24, r26
     710:	8b 2b       	or	r24, r27
     712:	99 f0       	breq	.+38     	; 0x73a <_ZN5Clock4tickEv+0x6c>
     714:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <_ZN5Clock9delayTimeE>
     718:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <_ZN5Clock9delayTimeE+0x1>
     71c:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <_ZN5Clock9delayTimeE+0x2>
     720:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <_ZN5Clock9delayTimeE+0x3>
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	a1 09       	sbc	r26, r1
     728:	b1 09       	sbc	r27, r1
     72a:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <_ZN5Clock9delayTimeE>
     72e:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <_ZN5Clock9delayTimeE+0x1>
     732:	a0 93 51 03 	sts	0x0351, r26	; 0x800351 <_ZN5Clock9delayTimeE+0x2>
     736:	b0 93 52 03 	sts	0x0352, r27	; 0x800352 <_ZN5Clock9delayTimeE+0x3>
     73a:	0e e3       	ldi	r16, 0x3E	; 62
     73c:	13 e0       	ldi	r17, 0x03	; 3
     73e:	c0 e0       	ldi	r28, 0x00	; 0
     740:	d0 e0       	ldi	r29, 0x00	; 0
     742:	d8 01       	movw	r26, r16
     744:	8d 91       	ld	r24, X+
     746:	9d 91       	ld	r25, X+
     748:	8d 01       	movw	r16, r26
     74a:	00 97       	sbiw	r24, 0x00	; 0
     74c:	e1 f0       	breq	.+56     	; 0x786 <_ZN5Clock4tickEv+0xb8>
     74e:	9e 01       	movw	r18, r28
     750:	22 0f       	add	r18, r18
     752:	33 1f       	adc	r19, r19
     754:	f9 01       	movw	r30, r18
     756:	e6 5e       	subi	r30, 0xE6	; 230
     758:	fc 4f       	sbci	r31, 0xFC	; 252
     75a:	40 81       	ld	r20, Z
     75c:	51 81       	ldd	r21, Z+1	; 0x01
     75e:	41 50       	subi	r20, 0x01	; 1
     760:	51 09       	sbc	r21, r1
     762:	51 83       	std	Z+1, r21	; 0x01
     764:	40 83       	st	Z, r20
     766:	45 2b       	or	r20, r21
     768:	71 f4       	brne	.+28     	; 0x786 <_ZN5Clock4tickEv+0xb8>
     76a:	d9 01       	movw	r26, r18
     76c:	a6 5d       	subi	r26, 0xD6	; 214
     76e:	bc 4f       	sbci	r27, 0xFC	; 252
     770:	2d 91       	ld	r18, X+
     772:	3c 91       	ld	r19, X
     774:	31 83       	std	Z+1, r19	; 0x01
     776:	20 83       	st	Z, r18
     778:	dc 01       	movw	r26, r24
     77a:	ed 91       	ld	r30, X+
     77c:	fc 91       	ld	r31, X
     77e:	01 90       	ld	r0, Z+
     780:	f0 81       	ld	r31, Z
     782:	e0 2d       	mov	r30, r0
     784:	09 95       	icall
     786:	21 96       	adiw	r28, 0x01	; 1
     788:	c8 30       	cpi	r28, 0x08	; 8
     78a:	d1 05       	cpc	r29, r1
     78c:	d1 f6       	brne	.-76     	; 0x742 <_ZN5Clock4tickEv+0x74>
     78e:	0a e3       	ldi	r16, 0x3A	; 58
     790:	13 e0       	ldi	r17, 0x03	; 3
     792:	c0 e0       	ldi	r28, 0x00	; 0
     794:	d0 e0       	ldi	r29, 0x00	; 0
     796:	f8 01       	movw	r30, r16
     798:	80 81       	ld	r24, Z
     79a:	91 81       	ldd	r25, Z+1	; 0x01
     79c:	00 97       	sbiw	r24, 0x00	; 0
     79e:	b9 f0       	breq	.+46     	; 0x7ce <_ZN5Clock4tickEv+0x100>
     7a0:	fe 01       	movw	r30, r28
     7a2:	ee 0f       	add	r30, r30
     7a4:	ff 1f       	adc	r31, r31
     7a6:	ea 5e       	subi	r30, 0xEA	; 234
     7a8:	fc 4f       	sbci	r31, 0xFC	; 252
     7aa:	20 81       	ld	r18, Z
     7ac:	31 81       	ldd	r19, Z+1	; 0x01
     7ae:	21 50       	subi	r18, 0x01	; 1
     7b0:	31 09       	sbc	r19, r1
     7b2:	31 83       	std	Z+1, r19	; 0x01
     7b4:	20 83       	st	Z, r18
     7b6:	23 2b       	or	r18, r19
     7b8:	51 f4       	brne	.+20     	; 0x7ce <_ZN5Clock4tickEv+0x100>
     7ba:	dc 01       	movw	r26, r24
     7bc:	ed 91       	ld	r30, X+
     7be:	fc 91       	ld	r31, X
     7c0:	01 90       	ld	r0, Z+
     7c2:	f0 81       	ld	r31, Z
     7c4:	e0 2d       	mov	r30, r0
     7c6:	09 95       	icall
     7c8:	f8 01       	movw	r30, r16
     7ca:	11 82       	std	Z+1, r1	; 0x01
     7cc:	10 82       	st	Z, r1
     7ce:	21 96       	adiw	r28, 0x01	; 1
     7d0:	0e 5f       	subi	r16, 0xFE	; 254
     7d2:	1f 4f       	sbci	r17, 0xFF	; 255
     7d4:	c2 30       	cpi	r28, 0x02	; 2
     7d6:	d1 05       	cpc	r29, r1
     7d8:	f1 f6       	brne	.-68     	; 0x796 <_ZN5Clock4tickEv+0xc8>
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	08 95       	ret

000007e4 <__vector_7>:
     7e4:	1f 92       	push	r1
     7e6:	0f 92       	push	r0
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	0f 92       	push	r0
     7ec:	11 24       	eor	r1, r1
     7ee:	2f 93       	push	r18
     7f0:	3f 93       	push	r19
     7f2:	4f 93       	push	r20
     7f4:	5f 93       	push	r21
     7f6:	6f 93       	push	r22
     7f8:	7f 93       	push	r23
     7fa:	8f 93       	push	r24
     7fc:	9f 93       	push	r25
     7fe:	af 93       	push	r26
     800:	bf 93       	push	r27
     802:	ef 93       	push	r30
     804:	ff 93       	push	r31
     806:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN5Clock4tickEv>
     80a:	ff 91       	pop	r31
     80c:	ef 91       	pop	r30
     80e:	bf 91       	pop	r27
     810:	af 91       	pop	r26
     812:	9f 91       	pop	r25
     814:	8f 91       	pop	r24
     816:	7f 91       	pop	r23
     818:	6f 91       	pop	r22
     81a:	5f 91       	pop	r21
     81c:	4f 91       	pop	r20
     81e:	3f 91       	pop	r19
     820:	2f 91       	pop	r18
     822:	0f 90       	pop	r0
     824:	0f be       	out	0x3f, r0	; 63
     826:	0f 90       	pop	r0
     828:	1f 90       	pop	r1
     82a:	18 95       	reti

0000082c <_ZN5Clock5delayEm>:
     82c:	60 93 4f 03 	sts	0x034F, r22	; 0x80034f <_ZN5Clock9delayTimeE>
     830:	70 93 50 03 	sts	0x0350, r23	; 0x800350 <_ZN5Clock9delayTimeE+0x1>
     834:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <_ZN5Clock9delayTimeE+0x2>
     838:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <_ZN5Clock9delayTimeE+0x3>
     83c:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <_ZN5Clock9delayTimeE>
     840:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <_ZN5Clock9delayTimeE+0x1>
     844:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <_ZN5Clock9delayTimeE+0x2>
     848:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <_ZN5Clock9delayTimeE+0x3>
     84c:	89 2b       	or	r24, r25
     84e:	8a 2b       	or	r24, r26
     850:	8b 2b       	or	r24, r27
     852:	a1 f7       	brne	.-24     	; 0x83c <_ZN5Clock5delayEm+0x10>
     854:	08 95       	ret

00000856 <_ZN5Clock16registerPeriodicEP8Callbackj>:
     856:	ee e3       	ldi	r30, 0x3E	; 62
     858:	f3 e0       	ldi	r31, 0x03	; 3
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	a1 91       	ld	r26, Z+
     860:	b1 91       	ld	r27, Z+
     862:	a9 01       	movw	r20, r18
     864:	4f 5f       	subi	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	ab 2b       	or	r26, r27
     86a:	99 f4       	brne	.+38     	; 0x892 <_ZN5Clock16registerPeriodicEP8Callbackj+0x3c>
     86c:	22 0f       	add	r18, r18
     86e:	33 1f       	adc	r19, r19
     870:	f9 01       	movw	r30, r18
     872:	e2 5c       	subi	r30, 0xC2	; 194
     874:	fc 4f       	sbci	r31, 0xFC	; 252
     876:	91 83       	std	Z+1, r25	; 0x01
     878:	80 83       	st	Z, r24
     87a:	f9 01       	movw	r30, r18
     87c:	e6 5d       	subi	r30, 0xD6	; 214
     87e:	fc 4f       	sbci	r31, 0xFC	; 252
     880:	71 83       	std	Z+1, r23	; 0x01
     882:	60 83       	st	Z, r22
     884:	f9 01       	movw	r30, r18
     886:	e6 5e       	subi	r30, 0xE6	; 230
     888:	fc 4f       	sbci	r31, 0xFC	; 252
     88a:	71 83       	std	Z+1, r23	; 0x01
     88c:	60 83       	st	Z, r22
     88e:	ca 01       	movw	r24, r20
     890:	08 95       	ret
     892:	9a 01       	movw	r18, r20
     894:	48 30       	cpi	r20, 0x08	; 8
     896:	51 05       	cpc	r21, r1
     898:	11 f7       	brne	.-60     	; 0x85e <_ZN5Clock16registerPeriodicEP8Callbackj+0x8>
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	08 95       	ret

000008a0 <_ZN5Clock15registerOneshotEP8Callbackj>:
     8a0:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <_ZN5Clock11singleTasksE>
     8a4:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <_ZN5Clock11singleTasksE+0x1>
     8a8:	23 2b       	or	r18, r19
     8aa:	49 f0       	breq	.+18     	; 0x8be <_ZN5Clock15registerOneshotEP8Callbackj+0x1e>
     8ac:	20 91 3c 03 	lds	r18, 0x033C	; 0x80033c <_ZN5Clock11singleTasksE+0x2>
     8b0:	30 91 3d 03 	lds	r19, 0x033D	; 0x80033d <_ZN5Clock11singleTasksE+0x3>
     8b4:	23 2b       	or	r18, r19
     8b6:	a9 f4       	brne	.+42     	; 0x8e2 <_ZN5Clock15registerOneshotEP8Callbackj+0x42>
     8b8:	21 e0       	ldi	r18, 0x01	; 1
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <_ZN5Clock15registerOneshotEP8Callbackj+0x22>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	a9 01       	movw	r20, r18
     8c4:	44 0f       	add	r20, r20
     8c6:	55 1f       	adc	r21, r21
     8c8:	fa 01       	movw	r30, r20
     8ca:	e6 5c       	subi	r30, 0xC6	; 198
     8cc:	fc 4f       	sbci	r31, 0xFC	; 252
     8ce:	91 83       	std	Z+1, r25	; 0x01
     8d0:	80 83       	st	Z, r24
     8d2:	fa 01       	movw	r30, r20
     8d4:	ea 5e       	subi	r30, 0xEA	; 234
     8d6:	fc 4f       	sbci	r31, 0xFC	; 252
     8d8:	71 83       	std	Z+1, r23	; 0x01
     8da:	60 83       	st	Z, r22
     8dc:	c9 01       	movw	r24, r18
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	08 95       	ret
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	08 95       	ret

000008e8 <_ZN5Clock13cancelOneshotEi>:
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	51 f0       	breq	.+20     	; 0x900 <__stack+0x1>
     8ec:	83 30       	cpi	r24, 0x03	; 3
     8ee:	91 05       	cpc	r25, r1
     8f0:	3c f4       	brge	.+14     	; 0x900 <__stack+0x1>
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	fc 01       	movw	r30, r24
     8f8:	e8 5c       	subi	r30, 0xC8	; 200
     8fa:	fc 4f       	sbci	r31, 0xFC	; 252
     8fc:	11 82       	std	Z+1, r1	; 0x01
     8fe:	10 82       	st	Z, r1
     900:	08 95       	ret

00000902 <_ZN5ClockC1Ev>:
     902:	f8 94       	cli
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     90a:	97 e0       	ldi	r25, 0x07	; 7
     90c:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     910:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
     914:	9d e9       	ldi	r25, 0x9D	; 157
     916:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     91a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     91e:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <_ZN5Clock8sysclockE>
     922:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <_ZN5Clock8sysclockE+0x1>
     926:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <_ZN5Clock8sysclockE+0x2>
     92a:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <_ZN5Clock8sysclockE+0x3>
     92e:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <_ZN5Clock5countE>
     932:	ee e3       	ldi	r30, 0x3E	; 62
     934:	f3 e0       	ldi	r31, 0x03	; 3
     936:	11 92       	st	Z+, r1
     938:	11 92       	st	Z+, r1
     93a:	83 e0       	ldi	r24, 0x03	; 3
     93c:	ee 34       	cpi	r30, 0x4E	; 78
     93e:	f8 07       	cpc	r31, r24
     940:	d1 f7       	brne	.-12     	; 0x936 <_ZN5ClockC1Ev+0x34>
     942:	ea e3       	ldi	r30, 0x3A	; 58
     944:	f3 e0       	ldi	r31, 0x03	; 3
     946:	8a e4       	ldi	r24, 0x4A	; 74
     948:	93 e0       	ldi	r25, 0x03	; 3
     94a:	11 92       	st	Z+, r1
     94c:	11 92       	st	Z+, r1
     94e:	8e 17       	cp	r24, r30
     950:	9f 07       	cpc	r25, r31
     952:	d9 f7       	brne	.-10     	; 0x94a <_ZN5ClockC1Ev+0x48>
     954:	78 94       	sei
     956:	08 95       	ret

00000958 <_Z7usecDlyi>:
}


void usecDly(int x) {
     958:	08 95       	ret

0000095a <DdsInit>:

//
// DDS uses bits PB0 - PB2, PB5
//

void DdsInit(void) {
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	1f 92       	push	r1
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62

volatile uint8_t reg;

	reg = DDRB;
     964:	84 b1       	in	r24, 0x04	; 4
     966:	89 83       	std	Y+1, r24	; 0x01
	reg |= DDS_OUT_BITS;		// set Led pin to output
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	87 62       	ori	r24, 0x27	; 39
     96c:	89 83       	std	Y+1, r24	; 0x01
	DDRB = reg;
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	84 b9       	out	0x04, r24	; 4

	reg = PORTB;
     972:	85 b1       	in	r24, 0x05	; 5
     974:	89 83       	std	Y+1, r24	; 0x01
	reg &= ~DDS_OUT_BITS;		
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	88 7d       	andi	r24, 0xD8	; 216
     97a:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	85 b9       	out	0x05, r24	; 5
	Clock::delay(50);
	reg &= ~DDS_RST;
	PORTB = reg;
#endif

	reg |= W_CLK;
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	81 60       	ori	r24, 0x01	; 1
     984:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	85 b9       	out	0x05, r24	; 5

	reg &= ~ W_CLK;
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	8e 7f       	andi	r24, 0xFE	; 254
     98e:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	85 b9       	out	0x05, r24	; 5

	reg |= FQUD_CLK;     // make sure we are in serial mode
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	82 60       	ori	r24, 0x02	; 2
     998:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	85 b9       	out	0x05, r24	; 5
	
	reg &= ~FQUD_CLK;    
     99e:	89 81       	ldd	r24, Y+1	; 0x01
     9a0:	8d 7f       	andi	r24, 0xFD	; 253
     9a2:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	85 b9       	out	0x05, r24	; 5
	
}
     9a8:	0f 90       	pop	r0
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	08 95       	ret

000009b0 <dds>:
// increment of 0x0E56043B.
// 



void dds(float fout) {
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	1f 92       	push	r1
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
float n;
uint32_t phaseInc;
int i;
volatile uint8_t temp;

	cli();
     9ba:	f8 94       	cli
//
// the ports need to be protected with a semaphore if we
// are going to make this code multi-tasking
//
	temp = PORTB;
     9bc:	25 b1       	in	r18, 0x05	; 5
     9be:	29 83       	std	Y+1, r18	; 0x01
	temp &= ~DDS_OUT_BITS;
     9c0:	29 81       	ldd	r18, Y+1	; 0x01
     9c2:	28 7d       	andi	r18, 0xD8	; 216
     9c4:	29 83       	std	Y+1, r18	; 0x01
	PORTB = temp;
     9c6:	29 81       	ldd	r18, Y+1	; 0x01
     9c8:	25 b9       	out	0x05, r18	; 5

	n = fout * (float)CNTS_PER_HZ;		// phase change per clock
	phaseInc = (uint32_t)n;
     9ca:	2f e5       	ldi	r18, 0x5F	; 95
     9cc:	30 e7       	ldi	r19, 0x70	; 112
     9ce:	49 e0       	ldi	r20, 0x09	; 9
     9d0:	52 e4       	ldi	r21, 0x42	; 66
     9d2:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     9d6:	0e 94 2a 14 	call	0x2854	; 0x2854 <__fixunssfsi>
     9da:	40 e2       	ldi	r20, 0x20	; 32
     9dc:	50 e0       	ldi	r21, 0x00	; 0

	for (i=0;i<32;i++) {

		if (phaseInc & 0x01) {
			temp |= SD;
     9de:	29 81       	ldd	r18, Y+1	; 0x01
	n = fout * (float)CNTS_PER_HZ;		// phase change per clock
	phaseInc = (uint32_t)n;

	for (i=0;i<32;i++) {

		if (phaseInc & 0x01) {
     9e0:	60 ff       	sbrs	r22, 0
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <dds+0x38>
			temp |= SD;
     9e4:	24 60       	ori	r18, 0x04	; 4
     9e6:	01 c0       	rjmp	.+2      	; 0x9ea <dds+0x3a>
    } else {
			temp &= ~SD;
     9e8:	2b 7f       	andi	r18, 0xFB	; 251
     9ea:	29 83       	std	Y+1, r18	; 0x01
		}            
		PORTB = temp;								// data bit
     9ec:	29 81       	ldd	r18, Y+1	; 0x01
     9ee:	25 b9       	out	0x05, r18	; 5

		temp |= W_CLK;					// set clk
     9f0:	29 81       	ldd	r18, Y+1	; 0x01
     9f2:	21 60       	ori	r18, 0x01	; 1
     9f4:	29 83       	std	Y+1, r18	; 0x01
		PORTB = temp;
     9f6:	29 81       	ldd	r18, Y+1	; 0x01
     9f8:	25 b9       	out	0x05, r18	; 5
		temp &= ~W_CLK;					// clear clk
     9fa:	29 81       	ldd	r18, Y+1	; 0x01
     9fc:	2e 7f       	andi	r18, 0xFE	; 254
     9fe:	29 83       	std	Y+1, r18	; 0x01
		PORTB = temp;	
     a00:	29 81       	ldd	r18, Y+1	; 0x01
     a02:	25 b9       	out	0x05, r18	; 5

		phaseInc = phaseInc >> 1;		// shift next data bit to msb
     a04:	96 95       	lsr	r25
     a06:	87 95       	ror	r24
     a08:	77 95       	ror	r23
     a0a:	67 95       	ror	r22
     a0c:	41 50       	subi	r20, 0x01	; 1
     a0e:	51 09       	sbc	r21, r1
	PORTB = temp;

	n = fout * (float)CNTS_PER_HZ;		// phase change per clock
	phaseInc = (uint32_t)n;

	for (i=0;i<32;i++) {
     a10:	31 f7       	brne	.-52     	; 0x9de <dds+0x2e>
		PORTB = temp;	

		phaseInc = phaseInc >> 1;		// shift next data bit to msb
	}

	temp &= ~SD;
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	8b 7f       	andi	r24, 0xFB	; 251
     a16:	89 83       	std	Y+1, r24	; 0x01
	PORTB = temp;								// data bit
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	85 b9       	out	0x05, r24	; 5
     a1c:	88 e0       	ldi	r24, 0x08	; 8
     a1e:	90 e0       	ldi	r25, 0x00	; 0
	for (i=0;i<8;i++) {
		temp |= W_CLK;					// set clk
     a20:	29 81       	ldd	r18, Y+1	; 0x01
     a22:	21 60       	ori	r18, 0x01	; 1
     a24:	29 83       	std	Y+1, r18	; 0x01
		PORTB = temp;
     a26:	29 81       	ldd	r18, Y+1	; 0x01
     a28:	25 b9       	out	0x05, r18	; 5
		temp &= ~W_CLK;					// clear clk
     a2a:	29 81       	ldd	r18, Y+1	; 0x01
     a2c:	2e 7f       	andi	r18, 0xFE	; 254
     a2e:	29 83       	std	Y+1, r18	; 0x01
		PORTB = temp;
     a30:	29 81       	ldd	r18, Y+1	; 0x01
     a32:	25 b9       	out	0x05, r18	; 5
     a34:	01 97       	sbiw	r24, 0x01	; 1
		phaseInc = phaseInc >> 1;		// shift next data bit to msb
	}

	temp &= ~SD;
	PORTB = temp;								// data bit
	for (i=0;i<8;i++) {
     a36:	a1 f7       	brne	.-24     	; 0xa20 <dds+0x70>
		temp &= ~W_CLK;					// clear clk
		PORTB = temp;

	}

	temp |= FQUD_CLK;            // Load the phase accumulator
     a38:	89 81       	ldd	r24, Y+1	; 0x01
     a3a:	82 60       	ori	r24, 0x02	; 2
     a3c:	89 83       	std	Y+1, r24	; 0x01
	PORTB = temp;
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	85 b9       	out	0x05, r24	; 5

	temp &= ~FQUD_CLK;            // transfer shift reg to phase accumulator
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	8d 7f       	andi	r24, 0xFD	; 253
     a46:	89 83       	std	Y+1, r24	; 0x01
	PORTB = temp;
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	85 b9       	out	0x05, r24	; 5

	sei();
     a4c:	78 94       	sei
}
     a4e:	0f 90       	pop	r0
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	08 95       	ret

00000a56 <_ZN7EncoderC1Ehhh>:
#include "clock.h"
#include "sw.h"
#include "Encoder.h"


Encoder::Encoder(uint8_t a, uint8_t b, uint8_t port) {
     a56:	bf 92       	push	r11
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	ec 01       	movw	r28, r24
     a6a:	b6 2e       	mov	r11, r22
     a6c:	c4 2e       	mov	r12, r20
     a6e:	d2 2e       	mov	r13, r18
     a70:	81 e4       	ldi	r24, 0x41	; 65
     a72:	92 e0       	ldi	r25, 0x02	; 2
     a74:	99 83       	std	Y+1, r25	; 0x01
     a76:	88 83       	st	Y, r24

	eventRate = 4;				// default 4 pulses per cycle
     a78:	04 e0       	ldi	r16, 0x04	; 4
     a7a:	10 e0       	ldi	r17, 0x00	; 0
     a7c:	1e 87       	std	Y+14, r17	; 0x0e
     a7e:	0d 87       	std	Y+13, r16	; 0x0d
	encA = new Sw(a, port);
     a80:	8b e0       	ldi	r24, 0x0B	; 11
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_Znwj>
     a88:	7c 01       	movw	r14, r24
     a8a:	4d 2d       	mov	r20, r13
     a8c:	6b 2d       	mov	r22, r11
     a8e:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN2SwC1Ehh>
     a92:	fb 82       	std	Y+3, r15	; 0x03
     a94:	ea 82       	std	Y+2, r14	; 0x02
	encB = new Sw(b, port);
     a96:	8b e0       	ldi	r24, 0x0B	; 11
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_Znwj>
     a9e:	7c 01       	movw	r14, r24
     aa0:	4d 2d       	mov	r20, r13
     aa2:	6c 2d       	mov	r22, r12
     aa4:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN2SwC1Ehh>
     aa8:	fd 82       	std	Y+5, r15	; 0x05
     aaa:	ec 82       	std	Y+4, r14	; 0x04
		
	if (encA->isClosed()) {
     aac:	8a 81       	ldd	r24, Y+2	; 0x02
     aae:	9b 81       	ldd	r25, Y+3	; 0x03
     ab0:	0e 94 9e 11 	call	0x233c	; 0x233c <_ZN2Sw8isClosedEv>
     ab4:	2c 81       	ldd	r18, Y+4	; 0x04
     ab6:	3d 81       	ldd	r19, Y+5	; 0x05
     ab8:	88 23       	and	r24, r24
     aba:	69 f0       	breq	.+26     	; 0xad6 <_ZN7EncoderC1Ehhh+0x80>
		if (encB->isClosed()) {
     abc:	c9 01       	movw	r24, r18
     abe:	0e 94 9e 11 	call	0x233c	; 0x233c <_ZN2Sw8isClosedEv>
     ac2:	88 23       	and	r24, r24
     ac4:	19 f0       	breq	.+6      	; 0xacc <_ZN7EncoderC1Ehhh+0x76>
			curState = 2;
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <_ZN7EncoderC1Ehhh+0x7a>
			} else {
			curState = 1;
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	9f 83       	std	Y+7, r25	; 0x07
     ad2:	8e 83       	std	Y+6, r24	; 0x06
     ad4:	0a c0       	rjmp	.+20     	; 0xaea <_ZN7EncoderC1Ehhh+0x94>
		}
		} else {
		if (encB->isClosed()) {
     ad6:	c9 01       	movw	r24, r18
     ad8:	0e 94 9e 11 	call	0x233c	; 0x233c <_ZN2Sw8isClosedEv>
     adc:	88 23       	and	r24, r24
     ade:	19 f0       	breq	.+6      	; 0xae6 <_ZN7EncoderC1Ehhh+0x90>
			curState = 4;
     ae0:	1f 83       	std	Y+7, r17	; 0x07
     ae2:	0e 83       	std	Y+6, r16	; 0x06
     ae4:	02 c0       	rjmp	.+4      	; 0xaea <_ZN7EncoderC1Ehhh+0x94>
			} else {
			curState = 0;
     ae6:	1f 82       	std	Y+7, r1	; 0x07
     ae8:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	lastEvent = ENC_NO_EVENT;
     aea:	18 86       	std	Y+8, r1	; 0x08
	Clock::registerPeriodic(this,TEN_MSEC);
     aec:	61 e0       	ldi	r22, 0x01	; 1
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	ce 01       	movw	r24, r28
     af2:	0e 94 2b 04 	call	0x856	; 0x856 <_ZN5Clock16registerPeriodicEP8Callbackj>
	missedCwCount = 0;
     af6:	1a 86       	std	Y+10, r1	; 0x0a
     af8:	19 86       	std	Y+9, r1	; 0x09
	missedCcwCount = 0;
     afa:	1c 86       	std	Y+12, r1	; 0x0c
     afc:	1b 86       	std	Y+11, r1	; 0x0b
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	df 90       	pop	r13
     b0c:	cf 90       	pop	r12
     b0e:	bf 90       	pop	r11
     b10:	08 95       	ret

00000b12 <_ZN7Encoder6updateEv>:
// ccw event. 
//
// This algorithm produces 4 events per encoder a/b cycle.  For
// a 2 event case, use only encoder a events/
//
void Encoder::update(void) {
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	ec 01       	movw	r28, r24

	encEvent nxtEvent = ENC_NO_EVENT;

	if ( !encA->hasEvent() && !encB->hasEvent() ){
     b1a:	8a 81       	ldd	r24, Y+2	; 0x02
     b1c:	9b 81       	ldd	r25, Y+3	; 0x03
     b1e:	0e 94 90 11 	call	0x2320	; 0x2320 <_ZN2Sw8hasEventEv>
     b22:	81 11       	cpse	r24, r1
     b24:	07 c0       	rjmp	.+14     	; 0xb34 <_ZN7Encoder6updateEv+0x22>
     b26:	8c 81       	ldd	r24, Y+4	; 0x04
     b28:	9d 81       	ldd	r25, Y+5	; 0x05
     b2a:	0e 94 90 11 	call	0x2320	; 0x2320 <_ZN2Sw8hasEventEv>
     b2e:	88 23       	and	r24, r24
     b30:	09 f4       	brne	.+2      	; 0xb34 <_ZN7Encoder6updateEv+0x22>
     b32:	5f c0       	rjmp	.+190    	; 0xbf2 <_ZN7Encoder6updateEv+0xe0>
		return;
	}

	if (encA->getEvent() == EV_CLOSE) {
     b34:	8a 81       	ldd	r24, Y+2	; 0x02
     b36:	9b 81       	ldd	r25, Y+3	; 0x03
     b38:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN2Sw8getEventEv>
     b3c:	2c 81       	ldd	r18, Y+4	; 0x04
     b3e:	3d 81       	ldd	r19, Y+5	; 0x05
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	39 f4       	brne	.+14     	; 0xb52 <_ZN7Encoder6updateEv+0x40>
		if (encB->isClosed()) {
     b44:	c9 01       	movw	r24, r18
     b46:	0e 94 9e 11 	call	0x233c	; 0x233c <_ZN2Sw8isClosedEv>
     b4a:	81 11       	cpse	r24, r1
     b4c:	1d c0       	rjmp	.+58     	; 0xb88 <_ZN7Encoder6updateEv+0x76>
			nxtEvent = ENC_CCW_EVENT;
		} else {
			nxtEvent = ENC_CW_EVENT;
     b4e:	11 e0       	ldi	r17, 0x01	; 1
     b50:	27 c0       	rjmp	.+78     	; 0xba0 <_ZN7Encoder6updateEv+0x8e>
		}
		 
	} else if ( (encB->getEvent() == EV_CLOSE) && (eventRate == 4))  {
     b52:	c9 01       	movw	r24, r18
     b54:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN2Sw8getEventEv>
     b58:	2a 81       	ldd	r18, Y+2	; 0x02
     b5a:	3b 81       	ldd	r19, Y+3	; 0x03
     b5c:	82 30       	cpi	r24, 0x02	; 2
     b5e:	21 f4       	brne	.+8      	; 0xb68 <_ZN7Encoder6updateEv+0x56>
     b60:	8d 85       	ldd	r24, Y+13	; 0x0d
     b62:	9e 85       	ldd	r25, Y+14	; 0x0e
     b64:	04 97       	sbiw	r24, 0x04	; 4
     b66:	59 f0       	breq	.+22     	; 0xb7e <_ZN7Encoder6updateEv+0x6c>
			nxtEvent = ENC_CW_EVENT;
		} else {
			nxtEvent = ENC_CCW_EVENT;
		}

	} else if ( (encA->getEvent() == EV_OPEN) && (eventRate != 1)) {
     b68:	c9 01       	movw	r24, r18
     b6a:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN2Sw8getEventEv>
     b6e:	2c 81       	ldd	r18, Y+4	; 0x04
     b70:	3d 81       	ldd	r19, Y+5	; 0x05
     b72:	81 30       	cpi	r24, 0x01	; 1
     b74:	59 f4       	brne	.+22     	; 0xb8c <_ZN7Encoder6updateEv+0x7a>
     b76:	8d 85       	ldd	r24, Y+13	; 0x0d
     b78:	9e 85       	ldd	r25, Y+14	; 0x0e
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	39 f0       	breq	.+14     	; 0xb8c <_ZN7Encoder6updateEv+0x7a>
		if (encB->isClosed()) {
     b7e:	c9 01       	movw	r24, r18
     b80:	0e 94 9e 11 	call	0x233c	; 0x233c <_ZN2Sw8isClosedEv>
     b84:	81 11       	cpse	r24, r1
     b86:	e3 cf       	rjmp	.-58     	; 0xb4e <_ZN7Encoder6updateEv+0x3c>
		 
	} else if ( (encB->getEvent() == EV_CLOSE) && (eventRate == 4))  {
		if (encA->isClosed()) {
			nxtEvent = ENC_CW_EVENT;
		} else {
			nxtEvent = ENC_CCW_EVENT;
     b88:	12 e0       	ldi	r17, 0x02	; 2
     b8a:	0a c0       	rjmp	.+20     	; 0xba0 <_ZN7Encoder6updateEv+0x8e>
			nxtEvent = ENC_CW_EVENT;
		} else {
			nxtEvent = ENC_CCW_EVENT;
		}

	} else if ( (encB->getEvent() == EV_OPEN) && (eventRate == 4) ) {
     b8c:	c9 01       	movw	r24, r18
     b8e:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN2Sw8getEventEv>
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	21 f4       	brne	.+8      	; 0xb9e <_ZN7Encoder6updateEv+0x8c>
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	04 97       	sbiw	r24, 0x04	; 4
     b9c:	39 f1       	breq	.+78     	; 0xbec <_ZN7Encoder6updateEv+0xda>
// This algorithm produces 4 events per encoder a/b cycle.  For
// a 2 event case, use only encoder a events/
//
void Encoder::update(void) {

	encEvent nxtEvent = ENC_NO_EVENT;
     b9e:	10 e0       	ldi	r17, 0x00	; 0
			nxtEvent = ENC_CW_EVENT;
		}

	}

	encA->clearEvent();
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	9b 81       	ldd	r25, Y+3	; 0x03
     ba4:	0e 94 9b 11 	call	0x2336	; 0x2336 <_ZN2Sw10clearEventEv>
	encB->clearEvent();
     ba8:	8c 81       	ldd	r24, Y+4	; 0x04
     baa:	9d 81       	ldd	r25, Y+5	; 0x05
     bac:	0e 94 9b 11 	call	0x2336	; 0x2336 <_ZN2Sw10clearEventEv>

	//
	// process new event if any
	//
	if (nxtEvent == ENC_NO_EVENT) {
     bb0:	11 23       	and	r17, r17
     bb2:	f9 f0       	breq	.+62     	; 0xbf2 <_ZN7Encoder6updateEv+0xe0>
     bb4:	88 85       	ldd	r24, Y+8	; 0x08
		return;
	} else if (nxtEvent == ENC_CW_EVENT) {		// handle overrun
     bb6:	11 30       	cpi	r17, 0x01	; 1
     bb8:	61 f4       	brne	.+24     	; 0xbd2 <_ZN7Encoder6updateEv+0xc0>
		if (nxtEvent == lastEvent) {
     bba:	81 30       	cpi	r24, 0x01	; 1
     bbc:	31 f4       	brne	.+12     	; 0xbca <_ZN7Encoder6updateEv+0xb8>
			missedCwCount++;
     bbe:	89 85       	ldd	r24, Y+9	; 0x09
     bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	9a 87       	std	Y+10, r25	; 0x0a
     bc6:	89 87       	std	Y+9, r24	; 0x09
     bc8:	14 c0       	rjmp	.+40     	; 0xbf2 <_ZN7Encoder6updateEv+0xe0>
		} else {
			missedCwCount = 0;
     bca:	1a 86       	std	Y+10, r1	; 0x0a
     bcc:	19 86       	std	Y+9, r1	; 0x09
			lastEvent = nxtEvent;
     bce:	18 87       	std	Y+8, r17	; 0x08
     bd0:	10 c0       	rjmp	.+32     	; 0xbf2 <_ZN7Encoder6updateEv+0xe0>
		}
	} else {
		if (nxtEvent == lastEvent) {
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	31 f4       	brne	.+12     	; 0xbe2 <_ZN7Encoder6updateEv+0xd0>
			missedCcwCount++;
     bd6:	8b 85       	ldd	r24, Y+11	; 0x0b
     bd8:	9c 85       	ldd	r25, Y+12	; 0x0c
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	9c 87       	std	Y+12, r25	; 0x0c
     bde:	8b 87       	std	Y+11, r24	; 0x0b
     be0:	08 c0       	rjmp	.+16     	; 0xbf2 <_ZN7Encoder6updateEv+0xe0>
		} else {
			missedCcwCount = 0;
     be2:	1c 86       	std	Y+12, r1	; 0x0c
     be4:	1b 86       	std	Y+11, r1	; 0x0b
			lastEvent = nxtEvent;
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	88 87       	std	Y+8, r24	; 0x08
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <_ZN7Encoder6updateEv+0xe0>
		} else {
			nxtEvent = ENC_CCW_EVENT;
		}

	} else if ( (encB->getEvent() == EV_OPEN) && (eventRate == 4) ) {
		if (encA->isClosed()) {
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	9b 81       	ldd	r25, Y+3	; 0x03
     bf0:	aa cf       	rjmp	.-172    	; 0xb46 <_ZN7Encoder6updateEv+0x34>
		} else {
			missedCcwCount = 0;
			lastEvent = nxtEvent;
		}
	}
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	08 95       	ret

00000bfa <_ZN7Encoder8callbackEv>:
	lastEvent = ENC_NO_EVENT;
}


void Encoder::callback(void) {
	update();
     bfa:	0c 94 89 05 	jmp	0xb12	; 0xb12 <_ZN7Encoder6updateEv>

00000bfe <_ZN7Encoder8hasEventEv>:
}



bool Encoder::hasEvent(void) {
	return (lastEvent != ENC_NO_EVENT);
     bfe:	21 e0       	ldi	r18, 0x01	; 1
     c00:	fc 01       	movw	r30, r24
     c02:	80 85       	ldd	r24, Z+8	; 0x08
     c04:	81 11       	cpse	r24, r1
     c06:	01 c0       	rjmp	.+2      	; 0xc0a <_ZN7Encoder8hasEventEv+0xc>
     c08:	20 e0       	ldi	r18, 0x00	; 0
}
     c0a:	82 2f       	mov	r24, r18
     c0c:	08 95       	ret

00000c0e <_ZN7Encoder8getEventEv>:


encEvent Encoder::getEvent(void) {
	return lastEvent;
}
     c0e:	fc 01       	movw	r30, r24
     c10:	80 85       	ldd	r24, Z+8	; 0x08
     c12:	08 95       	ret

00000c14 <_ZN7Encoder10clearEventEv>:


void Encoder::clearEvent(void) {
	lastEvent = ENC_NO_EVENT;
     c14:	fc 01       	movw	r30, r24
     c16:	10 86       	std	Z+8, r1	; 0x08
     c18:	08 95       	ret

00000c1a <_ZN7Encoder16getMissedCwCountEv>:
void Encoder::callback(void) {
	update();
}


int Encoder::getMissedCwCount(void) {
     c1a:	fc 01       	movw	r30, r24
	int result = missedCwCount;
     c1c:	81 85       	ldd	r24, Z+9	; 0x09
     c1e:	92 85       	ldd	r25, Z+10	; 0x0a
	missedCwCount = 0;
     c20:	12 86       	std	Z+10, r1	; 0x0a
     c22:	11 86       	std	Z+9, r1	; 0x09
	return result;
}
     c24:	08 95       	ret

00000c26 <_ZN7Encoder17getMissedCcwCountEv>:


int Encoder::getMissedCcwCount(void) {
     c26:	fc 01       	movw	r30, r24
	int result = missedCcwCount;
     c28:	83 85       	ldd	r24, Z+11	; 0x0b
     c2a:	94 85       	ldd	r25, Z+12	; 0x0c
	missedCcwCount = 0;
     c2c:	14 86       	std	Z+12, r1	; 0x0c
     c2e:	13 86       	std	Z+11, r1	; 0x0b
	return result;
}
     c30:	08 95       	ret

00000c32 <_ZN7Encoder12setEventRateEh>:

void Encoder::setEventRate(uint8_t r) {
	eventRate = r;
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	fc 01       	movw	r30, r24
     c36:	76 87       	std	Z+14, r23	; 0x0e
     c38:	65 87       	std	Z+13, r22	; 0x0d
     c3a:	08 95       	ret

00000c3c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>:
 Draw character c at pixel position (y, x) with foreground color fc,
 *  background color bc, 
 *  node = 1 interpret y,x as a text line, col; 
 *       = 0 interpret y,x as a pixel line, col
 */
void Graphics::draw2xChar(char cc, uint8_t line, uint8_t col, pixColor fc, pixColor bc) {
     c3c:	8f 92       	push	r8
     c3e:	9f 92       	push	r9
     c40:	af 92       	push	r10
     c42:	bf 92       	push	r11
     c44:	cf 92       	push	r12
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	ec 97       	sbiw	r28, 0x3c	; 60
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
     c62:	96 2e       	mov	r9, r22
     c64:	14 2f       	mov	r17, r20

  ys = line;
  xs = col;
  ye = ys + (2*CHAR_HEIGHT) - 1;
  xe = xs + (2*CHAR_WIDTH) -1; 
  cli();
     c66:	f8 94       	cli
  buf[0] = (xs >> 8) & 0xff;
     c68:	19 82       	std	Y+1, r1	; 0x01
  buf[1] = (xs & 0xff);
     c6a:	2a 83       	std	Y+2, r18	; 0x02
  buf[2] = (xe >> 8) & 0xff;
     c6c:	1b 82       	std	Y+3, r1	; 0x03
  buf[3] = (xe & 0xff);
     c6e:	21 5f       	subi	r18, 0xF1	; 241
     c70:	2c 83       	std	Y+4, r18	; 0x04
  sendCmd(CMD_COL_ADDR_SET);
     c72:	8a e2       	ldi	r24, 0x2A	; 42
     c74:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN3Lcd7sendCmdEh>
  sendData(buf, 4);
     c78:	64 e0       	ldi	r22, 0x04	; 4
     c7a:	ce 01       	movw	r24, r28
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN3Lcd8sendDataEPhh>
  cmpltCmd();
     c82:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN3Lcd8cmpltCmdEv>
  
  buf[0] = (ys >> 8) & 0xff;
     c86:	19 82       	std	Y+1, r1	; 0x01
  buf[1] = (ys & 0xff);
     c88:	1a 83       	std	Y+2, r17	; 0x02
  buf[2] = (ye >> 8) & 0xff;
     c8a:	1b 82       	std	Y+3, r1	; 0x03
  buf[3] = (ye & 0xff);
     c8c:	19 5e       	subi	r17, 0xE9	; 233
     c8e:	1c 83       	std	Y+4, r17	; 0x04
  sendCmd(CMD_ROW_ADDR_SET);
     c90:	8b e2       	ldi	r24, 0x2B	; 43
     c92:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN3Lcd7sendCmdEh>
  sendData(buf, 4);
     c96:	64 e0       	ldi	r22, 0x04	; 4
     c98:	ce 01       	movw	r24, r28
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN3Lcd8sendDataEPhh>
  cmpltCmd();
     ca0:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN3Lcd8cmpltCmdEv>

  _getPixels(cc, pixBuf); 
     ca4:	be 01       	movw	r22, r28
     ca6:	6f 5c       	subi	r22, 0xCF	; 207
     ca8:	7f 4f       	sbci	r23, 0xFF	; 255
     caa:	89 2d       	mov	r24, r9
     cac:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_getPixels>

  sendCmd(CMD_MEM_WRITE);
     cb0:	8c e2       	ldi	r24, 0x2C	; 44
     cb2:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN3Lcd7sendCmdEh>
  
  for (int i=0; i< CHAR_HEIGHT*2; i++) {
     cb6:	81 2c       	mov	r8, r1
     cb8:	91 2c       	mov	r9, r1
    bufIndx = 0;
    uint8_t pixels = pixBuf[i/2];
     cba:	f4 01       	movw	r30, r8
     cbc:	f5 95       	asr	r31
     cbe:	e7 95       	ror	r30
     cc0:	81 e3       	ldi	r24, 0x31	; 49
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	8c 0f       	add	r24, r28
     cc6:	9d 1f       	adc	r25, r29
     cc8:	e8 0f       	add	r30, r24
     cca:	f9 1f       	adc	r31, r25
     ccc:	90 81       	ld	r25, Z
     cce:	fe 01       	movw	r30, r28
     cd0:	31 96       	adiw	r30, 0x01	; 1
     cd2:	86 e0       	ldi	r24, 0x06	; 6
    for (int j=0; j< CHAR_WIDTH; j++) {
      if (pixels & 0x01) {                // font table assumes right to left scan 
     cd4:	90 ff       	sbrs	r25, 0
     cd6:	07 c0       	rjmp	.+14     	; 0xce6 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0xaa>
        buf[bufIndx++] = fc.r;
     cd8:	e0 82       	st	Z, r14
        buf[bufIndx++] = fc.g;
     cda:	f1 82       	std	Z+1, r15	; 0x01
        buf[bufIndx++] = fc.b;
     cdc:	02 83       	std	Z+2, r16	; 0x02
        buf[bufIndx++] = fc.r;
     cde:	e3 82       	std	Z+3, r14	; 0x03
        buf[bufIndx++] = fc.g;
     ce0:	f4 82       	std	Z+4, r15	; 0x04
        buf[bufIndx++] = fc.b;
     ce2:	05 83       	std	Z+5, r16	; 0x05
     ce4:	06 c0       	rjmp	.+12     	; 0xcf2 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0xb6>

      } else {
        buf[bufIndx++] = bc.r;
     ce6:	a0 82       	st	Z, r10
        buf[bufIndx++] = bc.g;
     ce8:	b1 82       	std	Z+1, r11	; 0x01
        buf[bufIndx++] = bc.b;
     cea:	c2 82       	std	Z+2, r12	; 0x02
        buf[bufIndx++] = bc.r;
     cec:	a3 82       	std	Z+3, r10	; 0x03
        buf[bufIndx++] = bc.g;
     cee:	b4 82       	std	Z+4, r11	; 0x04
        buf[bufIndx++] = bc.b;
     cf0:	c5 82       	std	Z+5, r12	; 0x05
      }
      pixels >>= 1;   
     cf2:	96 95       	lsr	r25
     cf4:	8a 5f       	subi	r24, 0xFA	; 250
     cf6:	36 96       	adiw	r30, 0x06	; 6
  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< CHAR_HEIGHT*2; i++) {
    bufIndx = 0;
    uint8_t pixels = pixBuf[i/2];
    for (int j=0; j< CHAR_WIDTH; j++) {
     cf8:	86 33       	cpi	r24, 0x36	; 54
     cfa:	61 f7       	brne	.-40     	; 0xcd4 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x98>
        buf[bufIndx++] = bc.g;
        buf[bufIndx++] = bc.b;
      }
      pixels >>= 1;   
    }
    sendData(buf,bufIndx);
     cfc:	60 e3       	ldi	r22, 0x30	; 48
     cfe:	ce 01       	movw	r24, r28
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN3Lcd8sendDataEPhh>

  _getPixels(cc, pixBuf); 

  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< CHAR_HEIGHT*2; i++) {
     d06:	9f ef       	ldi	r25, 0xFF	; 255
     d08:	89 1a       	sub	r8, r25
     d0a:	99 0a       	sbc	r9, r25
     d0c:	88 e1       	ldi	r24, 0x18	; 24
     d0e:	88 16       	cp	r8, r24
     d10:	91 04       	cpc	r9, r1
     d12:	99 f6       	brne	.-90     	; 0xcba <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x7e>
      }
      pixels >>= 1;   
    }
    sendData(buf,bufIndx);
  }
  cmpltCmd();
     d14:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN3Lcd8cmpltCmdEv>
  sei();
     d18:	78 94       	sei
}
     d1a:	ec 96       	adiw	r28, 0x3c	; 60
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	cf 90       	pop	r12
     d34:	bf 90       	pop	r11
     d36:	af 90       	pop	r10
     d38:	9f 90       	pop	r9
     d3a:	8f 90       	pop	r8
     d3c:	08 95       	ret

00000d3e <_ZN3LedC1Ev>:
#include "led.h"

//
// constructor
//
Led::Led(void) {
     d3e:	27 e4       	ldi	r18, 0x47	; 71
     d40:	32 e0       	ldi	r19, 0x02	; 2
     d42:	fc 01       	movw	r30, r24
     d44:	31 83       	std	Z+1, r19	; 0x01
     d46:	20 83       	st	Z, r18
  // set up led (PB5)
  DDRB |= LED_MSK;    // PB5 is output
     d48:	25 9a       	sbi	0x04, 5	; 4
  PORTB |= LED_MSK;    // turn on the output
     d4a:	2d 9a       	sbi	0x05, 5	; 5
	Clock::registerPeriodic(this, FIVE_HUNDRED_MSEC);
     d4c:	62 e3       	ldi	r22, 0x32	; 50
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	0c 94 2b 04 	jmp	0x856	; 0x856 <_ZN5Clock16registerPeriodicEP8Callbackj>

00000d54 <_ZN3Led6toggleEv>:
}


//
// toggle the led
void Led::toggle(void) {
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	1f 92       	push	r1
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
volatile uint8_t reg = PORTB;
     d5e:	85 b1       	in	r24, 0x05	; 5
     d60:	89 83       	std	Y+1, r24	; 0x01

  reg ^= LED_MSK;
     d62:	99 81       	ldd	r25, Y+1	; 0x01
     d64:	80 e2       	ldi	r24, 0x20	; 32
     d66:	89 27       	eor	r24, r25
     d68:	89 83       	std	Y+1, r24	; 0x01
  PORTB = reg;
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	85 b9       	out	0x05, r24	; 5
}
     d6e:	0f 90       	pop	r0
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <_ZN3Led8callbackEv>:
	Clock::registerPeriodic(this, FIVE_HUNDRED_MSEC);
}


void Led::callback(void) {
	toggle();
     d76:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <_ZN3Led6toggleEv>

00000d7a <_Z6mymainv>:
FILE lcd_str  = FDEV_SETUP_STREAM_CPP(lcd_putc, NULL, _FDEV_SETUP_WRITE);
FILE *lcdfp = &lcd_str;


// my main, called from loop
void mymain(void) {
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	ac 97       	sbiw	r28, 0x2c	; 44
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61

volatile uint8_t reg;
uint8_t secs = 0;
uint8_t mins = 0;
uint8_t hours = 0;
Clock *cl = new Clock();
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_Znwj>
     d96:	0e 94 81 04 	call	0x902	; 0x902 <_ZN5ClockC1Ev>

#ifndef LCD_TT
Led *led = new Led();
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_Znwj>
     da2:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_ZN3LedC1Ev>
#endif

Lcd *l = new Lcd();
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_Znwj>
     dae:	98 a3       	std	Y+32, r25	; 0x20
     db0:	8f 8f       	std	Y+31, r24	; 0x1f
     db2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN3LcdC1Ev>
Graphics *g = new Graphics();
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_Znwj>
     dbe:	99 8f       	std	Y+25, r25	; 0x19
     dc0:	88 8f       	std	Y+24, r24	; 0x18
#ifndef GRAPHICS_H_
#define GRAPHICS_H_

#include "lcd.h"

class Graphics : public Lcd {
     dc2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN3LcdC1Ev>

int pass = 0;
pixColor  f = GREEN;
pixColor pix_green = GREEN;
pixColor  b = LTGREEN;
pixColor  fg_grey = GRAY;
     dc6:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <vfoDataConst+0xa2>
     dca:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <vfoDataConst+0xa3>
     dce:	a0 91 36 02 	lds	r26, 0x0236	; 0x800236 <vfoDataConst+0xa4>
     dd2:	89 a7       	std	Y+41, r24	; 0x29
     dd4:	9a a7       	std	Y+42, r25	; 0x2a
     dd6:	ab a7       	std	Y+43, r26	; 0x2b
volatile float freq;
char buf[16];
mode_t curMode;

#ifndef LCD_TT
  uart_init();
     dd8:	0e 94 a6 11 	call	0x234c	; 0x234c <uart_init>
  stdout = stdin = &uart_str;
     ddc:	86 e1       	ldi	r24, 0x16	; 22
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <__iob+0x1>
     de4:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <__iob>
     de8:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <__iob+0x3>
     dec:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <__iob+0x2>
  stderr = &uart_str;
     df0:	90 93 74 03 	sts	0x0374, r25	; 0x800374 <__iob+0x5>
     df4:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <__iob+0x4>
  printf("main: Starting loop\n");
     df8:	89 e4       	ldi	r24, 0x49	; 73
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	0e 94 91 17 	call	0x2f22	; 0x2f22 <puts>
#endif

	DdsInit();
     e00:	0e 94 ad 04 	call	0x95a	; 0x95a <DdsInit>
	// init RLY as output, 
	reg = DDRD;
     e04:	8a b1       	in	r24, 0x0a	; 10
     e06:	8d 8b       	std	Y+21, r24	; 0x15
	DDRD = reg | RLY_MSK;
     e08:	8d 89       	ldd	r24, Y+21	; 0x15
     e0a:	80 64       	ori	r24, 0x40	; 64
     e0c:	8a b9       	out	0x0a, r24	; 10

	reg = PORTD;
     e0e:	8b b1       	in	r24, 0x0b	; 11
     e10:	8d 8b       	std	Y+21, r24	; 0x15
	PORTD = reg & ~RLY_MSK;
     e12:	8d 89       	ldd	r24, Y+21	; 0x15
     e14:	8f 7b       	andi	r24, 0xBF	; 191
     e16:	8b b9       	out	0x0b, r24	; 11
	 
	Sw *dot = new Sw(DOT, PORTC_ADR);
     e18:	8b e0       	ldi	r24, 0x0B	; 11
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_Znwj>
     e20:	9c a3       	std	Y+36, r25	; 0x24
     e22:	8b a3       	std	Y+35, r24	; 0x23
     e24:	48 e2       	ldi	r20, 0x28	; 40
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN2SwC1Ehh>
	Sw *dash = new Sw(DASH, PORTC_ADR);
     e2c:	8b e0       	ldi	r24, 0x0B	; 11
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_Znwj>
     e34:	9e a3       	std	Y+38, r25	; 0x26
     e36:	8d a3       	std	Y+37, r24	; 0x25
     e38:	48 e2       	ldi	r20, 0x28	; 40
     e3a:	63 e0       	ldi	r22, 0x03	; 3
     e3c:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN2SwC1Ehh>
	Sw *pb = new Sw(PB, PORTD_ADR);
     e40:	8b e0       	ldi	r24, 0x0B	; 11
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_Znwj>
     e48:	9b 8f       	std	Y+27, r25	; 0x1b
     e4a:	8a 8f       	std	Y+26, r24	; 0x1a
     e4c:	4b e2       	ldi	r20, 0x2B	; 43
     e4e:	67 e0       	ldi	r22, 0x07	; 7
     e50:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN2SwC1Ehh>
//	ElapsedTime *et = new ElapsedTime(ONE_SEC);
	Encoder *enc = new Encoder(ENCA, ENCB, PORTB_ADR);
     e54:	8f e0       	ldi	r24, 0x0F	; 15
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_Znwj>
     e5c:	9d 8f       	std	Y+29, r25	; 0x1d
     e5e:	8c 8f       	std	Y+28, r24	; 0x1c
     e60:	25 e2       	ldi	r18, 0x25	; 37
     e62:	44 e0       	ldi	r20, 0x04	; 4
     e64:	63 e0       	ldi	r22, 0x03	; 3
     e66:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN7EncoderC1Ehhh>

	band_t band = BAND_40;
	vfo *vfoA = new vfo(enc, vfoDataConst, VFOA_LINE);
     e6a:	8c ea       	ldi	r24, 0xAC	; 172
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_Znwj>
     e72:	18 2f       	mov	r17, r24
     e74:	d9 2e       	mov	r13, r25
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	42 e9       	ldi	r20, 0x92	; 146
     e7c:	51 e0       	ldi	r21, 0x01	; 1
     e7e:	6c 8d       	ldd	r22, Y+28	; 0x1c
     e80:	7d 8d       	ldd	r23, Y+29	; 0x1d
     e82:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN3vfoC1EP7EncoderP13vfoParametersj>
	vfo *vfoB = new vfo(enc, vfoDataConst, VFOB_LINE);
     e86:	8c ea       	ldi	r24, 0xAC	; 172
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_Znwj>
     e8e:	89 a3       	std	Y+33, r24	; 0x21
     e90:	9a a3       	std	Y+34, r25	; 0x22
     e92:	24 e2       	ldi	r18, 0x24	; 36
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	42 e9       	ldi	r20, 0x92	; 146
     e98:	51 e0       	ldi	r21, 0x01	; 1
     e9a:	6c 8d       	ldd	r22, Y+28	; 0x1c
     e9c:	7d 8d       	ldd	r23, Y+29	; 0x1d
     e9e:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN3vfoC1EP7EncoderP13vfoParametersj>

	vfoA->getTxDisplayFreq(buf, band);
     ea2:	42 e0       	ldi	r20, 0x02	; 2
     ea4:	fe 01       	movw	r30, r28
     ea6:	31 96       	adiw	r30, 0x01	; 1
     ea8:	2f 01       	movw	r4, r30
     eaa:	bf 01       	movw	r22, r30
     eac:	81 2f       	mov	r24, r17
     eae:	9d 2d       	mov	r25, r13
     eb0:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN3vfo16getTxDisplayFreqEPc5_band>
     eb4:	32 01       	movw	r6, r4
     eb6:	31 2c       	mov	r3, r1
	for (size_t i = 0; i < strlen(buf); i++) {
     eb8:	42 01       	movw	r8, r4
     eba:	f4 01       	movw	r30, r8
     ebc:	01 90       	ld	r0, Z+
     ebe:	00 20       	and	r0, r0
     ec0:	e9 f7       	brne	.-6      	; 0xebc <_Z6mymainv+0x142>
     ec2:	31 97       	sbiw	r30, 0x01	; 1
     ec4:	e8 19       	sub	r30, r8
     ec6:	f9 09       	sbc	r31, r9
     ec8:	c3 01       	movw	r24, r6
     eca:	84 19       	sub	r24, r4
     ecc:	95 09       	sbc	r25, r5
     ece:	8e 17       	cp	r24, r30
     ed0:	9f 07       	cpc	r25, r31
     ed2:	a0 f4       	brcc	.+40     	; 0xefc <_Z6mymainv+0x182>
		g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f,b);
     ed4:	f3 01       	movw	r30, r6
     ed6:	61 91       	ld	r22, Z+
     ed8:	3f 01       	movw	r6, r30
     eda:	a1 2c       	mov	r10, r1
     edc:	b1 2c       	mov	r11, r1
     ede:	bc e4       	ldi	r27, 0x4C	; 76
     ee0:	cb 2e       	mov	r12, r27
     ee2:	e1 2c       	mov	r14, r1
     ee4:	0c ef       	ldi	r16, 0xFC	; 252
     ee6:	f0 2e       	mov	r15, r16
     ee8:	00 e0       	ldi	r16, 0x00	; 0
     eea:	23 2d       	mov	r18, r3
     eec:	40 e0       	ldi	r20, 0x00	; 0
     eee:	88 8d       	ldd	r24, Y+24	; 0x18
     ef0:	99 8d       	ldd	r25, Y+25	; 0x19
     ef2:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
     ef6:	f0 e1       	ldi	r31, 0x10	; 16
     ef8:	3f 0e       	add	r3, r31
	band_t band = BAND_40;
	vfo *vfoA = new vfo(enc, vfoDataConst, VFOA_LINE);
	vfo *vfoB = new vfo(enc, vfoDataConst, VFOB_LINE);

	vfoA->getTxDisplayFreq(buf, band);
	for (size_t i = 0; i < strlen(buf); i++) {
     efa:	df cf       	rjmp	.-66     	; 0xeba <_Z6mymainv+0x140>
		g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f,b);
	}

	vfoB->getTxDisplayFreq(buf, band);
     efc:	42 e0       	ldi	r20, 0x02	; 2
     efe:	b4 01       	movw	r22, r8
     f00:	89 a1       	ldd	r24, Y+33	; 0x21
     f02:	9a a1       	ldd	r25, Y+34	; 0x22
     f04:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN3vfo16getTxDisplayFreqEPc5_band>
     f08:	42 01       	movw	r8, r4
     f0a:	31 2c       	mov	r3, r1
	for (size_t i = 0; i < strlen(buf); i++) {
     f0c:	ce 01       	movw	r24, r28
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	3c 01       	movw	r6, r24
     f12:	f3 01       	movw	r30, r6
     f14:	01 90       	ld	r0, Z+
     f16:	00 20       	and	r0, r0
     f18:	e9 f7       	brne	.-6      	; 0xf14 <_Z6mymainv+0x19a>
     f1a:	31 97       	sbiw	r30, 0x01	; 1
     f1c:	e6 19       	sub	r30, r6
     f1e:	f7 09       	sbc	r31, r7
     f20:	c4 01       	movw	r24, r8
     f22:	84 19       	sub	r24, r4
     f24:	95 09       	sbc	r25, r5
     f26:	8e 17       	cp	r24, r30
     f28:	9f 07       	cpc	r25, r31
     f2a:	98 f4       	brcc	.+38     	; 0xf52 <_Z6mymainv+0x1d8>
		g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey,b);
     f2c:	f4 01       	movw	r30, r8
     f2e:	61 91       	ld	r22, Z+
     f30:	4f 01       	movw	r8, r30
     f32:	a1 2c       	mov	r10, r1
     f34:	b1 2c       	mov	r11, r1
     f36:	ac e4       	ldi	r26, 0x4C	; 76
     f38:	ca 2e       	mov	r12, r26
     f3a:	e9 a4       	ldd	r14, Y+41	; 0x29
     f3c:	fa a4       	ldd	r15, Y+42	; 0x2a
     f3e:	0b a5       	ldd	r16, Y+43	; 0x2b
     f40:	23 2d       	mov	r18, r3
     f42:	44 e2       	ldi	r20, 0x24	; 36
     f44:	88 8d       	ldd	r24, Y+24	; 0x18
     f46:	99 8d       	ldd	r25, Y+25	; 0x19
     f48:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
     f4c:	f0 e1       	ldi	r31, 0x10	; 16
     f4e:	3f 0e       	add	r3, r31
	for (size_t i = 0; i < strlen(buf); i++) {
		g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f,b);
	}

	vfoB->getTxDisplayFreq(buf, band);
	for (size_t i = 0; i < strlen(buf); i++) {
     f50:	e0 cf       	rjmp	.-64     	; 0xf12 <_Z6mymainv+0x198>
		g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey,b);
	}

	vfo *curVfo = vfoA;
	params *param = new params(g);
     f52:	8b e5       	ldi	r24, 0x5B	; 91
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_Znwj>
     f5a:	9f 8b       	std	Y+23, r25	; 0x17
     f5c:	8e 8b       	std	Y+22, r24	; 0x16
     f5e:	68 8d       	ldd	r22, Y+24	; 0x18
     f60:	79 8d       	ldd	r23, Y+25	; 0x19
     f62:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN6paramsC1EP8Graphics>

	//
	// initialize a vfo and frequency
	//
	param->setActiveVfo(RX);
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	8e 89       	ldd	r24, Y+22	; 0x16
     f6a:	9f 89       	ldd	r25, Y+23	; 0x17
     f6c:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <_ZN6params12setActiveVfoE10vfo_actv_t>

	freq = curVfo->getRxFreq(band);
     f70:	62 e0       	ldi	r22, 0x02	; 2
     f72:	81 2f       	mov	r24, r17
     f74:	9d 2d       	mov	r25, r13
     f76:	0e 94 b5 12 	call	0x256a	; 0x256a <_ZN3vfo9getRxFreqE5_band>
     f7a:	69 8b       	std	Y+17, r22	; 0x11
     f7c:	7a 8b       	std	Y+18, r23	; 0x12
     f7e:	8b 8b       	std	Y+19, r24	; 0x13
     f80:	9c 8b       	std	Y+20, r25	; 0x14
	dds(freq);
     f82:	69 89       	ldd	r22, Y+17	; 0x11
     f84:	7a 89       	ldd	r23, Y+18	; 0x12
     f86:	8b 89       	ldd	r24, Y+19	; 0x13
     f88:	9c 89       	ldd	r25, Y+20	; 0x14
     f8a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <dds>

	curMode = param->getMode();
     f8e:	8e 89       	ldd	r24, Y+22	; 0x16
     f90:	9f 89       	ldd	r25, Y+23	; 0x17
     f92:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_ZN6params7getModeEv>
     f96:	08 2f       	mov	r16, r24
	g->gotoxy(9,0);
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	69 e0       	ldi	r22, 0x09	; 9
     f9c:	88 8d       	ldd	r24, Y+24	; 0x18
     f9e:	99 8d       	ldd	r25, Y+25	; 0x19
     fa0:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_ZN3Lcd6gotoxyEhh>
	fprintf(lcdfp, "AA6DQ");
     fa4:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <lcdfp>
     fa8:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <lcdfp+0x1>
     fac:	8d e5       	ldi	r24, 0x5D	; 93
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	0e 94 67 17 	call	0x2ece	; 0x2ece <fputs>
	vfoB->getTxDisplayFreq(buf, band);
	for (size_t i = 0; i < strlen(buf); i++) {
		g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey,b);
	}

	vfo *curVfo = vfoA;
     fb4:	81 2e       	mov	r8, r17
     fb6:	7d 2c       	mov	r7, r13
	Sw *dash = new Sw(DASH, PORTC_ADR);
	Sw *pb = new Sw(PB, PORTD_ADR);
//	ElapsedTime *et = new ElapsedTime(ONE_SEC);
	Encoder *enc = new Encoder(ENCA, ENCB, PORTB_ADR);

	band_t band = BAND_40;
     fb8:	f2 e0       	ldi	r31, 0x02	; 2
     fba:	9f 2e       	mov	r9, r31
						enc->clearEvent();

	freq = curVfo->getTxFreq(band);
	dds(freq);

						curVfo->getTxDisplayFreq(buf, band);
     fbc:	ce 01       	movw	r24, r28
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	1c 01       	movw	r2, r24
	g->gotoxy(9,0);
	fprintf(lcdfp, "AA6DQ");

	while(1) {
		
		mode_t newMode = param->getMode();
     fc2:	8e 89       	ldd	r24, Y+22	; 0x16
     fc4:	9f 89       	ldd	r25, Y+23	; 0x17
     fc6:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_ZN6params7getModeEv>
     fca:	8e 8f       	std	Y+30, r24	; 0x1e

		if ( (curMode == MODE_PARAMS) && (newMode == MODE_NORMAL)) {
     fcc:	01 30       	cpi	r16, 0x01	; 1
     fce:	09 f0       	breq	.+2      	; 0xfd2 <_Z6mymainv+0x258>
     fd0:	dc c0       	rjmp	.+440    	; 0x118a <_Z6mymainv+0x410>
     fd2:	81 11       	cpse	r24, r1
     fd4:	ea c0       	rjmp	.+468    	; 0x11aa <_Z6mymainv+0x430>

			band = param->getBand();
     fd6:	8e 89       	ldd	r24, Y+22	; 0x16
     fd8:	9f 89       	ldd	r25, Y+23	; 0x17
     fda:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_ZN6params7getBandEv>
     fde:	98 2e       	mov	r9, r24

			if (param->getVfo() == VFOA) {
     fe0:	8e 89       	ldd	r24, Y+22	; 0x16
     fe2:	9f 89       	ldd	r25, Y+23	; 0x17
     fe4:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <_ZN6params6getVfoEv>
				curVfo = vfoA;
				vfoA->getTxDisplayFreq(buf, band);
     fe8:	49 2d       	mov	r20, r9
     fea:	b1 01       	movw	r22, r2

		if ( (curMode == MODE_PARAMS) && (newMode == MODE_NORMAL)) {

			band = param->getBand();

			if (param->getVfo() == VFOA) {
     fec:	81 11       	cpse	r24, r1
     fee:	50 c0       	rjmp	.+160    	; 0x1090 <_Z6mymainv+0x316>
				curVfo = vfoA;
				vfoA->getTxDisplayFreq(buf, band);
     ff0:	81 2f       	mov	r24, r17
     ff2:	9d 2d       	mov	r25, r13
     ff4:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN3vfo16getTxDisplayFreqEPc5_band>
     ff8:	32 01       	movw	r6, r4
     ffa:	81 2c       	mov	r8, r1
				for (size_t i = 0; i < strlen(buf); i++) {
     ffc:	f1 01       	movw	r30, r2
     ffe:	01 90       	ld	r0, Z+
    1000:	00 20       	and	r0, r0
    1002:	e9 f7       	brne	.-6      	; 0xffe <_Z6mymainv+0x284>
    1004:	31 97       	sbiw	r30, 0x01	; 1
    1006:	e2 19       	sub	r30, r2
    1008:	f3 09       	sbc	r31, r3
    100a:	c3 01       	movw	r24, r6
    100c:	84 19       	sub	r24, r4
    100e:	95 09       	sbc	r25, r5
    1010:	8e 17       	cp	r24, r30
    1012:	9f 07       	cpc	r25, r31
    1014:	a0 f4       	brcc	.+40     	; 0x103e <_Z6mymainv+0x2c4>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f,b);
    1016:	f3 01       	movw	r30, r6
    1018:	61 91       	ld	r22, Z+
    101a:	3f 01       	movw	r6, r30
    101c:	a1 2c       	mov	r10, r1
    101e:	b1 2c       	mov	r11, r1
    1020:	7c e4       	ldi	r23, 0x4C	; 76
    1022:	c7 2e       	mov	r12, r23
    1024:	e1 2c       	mov	r14, r1
    1026:	ec ef       	ldi	r30, 0xFC	; 252
    1028:	fe 2e       	mov	r15, r30
    102a:	00 e0       	ldi	r16, 0x00	; 0
    102c:	28 2d       	mov	r18, r8
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	88 8d       	ldd	r24, Y+24	; 0x18
    1032:	99 8d       	ldd	r25, Y+25	; 0x19
    1034:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
    1038:	f0 e1       	ldi	r31, 0x10	; 16
    103a:	8f 0e       	add	r8, r31
			band = param->getBand();

			if (param->getVfo() == VFOA) {
				curVfo = vfoA;
				vfoA->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
    103c:	df cf       	rjmp	.-66     	; 0xffc <_Z6mymainv+0x282>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f,b);
				}

				vfoB->getTxDisplayFreq(buf, band);
    103e:	49 2d       	mov	r20, r9
    1040:	b1 01       	movw	r22, r2
    1042:	89 a1       	ldd	r24, Y+33	; 0x21
    1044:	9a a1       	ldd	r25, Y+34	; 0x22
    1046:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN3vfo16getTxDisplayFreqEPc5_band>
    104a:	32 01       	movw	r6, r4
    104c:	81 2c       	mov	r8, r1
				for (size_t i = 0; i < strlen(buf); i++) {
    104e:	f1 01       	movw	r30, r2
    1050:	01 90       	ld	r0, Z+
    1052:	00 20       	and	r0, r0
    1054:	e9 f7       	brne	.-6      	; 0x1050 <_Z6mymainv+0x2d6>
    1056:	31 97       	sbiw	r30, 0x01	; 1
    1058:	e2 19       	sub	r30, r2
    105a:	f3 09       	sbc	r31, r3
    105c:	c3 01       	movw	r24, r6
    105e:	84 19       	sub	r24, r4
    1060:	95 09       	sbc	r25, r5
    1062:	8e 17       	cp	r24, r30
    1064:	9f 07       	cpc	r25, r31
    1066:	08 f0       	brcs	.+2      	; 0x106a <_Z6mymainv+0x2f0>
    1068:	62 c0       	rjmp	.+196    	; 0x112e <_Z6mymainv+0x3b4>
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey,b);
    106a:	f3 01       	movw	r30, r6
    106c:	61 91       	ld	r22, Z+
    106e:	3f 01       	movw	r6, r30
    1070:	a1 2c       	mov	r10, r1
    1072:	b1 2c       	mov	r11, r1
    1074:	5c e4       	ldi	r21, 0x4C	; 76
    1076:	c5 2e       	mov	r12, r21
    1078:	e9 a4       	ldd	r14, Y+41	; 0x29
    107a:	fa a4       	ldd	r15, Y+42	; 0x2a
    107c:	0b a5       	ldd	r16, Y+43	; 0x2b
    107e:	28 2d       	mov	r18, r8
    1080:	44 e2       	ldi	r20, 0x24	; 36
    1082:	88 8d       	ldd	r24, Y+24	; 0x18
    1084:	99 8d       	ldd	r25, Y+25	; 0x19
    1086:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
    108a:	f0 e1       	ldi	r31, 0x10	; 16
    108c:	8f 0e       	add	r8, r31
				for (size_t i = 0; i < strlen(buf); i++) {
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f,b);
				}

				vfoB->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
    108e:	df cf       	rjmp	.-66     	; 0x104e <_Z6mymainv+0x2d4>
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey,b);
				}

			} else {
				curVfo = vfoB;
				vfoA->getTxDisplayFreq(buf, band);
    1090:	81 2f       	mov	r24, r17
    1092:	9d 2d       	mov	r25, r13
    1094:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN3vfo16getTxDisplayFreqEPc5_band>
    1098:	32 01       	movw	r6, r4
    109a:	81 2c       	mov	r8, r1
				for (size_t i = 0; i < strlen(buf); i++) {
    109c:	f1 01       	movw	r30, r2
    109e:	01 90       	ld	r0, Z+
    10a0:	00 20       	and	r0, r0
    10a2:	e9 f7       	brne	.-6      	; 0x109e <_Z6mymainv+0x324>
    10a4:	31 97       	sbiw	r30, 0x01	; 1
    10a6:	e2 19       	sub	r30, r2
    10a8:	f3 09       	sbc	r31, r3
    10aa:	c3 01       	movw	r24, r6
    10ac:	84 19       	sub	r24, r4
    10ae:	95 09       	sbc	r25, r5
    10b0:	8e 17       	cp	r24, r30
    10b2:	9f 07       	cpc	r25, r31
    10b4:	98 f4       	brcc	.+38     	; 0x10dc <_Z6mymainv+0x362>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, fg_grey,b);
    10b6:	f3 01       	movw	r30, r6
    10b8:	61 91       	ld	r22, Z+
    10ba:	3f 01       	movw	r6, r30
    10bc:	a1 2c       	mov	r10, r1
    10be:	b1 2c       	mov	r11, r1
    10c0:	4c e4       	ldi	r20, 0x4C	; 76
    10c2:	c4 2e       	mov	r12, r20
    10c4:	e9 a4       	ldd	r14, Y+41	; 0x29
    10c6:	fa a4       	ldd	r15, Y+42	; 0x2a
    10c8:	0b a5       	ldd	r16, Y+43	; 0x2b
    10ca:	28 2d       	mov	r18, r8
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	88 8d       	ldd	r24, Y+24	; 0x18
    10d0:	99 8d       	ldd	r25, Y+25	; 0x19
    10d2:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
    10d6:	f0 e1       	ldi	r31, 0x10	; 16
    10d8:	8f 0e       	add	r8, r31
				}

			} else {
				curVfo = vfoB;
				vfoA->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
    10da:	e0 cf       	rjmp	.-64     	; 0x109c <_Z6mymainv+0x322>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, fg_grey,b);
				}

				vfoB->getTxDisplayFreq(buf, band);
    10dc:	49 2d       	mov	r20, r9
    10de:	b1 01       	movw	r22, r2
    10e0:	89 a1       	ldd	r24, Y+33	; 0x21
    10e2:	9a a1       	ldd	r25, Y+34	; 0x22
    10e4:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN3vfo16getTxDisplayFreqEPc5_band>
    10e8:	32 01       	movw	r6, r4
    10ea:	81 2c       	mov	r8, r1
				for (size_t i = 0; i < strlen(buf); i++) {
    10ec:	f1 01       	movw	r30, r2
    10ee:	01 90       	ld	r0, Z+
    10f0:	00 20       	and	r0, r0
    10f2:	e9 f7       	brne	.-6      	; 0x10ee <_Z6mymainv+0x374>
    10f4:	31 97       	sbiw	r30, 0x01	; 1
    10f6:	e2 19       	sub	r30, r2
    10f8:	f3 09       	sbc	r31, r3
    10fa:	c3 01       	movw	r24, r6
    10fc:	84 19       	sub	r24, r4
    10fe:	95 09       	sbc	r25, r5
    1100:	8e 17       	cp	r24, r30
    1102:	9f 07       	cpc	r25, r31
    1104:	b8 f4       	brcc	.+46     	; 0x1134 <_Z6mymainv+0x3ba>
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, f,b);
    1106:	f3 01       	movw	r30, r6
    1108:	61 91       	ld	r22, Z+
    110a:	3f 01       	movw	r6, r30
    110c:	a1 2c       	mov	r10, r1
    110e:	b1 2c       	mov	r11, r1
    1110:	2c e4       	ldi	r18, 0x4C	; 76
    1112:	c2 2e       	mov	r12, r18
    1114:	e1 2c       	mov	r14, r1
    1116:	3c ef       	ldi	r19, 0xFC	; 252
    1118:	f3 2e       	mov	r15, r19
    111a:	00 e0       	ldi	r16, 0x00	; 0
    111c:	28 2d       	mov	r18, r8
    111e:	44 e2       	ldi	r20, 0x24	; 36
    1120:	88 8d       	ldd	r24, Y+24	; 0x18
    1122:	99 8d       	ldd	r25, Y+25	; 0x19
    1124:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
    1128:	f0 e1       	ldi	r31, 0x10	; 16
    112a:	8f 0e       	add	r8, r31
				for (size_t i = 0; i < strlen(buf); i++) {
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, fg_grey,b);
				}

				vfoB->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
    112c:	df cf       	rjmp	.-66     	; 0x10ec <_Z6mymainv+0x372>
		if ( (curMode == MODE_PARAMS) && (newMode == MODE_NORMAL)) {

			band = param->getBand();

			if (param->getVfo() == VFOA) {
				curVfo = vfoA;
    112e:	81 2e       	mov	r8, r17
    1130:	7d 2c       	mov	r7, r13
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <_Z6mymainv+0x3be>
				for (size_t i = 0; i < strlen(buf); i++) {
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey,b);
				}

			} else {
				curVfo = vfoB;
    1134:	89 a0       	ldd	r8, Y+33	; 0x21
    1136:	7a a0       	ldd	r7, Y+34	; 0x22
				for (size_t i = 0; i < strlen(buf); i++) {
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, f,b);
				}

			}
			curVfo->setStep(param->getStep());
    1138:	8e 89       	ldd	r24, Y+22	; 0x16
    113a:	9f 89       	ldd	r25, Y+23	; 0x17
    113c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN6params7getStepEv>
    1140:	68 2f       	mov	r22, r24
    1142:	88 2d       	mov	r24, r8
    1144:	97 2d       	mov	r25, r7
    1146:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN3vfo7setStepE6step_t>
			if (param->getActiveVfo() == RX) {
    114a:	8e 89       	ldd	r24, Y+22	; 0x16
    114c:	9f 89       	ldd	r25, Y+23	; 0x17
    114e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <_ZN6params12getActiveVfoEv>
    1152:	81 11       	cpse	r24, r1
    1154:	0a c0       	rjmp	.+20     	; 0x116a <_Z6mymainv+0x3f0>
				freq = curVfo->getRxFreq(band);
    1156:	69 2d       	mov	r22, r9
    1158:	88 2d       	mov	r24, r8
    115a:	97 2d       	mov	r25, r7
    115c:	0e 94 b5 12 	call	0x256a	; 0x256a <_ZN3vfo9getRxFreqE5_band>
    1160:	69 8b       	std	Y+17, r22	; 0x11
    1162:	7a 8b       	std	Y+18, r23	; 0x12
    1164:	8b 8b       	std	Y+19, r24	; 0x13
    1166:	9c 8b       	std	Y+20, r25	; 0x14
    1168:	09 c0       	rjmp	.+18     	; 0x117c <_Z6mymainv+0x402>
				dds(freq);
			} else {
				freq - curVfo->getTxFreq(band);
    116a:	89 89       	ldd	r24, Y+17	; 0x11
    116c:	9a 89       	ldd	r25, Y+18	; 0x12
    116e:	ab 89       	ldd	r26, Y+19	; 0x13
    1170:	bc 89       	ldd	r27, Y+20	; 0x14
    1172:	69 2d       	mov	r22, r9
    1174:	88 2d       	mov	r24, r8
    1176:	97 2d       	mov	r25, r7
    1178:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN3vfo9getTxFreqE5_band>
				dds(freq);
    117c:	69 89       	ldd	r22, Y+17	; 0x11
    117e:	7a 89       	ldd	r23, Y+18	; 0x12
    1180:	8b 89       	ldd	r24, Y+19	; 0x13
    1182:	9c 89       	ldd	r25, Y+20	; 0x14
    1184:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <dds>
    1188:	91 c0       	rjmp	.+290    	; 0x12ac <_Z6mymainv+0x532>
			}
			curMode = newMode;

		} else if ((newMode == MODE_PARAMS) && (curMode == MODE_NORMAL)) {
    118a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	81 f4       	brne	.+32     	; 0x11b0 <_Z6mymainv+0x436>
    1190:	01 11       	cpse	r16, r1
    1192:	14 c0       	rjmp	.+40     	; 0x11bc <_Z6mymainv+0x442>
				param->updateEnter(enc, pb, l);
    1194:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1196:	38 a1       	ldd	r19, Y+32	; 0x20
    1198:	4a 8d       	ldd	r20, Y+26	; 0x1a
    119a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    119c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    119e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    11a0:	8e 89       	ldd	r24, Y+22	; 0x16
    11a2:	9f 89       	ldd	r25, Y+23	; 0x17
    11a4:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <_ZN6params11updateEnterEP7EncoderP2SwP3Lcd>
				curMode = newMode;
    11a8:	81 c0       	rjmp	.+258    	; 0x12ac <_Z6mymainv+0x532>
				freq - curVfo->getTxFreq(band);
				dds(freq);
			}
			curMode = newMode;

		} else if ((newMode == MODE_PARAMS) && (curMode == MODE_NORMAL)) {
    11aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	31 f0       	breq	.+12     	; 0x11bc <_Z6mymainv+0x442>

		} else {

			curMode = newMode;
		
			switch (curMode) {
    11b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11b2:	99 23       	and	r25, r25
    11b4:	71 f0       	breq	.+28     	; 0x11d2 <_Z6mymainv+0x458>
    11b6:	91 30       	cpi	r25, 0x01	; 1
    11b8:	09 f0       	breq	.+2      	; 0x11bc <_Z6mymainv+0x442>
    11ba:	78 c0       	rjmp	.+240    	; 0x12ac <_Z6mymainv+0x532>

				case MODE_PARAMS:
						param->update(enc, pb, l);
    11bc:	2f 8d       	ldd	r18, Y+31	; 0x1f
    11be:	38 a1       	ldd	r19, Y+32	; 0x20
    11c0:	4a 8d       	ldd	r20, Y+26	; 0x1a
    11c2:	5b 8d       	ldd	r21, Y+27	; 0x1b
    11c4:	6c 8d       	ldd	r22, Y+28	; 0x1c
    11c6:	7d 8d       	ldd	r23, Y+29	; 0x1d
    11c8:	8e 89       	ldd	r24, Y+22	; 0x16
    11ca:	9f 89       	ldd	r25, Y+23	; 0x17
    11cc:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <_ZN6params6updateEP7EncoderP2SwP3Lcd>
					break;
    11d0:	6d c0       	rjmp	.+218    	; 0x12ac <_Z6mymainv+0x532>
				//
				// for now, no keyer, just straight key
				//

				case MODE_NORMAL:
					if (pb->hasEvent()) {
    11d2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11d4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11d6:	0e 94 90 11 	call	0x2320	; 0x2320 <_ZN2Sw8hasEventEv>
    11da:	88 23       	and	r24, r24
    11dc:	b1 f0       	breq	.+44     	; 0x120a <_Z6mymainv+0x490>
						if (pb->getEvent() == EV_CLOSE) {
    11de:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11e2:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN2Sw8getEventEv>
    11e6:	82 30       	cpi	r24, 0x02	; 2
    11e8:	59 f0       	breq	.+22     	; 0x1200 <_Z6mymainv+0x486>

						} else if (pb->getEvent() == EV_OPEN) {
    11ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11ee:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN2Sw8getEventEv>
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	29 f4       	brne	.+10     	; 0x1200 <_Z6mymainv+0x486>
							param->setMode(MODE_PARAMS);
    11f6:	61 e0       	ldi	r22, 0x01	; 1
    11f8:	8e 89       	ldd	r24, Y+22	; 0x16
    11fa:	9f 89       	ldd	r25, Y+23	; 0x17
    11fc:	0e 94 65 0e 	call	0x1cca	; 0x1cca <_ZN6params7setModeE7_mode_t>
						}
						pb->clearEvent();
    1200:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1202:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1204:	0e 94 9b 11 	call	0x2336	; 0x2336 <_ZN2Sw10clearEventEv>
						break;
    1208:	51 c0       	rjmp	.+162    	; 0x12ac <_Z6mymainv+0x532>
					}

					if (enc->hasEvent()) {
    120a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    120c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    120e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_ZN7Encoder8hasEventEv>
    1212:	88 23       	and	r24, r24
    1214:	09 f4       	brne	.+2      	; 0x1218 <_Z6mymainv+0x49e>
    1216:	4a c0       	rjmp	.+148    	; 0x12ac <_Z6mymainv+0x532>
						uint16_t line;
						curVfo->update(band);
    1218:	69 2d       	mov	r22, r9
    121a:	88 2d       	mov	r24, r8
    121c:	97 2d       	mov	r25, r7
    121e:	0e 94 22 12 	call	0x2444	; 0x2444 <_ZN3vfo6updateEh>
						enc->clearEvent();
    1222:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1224:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1226:	0e 94 0a 06 	call	0xc14	; 0xc14 <_ZN7Encoder10clearEventEv>

	freq = curVfo->getTxFreq(band);
    122a:	69 2d       	mov	r22, r9
    122c:	88 2d       	mov	r24, r8
    122e:	97 2d       	mov	r25, r7
    1230:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN3vfo9getTxFreqE5_band>
    1234:	69 8b       	std	Y+17, r22	; 0x11
    1236:	7a 8b       	std	Y+18, r23	; 0x12
    1238:	8b 8b       	std	Y+19, r24	; 0x13
    123a:	9c 8b       	std	Y+20, r25	; 0x14
	dds(freq);
    123c:	69 89       	ldd	r22, Y+17	; 0x11
    123e:	7a 89       	ldd	r23, Y+18	; 0x12
    1240:	8b 89       	ldd	r24, Y+19	; 0x13
    1242:	9c 89       	ldd	r25, Y+20	; 0x14
    1244:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <dds>

						curVfo->getTxDisplayFreq(buf, band);
    1248:	49 2d       	mov	r20, r9
    124a:	b1 01       	movw	r22, r2
    124c:	88 2d       	mov	r24, r8
    124e:	97 2d       	mov	r25, r7
    1250:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN3vfo16getTxDisplayFreqEPc5_band>
						line = curVfo->getLine();
    1254:	88 2d       	mov	r24, r8
    1256:	97 2d       	mov	r25, r7
    1258:	0e 94 24 14 	call	0x2848	; 0x2848 <_ZN3vfo7getLineEv>
    125c:	8c a7       	std	Y+44, r24	; 0x2c
    125e:	58 a6       	std	Y+40, r5	; 0x28
    1260:	4f a2       	std	Y+39, r4	; 0x27
    1262:	61 2c       	mov	r6, r1
						for (size_t i = 0; i < strlen(buf); i++) {
    1264:	f1 01       	movw	r30, r2
    1266:	01 90       	ld	r0, Z+
    1268:	00 20       	and	r0, r0
    126a:	e9 f7       	brne	.-6      	; 0x1266 <_Z6mymainv+0x4ec>
    126c:	31 97       	sbiw	r30, 0x01	; 1
    126e:	e2 19       	sub	r30, r2
    1270:	f3 09       	sbc	r31, r3
    1272:	8f a1       	ldd	r24, Y+39	; 0x27
    1274:	98 a5       	ldd	r25, Y+40	; 0x28
    1276:	84 19       	sub	r24, r4
    1278:	95 09       	sbc	r25, r5
    127a:	8e 17       	cp	r24, r30
    127c:	9f 07       	cpc	r25, r31
    127e:	b0 f4       	brcc	.+44     	; 0x12ac <_Z6mymainv+0x532>
							g->draw2xChar(buf[i], line, i*2*CHAR_WIDTH, f,b);
    1280:	ef a1       	ldd	r30, Y+39	; 0x27
    1282:	f8 a5       	ldd	r31, Y+40	; 0x28
    1284:	61 91       	ld	r22, Z+
    1286:	f8 a7       	std	Y+40, r31	; 0x28
    1288:	ef a3       	std	Y+39, r30	; 0x27
    128a:	a1 2c       	mov	r10, r1
    128c:	b1 2c       	mov	r11, r1
    128e:	8c e4       	ldi	r24, 0x4C	; 76
    1290:	c8 2e       	mov	r12, r24
    1292:	e1 2c       	mov	r14, r1
    1294:	9c ef       	ldi	r25, 0xFC	; 252
    1296:	f9 2e       	mov	r15, r25
    1298:	00 e0       	ldi	r16, 0x00	; 0
    129a:	26 2d       	mov	r18, r6
    129c:	4c a5       	ldd	r20, Y+44	; 0x2c
    129e:	88 8d       	ldd	r24, Y+24	; 0x18
    12a0:	99 8d       	ldd	r25, Y+25	; 0x19
    12a2:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
    12a6:	f0 e1       	ldi	r31, 0x10	; 16
    12a8:	6f 0e       	add	r6, r31
	freq = curVfo->getTxFreq(band);
	dds(freq);

						curVfo->getTxDisplayFreq(buf, band);
						line = curVfo->getLine();
						for (size_t i = 0; i < strlen(buf); i++) {
    12aa:	dc cf       	rjmp	.-72     	; 0x1264 <_Z6mymainv+0x4ea>
				case MODE_SETUP:
					break;
			}
		}

		if (dot->hasEvent()) {
    12ac:	8b a1       	ldd	r24, Y+35	; 0x23
    12ae:	9c a1       	ldd	r25, Y+36	; 0x24
    12b0:	0e 94 90 11 	call	0x2320	; 0x2320 <_ZN2Sw8hasEventEv>
    12b4:	88 23       	and	r24, r24
    12b6:	c1 f1       	breq	.+112    	; 0x1328 <_Z6mymainv+0x5ae>
			if (dot->getEvent() == EV_CLOSE) {
    12b8:	8b a1       	ldd	r24, Y+35	; 0x23
    12ba:	9c a1       	ldd	r25, Y+36	; 0x24
    12bc:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN2Sw8getEventEv>
				freq = curVfo->getTxFreq(band);
    12c0:	69 2d       	mov	r22, r9
					break;
			}
		}

		if (dot->hasEvent()) {
			if (dot->getEvent() == EV_CLOSE) {
    12c2:	82 30       	cpi	r24, 0x02	; 2
    12c4:	a9 f4       	brne	.+42     	; 0x12f0 <_Z6mymainv+0x576>
				freq = curVfo->getTxFreq(band);
    12c6:	88 2d       	mov	r24, r8
    12c8:	97 2d       	mov	r25, r7
    12ca:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN3vfo9getTxFreqE5_band>
    12ce:	69 8b       	std	Y+17, r22	; 0x11
    12d0:	7a 8b       	std	Y+18, r23	; 0x12
    12d2:	8b 8b       	std	Y+19, r24	; 0x13
    12d4:	9c 8b       	std	Y+20, r25	; 0x14
				dds(freq);
    12d6:	69 89       	ldd	r22, Y+17	; 0x11
    12d8:	7a 89       	ldd	r23, Y+18	; 0x12
    12da:	8b 89       	ldd	r24, Y+19	; 0x13
    12dc:	9c 89       	ldd	r25, Y+20	; 0x14
    12de:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <dds>
				reg = PORTD;
    12e2:	8b b1       	in	r24, 0x0b	; 11
    12e4:	8d 8b       	std	Y+21, r24	; 0x15
				PORTD = reg | RLY_MSK;
    12e6:	8d 89       	ldd	r24, Y+21	; 0x15
    12e8:	80 64       	ori	r24, 0x40	; 64
    12ea:	8b b9       	out	0x0b, r24	; 11
				param->setActiveVfo(TX);
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	14 c0       	rjmp	.+40     	; 0x1318 <_Z6mymainv+0x59e>
			} else {
				freq = curVfo->getRxFreq(band);
    12f0:	88 2d       	mov	r24, r8
    12f2:	97 2d       	mov	r25, r7
    12f4:	0e 94 b5 12 	call	0x256a	; 0x256a <_ZN3vfo9getRxFreqE5_band>
    12f8:	69 8b       	std	Y+17, r22	; 0x11
    12fa:	7a 8b       	std	Y+18, r23	; 0x12
    12fc:	8b 8b       	std	Y+19, r24	; 0x13
    12fe:	9c 8b       	std	Y+20, r25	; 0x14
				dds(freq);
    1300:	69 89       	ldd	r22, Y+17	; 0x11
    1302:	7a 89       	ldd	r23, Y+18	; 0x12
    1304:	8b 89       	ldd	r24, Y+19	; 0x13
    1306:	9c 89       	ldd	r25, Y+20	; 0x14
    1308:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <dds>
				reg = PORTD;
    130c:	8b b1       	in	r24, 0x0b	; 11
    130e:	8d 8b       	std	Y+21, r24	; 0x15
				PORTD = reg & ~RLY_MSK;
    1310:	8d 89       	ldd	r24, Y+21	; 0x15
    1312:	8f 7b       	andi	r24, 0xBF	; 191
    1314:	8b b9       	out	0x0b, r24	; 11
				param->setActiveVfo(RX);
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	8e 89       	ldd	r24, Y+22	; 0x16
    131a:	9f 89       	ldd	r25, Y+23	; 0x17
    131c:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <_ZN6params12setActiveVfoE10vfo_actv_t>
			}
			dot->clearEvent();
    1320:	8b a1       	ldd	r24, Y+35	; 0x23
    1322:	9c a1       	ldd	r25, Y+36	; 0x24
    1324:	0e 94 9b 11 	call	0x2336	; 0x2336 <_ZN2Sw10clearEventEv>
		}
		
		if (dash->hasEvent()) {
    1328:	8d a1       	ldd	r24, Y+37	; 0x25
    132a:	9e a1       	ldd	r25, Y+38	; 0x26
    132c:	0e 94 90 11 	call	0x2320	; 0x2320 <_ZN2Sw8hasEventEv>
    1330:	81 11       	cpse	r24, r1
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <_Z6mymainv+0x5be>
	g->gotoxy(9,0);
	fprintf(lcdfp, "AA6DQ");

	while(1) {
		
		mode_t newMode = param->getMode();
    1334:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1336:	45 ce       	rjmp	.-886    	; 0xfc2 <_Z6mymainv+0x248>
			}
			dot->clearEvent();
		}
		
		if (dash->hasEvent()) {
			if (dash->getEvent() == EV_CLOSE) {
    1338:	8d a1       	ldd	r24, Y+37	; 0x25
    133a:	9e a1       	ldd	r25, Y+38	; 0x26
    133c:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN2Sw8getEventEv>
    1340:	82 30       	cpi	r24, 0x02	; 2
    1342:	19 f4       	brne	.+6      	; 0x134a <_Z6mymainv+0x5d0>
				sprintf(buf,"DASH_CLOSE");
    1344:	63 e6       	ldi	r22, 0x63	; 99
    1346:	72 e0       	ldi	r23, 0x02	; 2
    1348:	02 c0       	rjmp	.+4      	; 0x134e <_Z6mymainv+0x5d4>
				} else {
				sprintf(buf,"DASH_OPEN ");
    134a:	6e e6       	ldi	r22, 0x6E	; 110
    134c:	72 e0       	ldi	r23, 0x02	; 2
    134e:	c1 01       	movw	r24, r2
    1350:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <strcpy>
			}
			dash->clearEvent();
    1354:	8d a1       	ldd	r24, Y+37	; 0x25
    1356:	9e a1       	ldd	r25, Y+38	; 0x26
    1358:	0e 94 9b 11 	call	0x2336	; 0x2336 <_ZN2Sw10clearEventEv>
			l->gotoxy(9,0);
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	69 e0       	ldi	r22, 0x09	; 9
    1360:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1362:	98 a1       	ldd	r25, Y+32	; 0x20
    1364:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_ZN3Lcd6gotoxyEhh>
			l->puts(buf);
    1368:	b1 01       	movw	r22, r2
    136a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    136c:	98 a1       	ldd	r25, Y+32	; 0x20
    136e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <_ZN3Lcd4putsEPc>
    1372:	e0 cf       	rjmp	.-64     	; 0x1334 <_Z6mymainv+0x5ba>

00001374 <setup>:
	delete led;
#endif
}


void setup() {
    1374:	08 95       	ret

00001376 <loop>:

}


void loop() {
  mymain();
    1376:	0e 94 bd 06 	call	0xd7a	; 0xd7a <_Z6mymainv>

0000137a <_ZN3Lcd5resetEv>:
  if (erase) {
    drawChar(' ', 1, cursor.line, cursor.col, fgColor, bgColor);    
  } else {
  	drawChar(' ', 1, cursor.line, cursor.col, bgColor, fgColor);
  }
}
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	1f 92       	push	r1
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	8b b1       	in	r24, 0x0b	; 11
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	8f 7d       	andi	r24, 0xDF	; 223
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	8b b9       	out	0x0b, r24	; 11
    1392:	80 ea       	ldi	r24, 0xA0	; 160
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 ac 04 	call	0x958	; 0x958 <_Z7usecDlyi>
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	80 62       	ori	r24, 0x20	; 32
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	8b b9       	out	0x0b, r24	; 11
    13a4:	6d e0       	ldi	r22, 0x0D	; 13
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 16 04 	call	0x82c	; 0x82c <_ZN5Clock5delayEm>
    13b0:	0f 90       	pop	r0
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	08 95       	ret

000013b8 <_ZN3Lcd8sendByteEh>:
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	00 d0       	rcall	.+0      	; 0x13be <_ZN3Lcd8sendByteEh+0x6>
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	9b b1       	in	r25, 0x0b	; 11
    13c4:	9a 83       	std	Y+2, r25	; 0x02
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	99 83       	std	Y+1, r25	; 0x01
    13ca:	28 e0       	ldi	r18, 0x08	; 8
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	99 81       	ldd	r25, Y+1	; 0x01
    13d0:	87 ff       	sbrs	r24, 7
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <_ZN3Lcd8sendByteEh+0x20>
    13d4:	98 60       	ori	r25, 0x08	; 8
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <_ZN3Lcd8sendByteEh+0x22>
    13d8:	97 7f       	andi	r25, 0xF7	; 247
    13da:	99 83       	std	Y+1, r25	; 0x01
    13dc:	99 81       	ldd	r25, Y+1	; 0x01
    13de:	9b b9       	out	0x0b, r25	; 11
    13e0:	99 81       	ldd	r25, Y+1	; 0x01
    13e2:	94 60       	ori	r25, 0x04	; 4
    13e4:	9b b9       	out	0x0b, r25	; 11
    13e6:	99 81       	ldd	r25, Y+1	; 0x01
    13e8:	9b b9       	out	0x0b, r25	; 11
    13ea:	88 0f       	add	r24, r24
    13ec:	21 50       	subi	r18, 0x01	; 1
    13ee:	31 09       	sbc	r19, r1
    13f0:	71 f7       	brne	.-36     	; 0x13ce <_ZN3Lcd8sendByteEh+0x16>
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	8b b9       	out	0x0b, r24	; 11
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	08 95       	ret

00001400 <_ZN3Lcd7sendCmdEh>:
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	1f 92       	push	r1
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	9b b1       	in	r25, 0x0b	; 11
    140c:	99 83       	std	Y+1, r25	; 0x01
    140e:	99 81       	ldd	r25, Y+1	; 0x01
    1410:	9f 7a       	andi	r25, 0xAF	; 175
    1412:	99 83       	std	Y+1, r25	; 0x01
    1414:	99 81       	ldd	r25, Y+1	; 0x01
    1416:	9b b9       	out	0x0b, r25	; 11
    1418:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <_ZN3Lcd8sendByteEh>
    141c:	0f 90       	pop	r0
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	08 95       	ret

00001424 <_ZN3Lcd8sendDataEPhh>:
    1424:	cf 92       	push	r12
    1426:	df 92       	push	r13
    1428:	ef 92       	push	r14
    142a:	ff 92       	push	r15
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	1f 92       	push	r1
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	6c 01       	movw	r12, r24
    143c:	8b b1       	in	r24, 0x0b	; 11
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	80 61       	ori	r24, 0x10	; 16
    1444:	8b b9       	out	0x0b, r24	; 11
    1446:	86 01       	movw	r16, r12
    1448:	e6 2e       	mov	r14, r22
    144a:	f1 2c       	mov	r15, r1
    144c:	c8 01       	movw	r24, r16
    144e:	8c 19       	sub	r24, r12
    1450:	9d 09       	sbc	r25, r13
    1452:	8e 15       	cp	r24, r14
    1454:	9f 05       	cpc	r25, r15
    1456:	34 f4       	brge	.+12     	; 0x1464 <_ZN3Lcd8sendDataEPhh+0x40>
    1458:	f8 01       	movw	r30, r16
    145a:	81 91       	ld	r24, Z+
    145c:	8f 01       	movw	r16, r30
    145e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <_ZN3Lcd8sendByteEh>
    1462:	f4 cf       	rjmp	.-24     	; 0x144c <_ZN3Lcd8sendDataEPhh+0x28>
    1464:	0f 90       	pop	r0
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	08 95       	ret

00001478 <_ZN3Lcd8cmpltCmdEv>:
    1478:	8b b1       	in	r24, 0x0b	; 11
    147a:	83 78       	andi	r24, 0x83	; 131
    147c:	80 66       	ori	r24, 0x60	; 96
    147e:	8b b9       	out	0x0b, r24	; 11
    1480:	08 95       	ret

00001482 <_ZN3Lcd2onEv>:
    1482:	f8 94       	cli
    1484:	89 e2       	ldi	r24, 0x29	; 41
    1486:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN3Lcd7sendCmdEh>
    148a:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN3Lcd8cmpltCmdEv>
    148e:	78 94       	sei
    1490:	08 95       	ret

00001492 <_ZN3Lcd9sleep_outEv>:
    1492:	f8 94       	cli
    1494:	81 e1       	ldi	r24, 0x11	; 17
    1496:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN3Lcd7sendCmdEh>
    149a:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN3Lcd8cmpltCmdEv>
    149e:	78 94       	sei
    14a0:	08 95       	ret

000014a2 <_ZN3Lcd10mem_accessEv>:
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	1f 92       	push	r1
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	80 ea       	ldi	r24, 0xA0	; 160
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	f8 94       	cli
    14b2:	86 e3       	ldi	r24, 0x36	; 54
    14b4:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN3Lcd7sendCmdEh>
    14b8:	61 e0       	ldi	r22, 0x01	; 1
    14ba:	ce 01       	movw	r24, r28
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN3Lcd8sendDataEPhh>
    14c2:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN3Lcd8cmpltCmdEv>
    14c6:	8a e3       	ldi	r24, 0x3A	; 58
    14c8:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN3Lcd7sendCmdEh>
    14cc:	86 e0       	ldi	r24, 0x06	; 6
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	61 e0       	ldi	r22, 0x01	; 1
    14d2:	ce 01       	movw	r24, r28
    14d4:	01 96       	adiw	r24, 0x01	; 1
    14d6:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN3Lcd8sendDataEPhh>
    14da:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN3Lcd8cmpltCmdEv>
    14de:	78 94       	sei
    14e0:	0f 90       	pop	r0
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	08 95       	ret

000014e8 <_ZN3Lcd11lcd_putcharEc>:
    14e8:	ef 92       	push	r14
    14ea:	ff 92       	push	r15
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	a4 97       	sbiw	r28, 0x24	; 36
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	08 2f       	mov	r16, r24
    1506:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <_ZN3Lcd6cursorE>
    150a:	1c e0       	ldi	r17, 0x0C	; 12
    150c:	81 9f       	mul	r24, r17
    150e:	10 2d       	mov	r17, r0
    1510:	11 24       	eor	r1, r1
    1512:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <_ZN3Lcd6cursorE+0x2>
    1516:	88 0f       	add	r24, r24
    1518:	88 0f       	add	r24, r24
    151a:	88 0f       	add	r24, r24
    151c:	f8 94       	cli
    151e:	19 82       	std	Y+1, r1	; 0x01
    1520:	8a 83       	std	Y+2, r24	; 0x02
    1522:	1b 82       	std	Y+3, r1	; 0x03
    1524:	89 5f       	subi	r24, 0xF9	; 249
    1526:	8c 83       	std	Y+4, r24	; 0x04
    1528:	8a e2       	ldi	r24, 0x2A	; 42
    152a:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN3Lcd7sendCmdEh>
    152e:	64 e0       	ldi	r22, 0x04	; 4
    1530:	ce 01       	movw	r24, r28
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN3Lcd8sendDataEPhh>
    1538:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN3Lcd8cmpltCmdEv>
    153c:	19 82       	std	Y+1, r1	; 0x01
    153e:	1a 83       	std	Y+2, r17	; 0x02
    1540:	1b 82       	std	Y+3, r1	; 0x03
    1542:	15 5f       	subi	r17, 0xF5	; 245
    1544:	1c 83       	std	Y+4, r17	; 0x04
    1546:	8b e2       	ldi	r24, 0x2B	; 43
    1548:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN3Lcd7sendCmdEh>
    154c:	64 e0       	ldi	r22, 0x04	; 4
    154e:	ce 01       	movw	r24, r28
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN3Lcd8sendDataEPhh>
    1556:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN3Lcd8cmpltCmdEv>
    155a:	be 01       	movw	r22, r28
    155c:	67 5e       	subi	r22, 0xE7	; 231
    155e:	7f 4f       	sbci	r23, 0xFF	; 255
    1560:	80 2f       	mov	r24, r16
    1562:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_getPixels>
    1566:	8c e2       	ldi	r24, 0x2C	; 44
    1568:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN3Lcd7sendCmdEh>
    156c:	8e 01       	movw	r16, r28
    156e:	07 5e       	subi	r16, 0xE7	; 231
    1570:	1f 4f       	sbci	r17, 0xFF	; 255
    1572:	7e 01       	movw	r14, r28
    1574:	85 e2       	ldi	r24, 0x25	; 37
    1576:	e8 0e       	add	r14, r24
    1578:	f1 1c       	adc	r15, r1
    157a:	f8 01       	movw	r30, r16
    157c:	91 91       	ld	r25, Z+
    157e:	8f 01       	movw	r16, r30
    1580:	20 91 5f 03 	lds	r18, 0x035F	; 0x80035f <_ZN3Lcd7fgColorE>
    1584:	30 91 60 03 	lds	r19, 0x0360	; 0x800360 <_ZN3Lcd7fgColorE+0x1>
    1588:	40 91 61 03 	lds	r20, 0x0361	; 0x800361 <_ZN3Lcd7fgColorE+0x2>
    158c:	50 91 5c 03 	lds	r21, 0x035C	; 0x80035c <_ZN3Lcd7bgColorE>
    1590:	60 91 5d 03 	lds	r22, 0x035D	; 0x80035d <_ZN3Lcd7bgColorE+0x1>
    1594:	70 91 5e 03 	lds	r23, 0x035E	; 0x80035e <_ZN3Lcd7bgColorE+0x2>
    1598:	fe 01       	movw	r30, r28
    159a:	31 96       	adiw	r30, 0x01	; 1
    159c:	83 e0       	ldi	r24, 0x03	; 3
    159e:	90 ff       	sbrs	r25, 0
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <_ZN3Lcd11lcd_putcharEc+0xc2>
    15a2:	20 83       	st	Z, r18
    15a4:	31 83       	std	Z+1, r19	; 0x01
    15a6:	42 83       	std	Z+2, r20	; 0x02
    15a8:	03 c0       	rjmp	.+6      	; 0x15b0 <_ZN3Lcd11lcd_putcharEc+0xc8>
    15aa:	50 83       	st	Z, r21
    15ac:	61 83       	std	Z+1, r22	; 0x01
    15ae:	72 83       	std	Z+2, r23	; 0x02
    15b0:	96 95       	lsr	r25
    15b2:	8d 5f       	subi	r24, 0xFD	; 253
    15b4:	33 96       	adiw	r30, 0x03	; 3
    15b6:	8b 31       	cpi	r24, 0x1B	; 27
    15b8:	91 f7       	brne	.-28     	; 0x159e <_ZN3Lcd11lcd_putcharEc+0xb6>
    15ba:	68 e1       	ldi	r22, 0x18	; 24
    15bc:	ce 01       	movw	r24, r28
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN3Lcd8sendDataEPhh>
    15c4:	0e 15       	cp	r16, r14
    15c6:	1f 05       	cpc	r17, r15
    15c8:	c1 f6       	brne	.-80     	; 0x157a <_ZN3Lcd11lcd_putcharEc+0x92>
    15ca:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN3Lcd8cmpltCmdEv>
    15ce:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <_ZN3Lcd6cursorE+0x2>
    15d2:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <_ZN3Lcd6cursorE+0x3>
    15d6:	01 96       	adiw	r24, 0x01	; 1
    15d8:	84 31       	cpi	r24, 0x14	; 20
    15da:	91 05       	cpc	r25, r1
    15dc:	29 f0       	breq	.+10     	; 0x15e8 <_ZN3Lcd11lcd_putcharEc+0x100>
    15de:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <_ZN3Lcd6cursorE+0x3>
    15e2:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <_ZN3Lcd6cursorE+0x2>
    15e6:	15 c0       	rjmp	.+42     	; 0x1612 <_ZN3Lcd11lcd_putcharEc+0x12a>
    15e8:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <_ZN3Lcd6cursorE+0x3>
    15ec:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <_ZN3Lcd6cursorE+0x2>
    15f0:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <_ZN3Lcd6cursorE>
    15f4:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <_ZN3Lcd6cursorE+0x1>
    15f8:	01 96       	adiw	r24, 0x01	; 1
    15fa:	8a 30       	cpi	r24, 0x0A	; 10
    15fc:	91 05       	cpc	r25, r1
    15fe:	29 f0       	breq	.+10     	; 0x160a <_ZN3Lcd11lcd_putcharEc+0x122>
    1600:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <_ZN3Lcd6cursorE+0x1>
    1604:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <_ZN3Lcd6cursorE>
    1608:	04 c0       	rjmp	.+8      	; 0x1612 <_ZN3Lcd11lcd_putcharEc+0x12a>
    160a:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <_ZN3Lcd6cursorE+0x1>
    160e:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN3Lcd6cursorE>
    1612:	78 94       	sei
    1614:	a4 96       	adiw	r28, 0x24	; 36
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	ff 90       	pop	r15
    162a:	ef 90       	pop	r14
    162c:	08 95       	ret

0000162e <_ZN3Lcd8drawCharEchhh9_pixColorS0_>:
    162e:	6f 92       	push	r6
    1630:	7f 92       	push	r7
    1632:	8f 92       	push	r8
    1634:	9f 92       	push	r9
    1636:	af 92       	push	r10
    1638:	cf 92       	push	r12
    163a:	df 92       	push	r13
    163c:	ef 92       	push	r14
    163e:	ff 92       	push	r15
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	a4 97       	sbiw	r28, 0x24	; 36
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	76 2e       	mov	r7, r22
    165a:	f4 2e       	mov	r15, r20
    165c:	12 2f       	mov	r17, r18
    165e:	44 23       	and	r20, r20
    1660:	59 f0       	breq	.+22     	; 0x1678 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x4a>
    1662:	10 91 58 03 	lds	r17, 0x0358	; 0x800358 <_ZN3Lcd6cursorE>
    1666:	8c e0       	ldi	r24, 0x0C	; 12
    1668:	18 9f       	mul	r17, r24
    166a:	10 2d       	mov	r17, r0
    166c:	11 24       	eor	r1, r1
    166e:	00 91 5a 03 	lds	r16, 0x035A	; 0x80035a <_ZN3Lcd6cursorE+0x2>
    1672:	00 0f       	add	r16, r16
    1674:	00 0f       	add	r16, r16
    1676:	00 0f       	add	r16, r16
    1678:	f8 94       	cli
    167a:	19 82       	std	Y+1, r1	; 0x01
    167c:	0a 83       	std	Y+2, r16	; 0x02
    167e:	1b 82       	std	Y+3, r1	; 0x03
    1680:	09 5f       	subi	r16, 0xF9	; 249
    1682:	0c 83       	std	Y+4, r16	; 0x04
    1684:	8a e2       	ldi	r24, 0x2A	; 42
    1686:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN3Lcd7sendCmdEh>
    168a:	64 e0       	ldi	r22, 0x04	; 4
    168c:	ce 01       	movw	r24, r28
    168e:	01 96       	adiw	r24, 0x01	; 1
    1690:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN3Lcd8sendDataEPhh>
    1694:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN3Lcd8cmpltCmdEv>
    1698:	19 82       	std	Y+1, r1	; 0x01
    169a:	1a 83       	std	Y+2, r17	; 0x02
    169c:	1b 82       	std	Y+3, r1	; 0x03
    169e:	15 5f       	subi	r17, 0xF5	; 245
    16a0:	1c 83       	std	Y+4, r17	; 0x04
    16a2:	8b e2       	ldi	r24, 0x2B	; 43
    16a4:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN3Lcd7sendCmdEh>
    16a8:	64 e0       	ldi	r22, 0x04	; 4
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN3Lcd8sendDataEPhh>
    16b2:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN3Lcd8cmpltCmdEv>
    16b6:	be 01       	movw	r22, r28
    16b8:	67 5e       	subi	r22, 0xE7	; 231
    16ba:	7f 4f       	sbci	r23, 0xFF	; 255
    16bc:	87 2d       	mov	r24, r7
    16be:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_getPixels>
    16c2:	8c e2       	ldi	r24, 0x2C	; 44
    16c4:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN3Lcd7sendCmdEh>
    16c8:	8e 01       	movw	r16, r28
    16ca:	07 5e       	subi	r16, 0xE7	; 231
    16cc:	1f 4f       	sbci	r17, 0xFF	; 255
    16ce:	3e 01       	movw	r6, r28
    16d0:	85 e2       	ldi	r24, 0x25	; 37
    16d2:	68 0e       	add	r6, r24
    16d4:	71 1c       	adc	r7, r1
    16d6:	f8 01       	movw	r30, r16
    16d8:	91 91       	ld	r25, Z+
    16da:	8f 01       	movw	r16, r30
    16dc:	fe 01       	movw	r30, r28
    16de:	31 96       	adiw	r30, 0x01	; 1
    16e0:	83 e0       	ldi	r24, 0x03	; 3
    16e2:	90 ff       	sbrs	r25, 0
    16e4:	04 c0       	rjmp	.+8      	; 0x16ee <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0xc0>
    16e6:	c0 82       	st	Z, r12
    16e8:	d1 82       	std	Z+1, r13	; 0x01
    16ea:	e2 82       	std	Z+2, r14	; 0x02
    16ec:	03 c0       	rjmp	.+6      	; 0x16f4 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0xc6>
    16ee:	80 82       	st	Z, r8
    16f0:	91 82       	std	Z+1, r9	; 0x01
    16f2:	a2 82       	std	Z+2, r10	; 0x02
    16f4:	96 95       	lsr	r25
    16f6:	8d 5f       	subi	r24, 0xFD	; 253
    16f8:	33 96       	adiw	r30, 0x03	; 3
    16fa:	8b 31       	cpi	r24, 0x1B	; 27
    16fc:	91 f7       	brne	.-28     	; 0x16e2 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0xb4>
    16fe:	68 e1       	ldi	r22, 0x18	; 24
    1700:	ce 01       	movw	r24, r28
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN3Lcd8sendDataEPhh>
    1708:	06 15       	cp	r16, r6
    170a:	17 05       	cpc	r17, r7
    170c:	21 f7       	brne	.-56     	; 0x16d6 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0xa8>
    170e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN3Lcd8cmpltCmdEv>
    1712:	ff 20       	and	r15, r15
    1714:	11 f1       	breq	.+68     	; 0x175a <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x12c>
    1716:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <_ZN3Lcd6cursorE+0x2>
    171a:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <_ZN3Lcd6cursorE+0x3>
    171e:	01 96       	adiw	r24, 0x01	; 1
    1720:	84 31       	cpi	r24, 0x14	; 20
    1722:	91 05       	cpc	r25, r1
    1724:	29 f0       	breq	.+10     	; 0x1730 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x102>
    1726:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <_ZN3Lcd6cursorE+0x3>
    172a:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <_ZN3Lcd6cursorE+0x2>
    172e:	15 c0       	rjmp	.+42     	; 0x175a <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x12c>
    1730:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <_ZN3Lcd6cursorE+0x3>
    1734:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <_ZN3Lcd6cursorE+0x2>
    1738:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <_ZN3Lcd6cursorE>
    173c:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <_ZN3Lcd6cursorE+0x1>
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	8a 30       	cpi	r24, 0x0A	; 10
    1744:	91 05       	cpc	r25, r1
    1746:	29 f0       	breq	.+10     	; 0x1752 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x124>
    1748:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <_ZN3Lcd6cursorE+0x1>
    174c:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <_ZN3Lcd6cursorE>
    1750:	04 c0       	rjmp	.+8      	; 0x175a <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x12c>
    1752:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <_ZN3Lcd6cursorE+0x1>
    1756:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN3Lcd6cursorE>
    175a:	78 94       	sei
    175c:	a4 96       	adiw	r28, 0x24	; 36
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	ff 90       	pop	r15
    1772:	ef 90       	pop	r14
    1774:	df 90       	pop	r13
    1776:	cf 90       	pop	r12
    1778:	af 90       	pop	r10
    177a:	9f 90       	pop	r9
    177c:	8f 90       	pop	r8
    177e:	7f 90       	pop	r7
    1780:	6f 90       	pop	r6
    1782:	08 95       	ret

00001784 <_ZN3Lcd8drawCharEchhh>:
    1784:	8f 92       	push	r8
    1786:	9f 92       	push	r9
    1788:	af 92       	push	r10
    178a:	cf 92       	push	r12
    178c:	df 92       	push	r13
    178e:	ef 92       	push	r14
    1790:	0f 93       	push	r16
    1792:	80 90 5c 03 	lds	r8, 0x035C	; 0x80035c <_ZN3Lcd7bgColorE>
    1796:	90 90 5d 03 	lds	r9, 0x035D	; 0x80035d <_ZN3Lcd7bgColorE+0x1>
    179a:	a0 90 5e 03 	lds	r10, 0x035E	; 0x80035e <_ZN3Lcd7bgColorE+0x2>
    179e:	c0 90 5f 03 	lds	r12, 0x035F	; 0x80035f <_ZN3Lcd7fgColorE>
    17a2:	d0 90 60 03 	lds	r13, 0x0360	; 0x800360 <_ZN3Lcd7fgColorE+0x1>
    17a6:	e0 90 61 03 	lds	r14, 0x0361	; 0x800361 <_ZN3Lcd7fgColorE+0x2>
    17aa:	0e 94 17 0b 	call	0x162e	; 0x162e <_ZN3Lcd8drawCharEchhh9_pixColorS0_>
    17ae:	0f 91       	pop	r16
    17b0:	ef 90       	pop	r14
    17b2:	df 90       	pop	r13
    17b4:	cf 90       	pop	r12
    17b6:	af 90       	pop	r10
    17b8:	9f 90       	pop	r9
    17ba:	8f 90       	pop	r8
    17bc:	08 95       	ret

000017be <_ZN3Lcd7clrScrnEv>:
    17be:	6f 92       	push	r6
    17c0:	7f 92       	push	r7
    17c2:	8f 92       	push	r8
    17c4:	ef 92       	push	r14
    17c6:	ff 92       	push	r15
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	27 97       	sbiw	r28, 0x07	; 7
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	60 90 5c 03 	lds	r6, 0x035C	; 0x80035c <_ZN3Lcd7bgColorE>
    17e4:	70 90 5d 03 	lds	r7, 0x035D	; 0x80035d <_ZN3Lcd7bgColorE+0x1>
    17e8:	80 90 5e 03 	lds	r8, 0x035E	; 0x80035e <_ZN3Lcd7bgColorE+0x2>
    17ec:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <_ZN3Lcd7bgColorE>
    17f0:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <_ZN3Lcd7bgColorE+0x1>
    17f4:	8c e4       	ldi	r24, 0x4C	; 76
    17f6:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <_ZN3Lcd7bgColorE+0x2>
    17fa:	f8 94       	cli
    17fc:	19 82       	std	Y+1, r1	; 0x01
    17fe:	1a 82       	std	Y+2, r1	; 0x02
    1800:	1b 82       	std	Y+3, r1	; 0x03
    1802:	80 ea       	ldi	r24, 0xA0	; 160
    1804:	8c 83       	std	Y+4, r24	; 0x04
    1806:	8a e2       	ldi	r24, 0x2A	; 42
    1808:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN3Lcd7sendCmdEh>
    180c:	64 e0       	ldi	r22, 0x04	; 4
    180e:	ce 01       	movw	r24, r28
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN3Lcd8sendDataEPhh>
    1816:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN3Lcd8cmpltCmdEv>
    181a:	19 82       	std	Y+1, r1	; 0x01
    181c:	1a 82       	std	Y+2, r1	; 0x02
    181e:	1b 82       	std	Y+3, r1	; 0x03
    1820:	80 e8       	ldi	r24, 0x80	; 128
    1822:	8c 83       	std	Y+4, r24	; 0x04
    1824:	8b e2       	ldi	r24, 0x2B	; 43
    1826:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN3Lcd7sendCmdEh>
    182a:	64 e0       	ldi	r22, 0x04	; 4
    182c:	ce 01       	movw	r24, r28
    182e:	01 96       	adiw	r24, 0x01	; 1
    1830:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN3Lcd8sendDataEPhh>
    1834:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN3Lcd8cmpltCmdEv>
    1838:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <_ZN3Lcd7bgColorE>
    183c:	8d 83       	std	Y+5, r24	; 0x05
    183e:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <_ZN3Lcd7bgColorE+0x1>
    1842:	8e 83       	std	Y+6, r24	; 0x06
    1844:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <_ZN3Lcd7bgColorE+0x2>
    1848:	8f 83       	std	Y+7, r24	; 0x07
    184a:	8c e2       	ldi	r24, 0x2C	; 44
    184c:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN3Lcd7sendCmdEh>
    1850:	00 e8       	ldi	r16, 0x80	; 128
    1852:	10 e0       	ldi	r17, 0x00	; 0
    1854:	80 ea       	ldi	r24, 0xA0	; 160
    1856:	e8 2e       	mov	r14, r24
    1858:	f1 2c       	mov	r15, r1
    185a:	63 e0       	ldi	r22, 0x03	; 3
    185c:	ce 01       	movw	r24, r28
    185e:	05 96       	adiw	r24, 0x05	; 5
    1860:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN3Lcd8sendDataEPhh>
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	e8 1a       	sub	r14, r24
    1868:	f1 08       	sbc	r15, r1
    186a:	b9 f7       	brne	.-18     	; 0x185a <_ZN3Lcd7clrScrnEv+0x9c>
    186c:	01 50       	subi	r16, 0x01	; 1
    186e:	11 09       	sbc	r17, r1
    1870:	89 f7       	brne	.-30     	; 0x1854 <_ZN3Lcd7clrScrnEv+0x96>
    1872:	78 94       	sei
    1874:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <_ZN3Lcd6cursorE+0x1>
    1878:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN3Lcd6cursorE>
    187c:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <_ZN3Lcd6cursorE+0x3>
    1880:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <_ZN3Lcd6cursorE+0x2>
    1884:	60 92 5c 03 	sts	0x035C, r6	; 0x80035c <_ZN3Lcd7bgColorE>
    1888:	70 92 5d 03 	sts	0x035D, r7	; 0x80035d <_ZN3Lcd7bgColorE+0x1>
    188c:	80 92 5e 03 	sts	0x035E, r8	; 0x80035e <_ZN3Lcd7bgColorE+0x2>
    1890:	27 96       	adiw	r28, 0x07	; 7
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	de bf       	out	0x3e, r29	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	cd bf       	out	0x3d, r28	; 61
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	ff 90       	pop	r15
    18a6:	ef 90       	pop	r14
    18a8:	8f 90       	pop	r8
    18aa:	7f 90       	pop	r7
    18ac:	6f 90       	pop	r6
    18ae:	08 95       	ret

000018b0 <_ZN3LcdC1Ev>:
    18b0:	0f 93       	push	r16
    18b2:	1f 93       	push	r17
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	1f 92       	push	r1
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <_ZN3Lcd14lcdInitializedE>
    18c2:	21 11       	cpse	r18, r1
    18c4:	4b c0       	rjmp	.+150    	; 0x195c <_ZN3LcdC1Ev+0xac>
    18c6:	8c 01       	movw	r16, r24
    18c8:	8a b1       	in	r24, 0x0a	; 10
    18ca:	89 83       	std	Y+1, r24	; 0x01
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	8c 67       	ori	r24, 0x7C	; 124
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	8a b9       	out	0x0a, r24	; 10
    18d6:	8b b1       	in	r24, 0x0b	; 11
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	83 78       	andi	r24, 0x83	; 131
    18de:	89 83       	std	Y+1, r24	; 0x01
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	80 66       	ori	r24, 0x60	; 96
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	8b b9       	out	0x0b, r24	; 11
    18ea:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <vfoDataConst+0xa5>
    18ee:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <vfoDataConst+0xa6>
    18f2:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <vfoDataConst+0xa7>
    18f6:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <_ZN3Lcd7fgColorE>
    18fa:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <_ZN3Lcd7fgColorE+0x1>
    18fe:	a0 93 61 03 	sts	0x0361, r26	; 0x800361 <_ZN3Lcd7fgColorE+0x2>
    1902:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <_ZN3Lcd7bgColorE>
    1906:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <_ZN3Lcd7bgColorE+0x1>
    190a:	8c e4       	ldi	r24, 0x4C	; 76
    190c:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <_ZN3Lcd7bgColorE+0x2>
    1910:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <_ZN3Lcd6cursorE+0x3>
    1914:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <_ZN3Lcd6cursorE+0x2>
    1918:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <_ZN3Lcd6cursorE+0x1>
    191c:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN3Lcd6cursorE>
    1920:	c8 01       	movw	r24, r16
    1922:	0e 94 bd 09 	call	0x137a	; 0x137a <_ZN3Lcd5resetEv>
    1926:	c8 01       	movw	r24, r16
    1928:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <_ZN3Lcd10mem_accessEv>
    192c:	6c e0       	ldi	r22, 0x0C	; 12
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0e 94 16 04 	call	0x82c	; 0x82c <_ZN5Clock5delayEm>
    1938:	c8 01       	movw	r24, r16
    193a:	0e 94 49 0a 	call	0x1492	; 0x1492 <_ZN3Lcd9sleep_outEv>
    193e:	6c e0       	ldi	r22, 0x0C	; 12
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 16 04 	call	0x82c	; 0x82c <_ZN5Clock5delayEm>
    194a:	c8 01       	movw	r24, r16
    194c:	0e 94 41 0a 	call	0x1482	; 0x1482 <_ZN3Lcd2onEv>
    1950:	c8 01       	movw	r24, r16
    1952:	0e 94 df 0b 	call	0x17be	; 0x17be <_ZN3Lcd7clrScrnEv>
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <_ZN3Lcd14lcdInitializedE>
    195c:	0f 90       	pop	r0
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	1f 91       	pop	r17
    1964:	0f 91       	pop	r16
    1966:	08 95       	ret

00001968 <_ZN3Lcd4putsEPc>:
    1968:	ef 92       	push	r14
    196a:	ff 92       	push	r15
    196c:	0f 93       	push	r16
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	7c 01       	movw	r14, r24
    1974:	eb 01       	movw	r28, r22
    1976:	69 91       	ld	r22, Y+
    1978:	66 23       	and	r22, r22
    197a:	49 f0       	breq	.+18     	; 0x198e <_ZN3Lcd4putsEPc+0x26>
    197c:	00 91 5a 03 	lds	r16, 0x035A	; 0x80035a <_ZN3Lcd6cursorE+0x2>
    1980:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <_ZN3Lcd6cursorE>
    1984:	41 e0       	ldi	r20, 0x01	; 1
    1986:	c7 01       	movw	r24, r14
    1988:	0e 94 c2 0b 	call	0x1784	; 0x1784 <_ZN3Lcd8drawCharEchhh>
    198c:	f4 cf       	rjmp	.-24     	; 0x1976 <_ZN3Lcd4putsEPc+0xe>
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	0f 91       	pop	r16
    1994:	ff 90       	pop	r15
    1996:	ef 90       	pop	r14
    1998:	08 95       	ret

0000199a <_ZN3Lcd4putsEPc9_pixColorS1_>:
    199a:	2f 92       	push	r2
    199c:	3f 92       	push	r3
    199e:	4f 92       	push	r4
    19a0:	5f 92       	push	r5
    19a2:	6f 92       	push	r6
    19a4:	8f 92       	push	r8
    19a6:	9f 92       	push	r9
    19a8:	af 92       	push	r10
    19aa:	cf 92       	push	r12
    19ac:	df 92       	push	r13
    19ae:	ef 92       	push	r14
    19b0:	ff 92       	push	r15
    19b2:	0f 93       	push	r16
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <_ZN3Lcd4putsEPc9_pixColorS1_+0x20>
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <_ZN3Lcd4putsEPc9_pixColorS1_+0x22>
    19bc:	1f 92       	push	r1
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	9d 83       	std	Y+5, r25	; 0x05
    19c4:	8c 83       	std	Y+4, r24	; 0x04
    19c6:	29 01       	movw	r4, r18
    19c8:	64 2e       	mov	r6, r20
    19ca:	e9 82       	std	Y+1, r14	; 0x01
    19cc:	fa 82       	std	Y+2, r15	; 0x02
    19ce:	0b 83       	std	Y+3, r16	; 0x03
    19d0:	1b 01       	movw	r2, r22
    19d2:	f1 01       	movw	r30, r2
    19d4:	61 91       	ld	r22, Z+
    19d6:	1f 01       	movw	r2, r30
    19d8:	66 23       	and	r22, r22
    19da:	79 f0       	breq	.+30     	; 0x19fa <_ZN3Lcd4putsEPc9_pixColorS1_+0x60>
    19dc:	89 80       	ldd	r8, Y+1	; 0x01
    19de:	9a 80       	ldd	r9, Y+2	; 0x02
    19e0:	ab 80       	ldd	r10, Y+3	; 0x03
    19e2:	e6 2c       	mov	r14, r6
    19e4:	62 01       	movw	r12, r4
    19e6:	00 91 5a 03 	lds	r16, 0x035A	; 0x80035a <_ZN3Lcd6cursorE+0x2>
    19ea:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <_ZN3Lcd6cursorE>
    19ee:	41 e0       	ldi	r20, 0x01	; 1
    19f0:	8c 81       	ldd	r24, Y+4	; 0x04
    19f2:	9d 81       	ldd	r25, Y+5	; 0x05
    19f4:	0e 94 17 0b 	call	0x162e	; 0x162e <_ZN3Lcd8drawCharEchhh9_pixColorS0_>
    19f8:	ec cf       	rjmp	.-40     	; 0x19d2 <_ZN3Lcd4putsEPc9_pixColorS1_+0x38>
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	ef 90       	pop	r14
    1a0e:	df 90       	pop	r13
    1a10:	cf 90       	pop	r12
    1a12:	af 90       	pop	r10
    1a14:	9f 90       	pop	r9
    1a16:	8f 90       	pop	r8
    1a18:	6f 90       	pop	r6
    1a1a:	5f 90       	pop	r5
    1a1c:	4f 90       	pop	r4
    1a1e:	3f 90       	pop	r3
    1a20:	2f 90       	pop	r2
    1a22:	08 95       	ret

00001a24 <_ZN3Lcd6gotoxyEhh>:
    1a24:	e8 e5       	ldi	r30, 0x58	; 88
    1a26:	f3 e0       	ldi	r31, 0x03	; 3
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	71 83       	std	Z+1, r23	; 0x01
    1a2c:	60 83       	st	Z, r22
    1a2e:	50 e0       	ldi	r21, 0x00	; 0
    1a30:	53 83       	std	Z+3, r21	; 0x03
    1a32:	42 83       	std	Z+2, r20	; 0x02
    1a34:	08 95       	ret

00001a36 <_Z8lcd_putccP6__file>:

//
// fprintf wrapper
//
int lcd_putc(char c, FILE *f) {
	Lcd::lcd_putchar(c);
    1a36:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN3Lcd11lcd_putcharEc>
	return 0;
}
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	08 95       	ret

00001a40 <_ZN6params8callbackEv>:
	initParams(l);
}


void params::callback(void) {
	exitParamMode = true;
    1a40:	84 5b       	subi	r24, 0xB4	; 180
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	21 e0       	ldi	r18, 0x01	; 1
    1a46:	fc 01       	movw	r30, r24
    1a48:	20 83       	st	Z, r18
    1a4a:	08 95       	ret

00001a4c <_Z6memcpyPvPKvj>:
	"PD"
};



void * memcpy(void *dest, const void* src, size_t cnt) {
    1a4c:	fb 01       	movw	r30, r22
    1a4e:	dc 01       	movw	r26, r24
    1a50:	48 0f       	add	r20, r24
    1a52:	59 1f       	adc	r21, r25
	char *pdst = (char *) dest;
	char *psrc = (char *)src;

	while (cnt--) {
    1a54:	a4 17       	cp	r26, r20
    1a56:	b5 07       	cpc	r27, r21
    1a58:	19 f0       	breq	.+6      	; 0x1a60 <_Z6memcpyPvPKvj+0x14>
		*pdst++ = *psrc++;
    1a5a:	21 91       	ld	r18, Z+
    1a5c:	2d 93       	st	X+, r18

void * memcpy(void *dest, const void* src, size_t cnt) {
	char *pdst = (char *) dest;
	char *psrc = (char *)src;

	while (cnt--) {
    1a5e:	fa cf       	rjmp	.-12     	; 0x1a54 <_Z6memcpyPvPKvj+0x8>
		*pdst++ = *psrc++;
	}
	return dest;
}
    1a60:	08 95       	ret

00001a62 <_ZN6params10initParamsEP3Lcd>:

void params::callback(void) {
	exitParamMode = true;
}

void params::initParams(Lcd *lcd) {
    1a62:	2f 92       	push	r2
    1a64:	3f 92       	push	r3
    1a66:	4f 92       	push	r4
    1a68:	5f 92       	push	r5
    1a6a:	6f 92       	push	r6
    1a6c:	7f 92       	push	r7
    1a6e:	8f 92       	push	r8
    1a70:	9f 92       	push	r9
    1a72:	af 92       	push	r10
    1a74:	bf 92       	push	r11
    1a76:	cf 92       	push	r12
    1a78:	df 92       	push	r13
    1a7a:	ef 92       	push	r14
    1a7c:	ff 92       	push	r15
    1a7e:	0f 93       	push	r16
    1a80:	1f 93       	push	r17
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	62 97       	sbiw	r28, 0x12	; 18
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	6c 01       	movw	r12, r24
    1a98:	4b 01       	movw	r8, r22
	uint16_t line;
	uint16_t col;
	char *valp = NULL;
	char buf[16];

	curParam = PARAM_STEP;
    1a9a:	5c 01       	movw	r10, r24
    1a9c:	2b e4       	ldi	r18, 0x4B	; 75
    1a9e:	a2 0e       	add	r10, r18
    1aa0:	b1 1c       	adc	r11, r1
    1aa2:	d5 01       	movw	r26, r10
    1aa4:	1c 92       	st	X, r1
}

void params::initParams(Lcd *lcd) {
	uint16_t line;
	uint16_t col;
	char *valp = NULL;
    1aa6:	31 2c       	mov	r3, r1
    1aa8:	10 e0       	ldi	r17, 0x00	; 0

	curParam = PARAM_STEP;

	while (curParam != PARAM_END) {
		line = param_display[curParam].label_psn.line;
		col =  param_display[curParam].label_psn.col;
    1aaa:	5b e0       	ldi	r21, 0x0B	; 11
    1aac:	25 2e       	mov	r2, r21
		lcd->gotoxy(line,col);
		lcd->puts(param_display[curParam].label, fgc, bgc);
    1aae:	2c 01       	movw	r4, r24
    1ab0:	b5 e5       	ldi	r27, 0x55	; 85
    1ab2:	4b 0e       	add	r4, r27
    1ab4:	51 1c       	adc	r5, r1
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	ee 5a       	subi	r30, 0xAE	; 174
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	fa 8b       	std	Y+18, r31	; 0x12
    1abe:	e9 8b       	std	Y+17, r30	; 0x11
			case PARAM_KEY:
				valp = key_strings[key];
				break;
				
			case PARAM_KEY_SPEED:
				sprintf(buf,"%d", speed);
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	01 96       	adiw	r24, 0x01	; 1
    1ac4:	3c 01       	movw	r6, r24
	char *valp = NULL;
	char buf[16];

	curParam = PARAM_STEP;

	while (curParam != PARAM_END) {
    1ac6:	d5 01       	movw	r26, r10
    1ac8:	8c 91       	ld	r24, X
    1aca:	86 30       	cpi	r24, 0x06	; 6
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <_ZN6params10initParamsEP3Lcd+0x6e>
    1ace:	91 c0       	rjmp	.+290    	; 0x1bf2 <_ZN6params10initParamsEP3Lcd+0x190>
		line = param_display[curParam].label_psn.line;
		col =  param_display[curParam].label_psn.col;
    1ad0:	f6 01       	movw	r30, r12
    1ad2:	28 9e       	mul	r2, r24
    1ad4:	e0 0d       	add	r30, r0
    1ad6:	f1 1d       	adc	r31, r1
    1ad8:	11 24       	eor	r1, r1
		lcd->gotoxy(line,col);
    1ada:	44 85       	ldd	r20, Z+12	; 0x0c
    1adc:	62 85       	ldd	r22, Z+10	; 0x0a
    1ade:	c4 01       	movw	r24, r8
    1ae0:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_ZN3Lcd6gotoxyEhh>
		lcd->puts(param_display[curParam].label, fgc, bgc);
    1ae4:	f2 01       	movw	r30, r4
    1ae6:	e0 80       	ld	r14, Z
    1ae8:	f1 80       	ldd	r15, Z+1	; 0x01
    1aea:	02 81       	ldd	r16, Z+2	; 0x02
    1aec:	a9 89       	ldd	r26, Y+17	; 0x11
    1aee:	ba 89       	ldd	r27, Y+18	; 0x12
    1af0:	2d 91       	ld	r18, X+
    1af2:	3d 91       	ld	r19, X+
    1af4:	4c 91       	ld	r20, X
    1af6:	f5 01       	movw	r30, r10
    1af8:	80 81       	ld	r24, Z
    1afa:	f6 01       	movw	r30, r12
    1afc:	28 9e       	mul	r2, r24
    1afe:	e0 0d       	add	r30, r0
    1b00:	f1 1d       	adc	r31, r1
    1b02:	11 24       	eor	r1, r1
    1b04:	66 85       	ldd	r22, Z+14	; 0x0e
    1b06:	77 85       	ldd	r23, Z+15	; 0x0f
    1b08:	c4 01       	movw	r24, r8
    1b0a:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN3Lcd4putsEPc9_pixColorS1_>

		line = param_display[curParam].val_psn.line;
    1b0e:	d5 01       	movw	r26, r10
    1b10:	8c 91       	ld	r24, X
		col =  param_display[curParam].val_psn.col;
    1b12:	f6 01       	movw	r30, r12
    1b14:	28 9e       	mul	r2, r24
    1b16:	e0 0d       	add	r30, r0
    1b18:	f1 1d       	adc	r31, r1
    1b1a:	11 24       	eor	r1, r1
		lcd->gotoxy(line,col);
    1b1c:	42 89       	ldd	r20, Z+18	; 0x12
    1b1e:	60 89       	ldd	r22, Z+16	; 0x10
    1b20:	c4 01       	movw	r24, r8
    1b22:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_ZN3Lcd6gotoxyEhh>
		switch(curParam) {
    1b26:	f5 01       	movw	r30, r10
    1b28:	80 81       	ld	r24, Z
    1b2a:	82 30       	cpi	r24, 0x02	; 2
    1b2c:	31 f1       	breq	.+76     	; 0x1b7a <_ZN6params10initParamsEP3Lcd+0x118>
    1b2e:	70 f4       	brcc	.+28     	; 0x1b4c <_ZN6params10initParamsEP3Lcd+0xea>
    1b30:	88 23       	and	r24, r24
    1b32:	d1 f0       	breq	.+52     	; 0x1b68 <_ZN6params10initParamsEP3Lcd+0x106>
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <_ZN6params10initParamsEP3Lcd+0xd8>
    1b38:	49 c0       	rjmp	.+146    	; 0x1bcc <_ZN6params10initParamsEP3Lcd+0x16a>
			case PARAM_STEP:
				valp = step_strings[step];
				break;	
				
			case PARAM_BAND:
				valp = band_strings[band];
    1b3a:	d6 01       	movw	r26, r12
    1b3c:	13 96       	adiw	r26, 0x03	; 3
    1b3e:	ec 91       	ld	r30, X
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	ee 0f       	add	r30, r30
    1b44:	ff 1f       	adc	r31, r31
    1b46:	e2 5c       	subi	r30, 0xC2	; 194
    1b48:	fe 4f       	sbci	r31, 0xFE	; 254
    1b4a:	3e c0       	rjmp	.+124    	; 0x1bc8 <_ZN6params10initParamsEP3Lcd+0x166>
		lcd->puts(param_display[curParam].label, fgc, bgc);

		line = param_display[curParam].val_psn.line;
		col =  param_display[curParam].val_psn.col;
		lcd->gotoxy(line,col);
		switch(curParam) {
    1b4c:	84 30       	cpi	r24, 0x04	; 4
    1b4e:	39 f1       	breq	.+78     	; 0x1b9e <_ZN6params10initParamsEP3Lcd+0x13c>
    1b50:	e8 f0       	brcs	.+58     	; 0x1b8c <_ZN6params10initParamsEP3Lcd+0x12a>
    1b52:	85 30       	cpi	r24, 0x05	; 5
    1b54:	d9 f5       	brne	.+118    	; 0x1bcc <_ZN6params10initParamsEP3Lcd+0x16a>
				sprintf(buf,"%d", speed);
				valp = buf;
				break;
				
			case PARAM_ACT_VFO:
				valp =  vfoact_strings[activeVfo];
    1b56:	d6 01       	movw	r26, r12
    1b58:	15 96       	adiw	r26, 0x05	; 5
    1b5a:	ec 91       	ld	r30, X
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	ee 0f       	add	r30, r30
    1b60:	ff 1f       	adc	r31, r31
    1b62:	e6 5d       	subi	r30, 0xD6	; 214
    1b64:	fe 4f       	sbci	r31, 0xFE	; 254
    1b66:	30 c0       	rjmp	.+96     	; 0x1bc8 <_ZN6params10initParamsEP3Lcd+0x166>
		line = param_display[curParam].val_psn.line;
		col =  param_display[curParam].val_psn.col;
		lcd->gotoxy(line,col);
		switch(curParam) {
			case PARAM_STEP:
				valp = step_strings[step];
    1b68:	d6 01       	movw	r26, r12
    1b6a:	12 96       	adiw	r26, 0x02	; 2
    1b6c:	ec 91       	ld	r30, X
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	ee 0f       	add	r30, r30
    1b72:	ff 1f       	adc	r31, r31
    1b74:	ec 5c       	subi	r30, 0xCC	; 204
    1b76:	fe 4f       	sbci	r31, 0xFE	; 254
    1b78:	27 c0       	rjmp	.+78     	; 0x1bc8 <_ZN6params10initParamsEP3Lcd+0x166>
			case PARAM_BAND:
				valp = band_strings[band];
				break;
				
			case PARAM_VFO:
				valp = vfo_strings[vfo];
    1b7a:	d6 01       	movw	r26, r12
    1b7c:	14 96       	adiw	r26, 0x04	; 4
    1b7e:	ec 91       	ld	r30, X
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	ee 0f       	add	r30, r30
    1b84:	ff 1f       	adc	r31, r31
    1b86:	e2 5d       	subi	r30, 0xD2	; 210
    1b88:	fe 4f       	sbci	r31, 0xFE	; 254
    1b8a:	1e c0       	rjmp	.+60     	; 0x1bc8 <_ZN6params10initParamsEP3Lcd+0x166>
				break;
			
			case PARAM_KEY:
				valp = key_strings[key];
    1b8c:	d6 01       	movw	r26, r12
    1b8e:	17 96       	adiw	r26, 0x07	; 7
    1b90:	ec 91       	ld	r30, X
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	ee 0f       	add	r30, r30
    1b96:	ff 1f       	adc	r31, r31
    1b98:	ec 5d       	subi	r30, 0xDC	; 220
    1b9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9c:	15 c0       	rjmp	.+42     	; 0x1bc8 <_ZN6params10initParamsEP3Lcd+0x166>
				break;
				
			case PARAM_KEY_SPEED:
				sprintf(buf,"%d", speed);
    1b9e:	f6 01       	movw	r30, r12
    1ba0:	80 85       	ldd	r24, Z+8	; 0x08
    1ba2:	1f 92       	push	r1
    1ba4:	8f 93       	push	r24
    1ba6:	89 e7       	ldi	r24, 0x79	; 121
    1ba8:	92 e0       	ldi	r25, 0x02	; 2
    1baa:	9f 93       	push	r25
    1bac:	8f 93       	push	r24
    1bae:	7f 92       	push	r7
    1bb0:	6f 92       	push	r6
    1bb2:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sprintf>
				valp = buf;
				break;
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
				valp = key_strings[key];
				break;
				
			case PARAM_KEY_SPEED:
				sprintf(buf,"%d", speed);
				valp = buf;
    1bc2:	36 2c       	mov	r3, r6
    1bc4:	17 2d       	mov	r17, r7
				break;
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <_ZN6params10initParamsEP3Lcd+0x16a>
				
			case PARAM_ACT_VFO:
				valp =  vfoact_strings[activeVfo];
    1bc8:	30 80       	ld	r3, Z
    1bca:	11 81       	ldd	r17, Z+1	; 0x01
				break;
						
			default:
				break;
		}
		lcd->puts(valp, fgc,bgc);
    1bcc:	f2 01       	movw	r30, r4
    1bce:	e0 80       	ld	r14, Z
    1bd0:	f1 80       	ldd	r15, Z+1	; 0x01
    1bd2:	02 81       	ldd	r16, Z+2	; 0x02
    1bd4:	a9 89       	ldd	r26, Y+17	; 0x11
    1bd6:	ba 89       	ldd	r27, Y+18	; 0x12
    1bd8:	2d 91       	ld	r18, X+
    1bda:	3d 91       	ld	r19, X+
    1bdc:	4c 91       	ld	r20, X
    1bde:	63 2d       	mov	r22, r3
    1be0:	71 2f       	mov	r23, r17
    1be2:	c4 01       	movw	r24, r8
    1be4:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN3Lcd4putsEPc9_pixColorS1_>
		curParam = (param_t)((int)curParam + 1);
    1be8:	f5 01       	movw	r30, r10
    1bea:	80 81       	ld	r24, Z
    1bec:	8f 5f       	subi	r24, 0xFF	; 255
    1bee:	80 83       	st	Z, r24
	char *valp = NULL;
	char buf[16];

	curParam = PARAM_STEP;

	while (curParam != PARAM_END) {
    1bf0:	6a cf       	rjmp	.-300    	; 0x1ac6 <_ZN6params10initParamsEP3Lcd+0x64>
				break;
		}
		lcd->puts(valp, fgc,bgc);
		curParam = (param_t)((int)curParam + 1);
	}	
	curParam = PARAM_STEP;
    1bf2:	d5 01       	movw	r26, r10
    1bf4:	1c 92       	st	X, r1
}
    1bf6:	62 96       	adiw	r28, 0x12	; 18
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	ff 90       	pop	r15
    1c0c:	ef 90       	pop	r14
    1c0e:	df 90       	pop	r13
    1c10:	cf 90       	pop	r12
    1c12:	bf 90       	pop	r11
    1c14:	af 90       	pop	r10
    1c16:	9f 90       	pop	r9
    1c18:	8f 90       	pop	r8
    1c1a:	7f 90       	pop	r7
    1c1c:	6f 90       	pop	r6
    1c1e:	5f 90       	pop	r5
    1c20:	4f 90       	pop	r4
    1c22:	3f 90       	pop	r3
    1c24:	2f 90       	pop	r2
    1c26:	08 95       	ret

00001c28 <_ZN6paramsC1EP8Graphics>:
	}
	return dest;
}


params::params(Graphics *l) {
    1c28:	0f 93       	push	r16
    1c2a:	1f 93       	push	r17
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	ec 01       	movw	r28, r24
    1c32:	8b 01       	movw	r16, r22
    1c34:	85 ef       	ldi	r24, 0xF5	; 245
    1c36:	92 e0       	ldi	r25, 0x02	; 2
    1c38:	99 83       	std	Y+1, r25	; 0x01
    1c3a:	88 83       	st	Y, r24
	step = STEP_100HZ;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	8a 83       	std	Y+2, r24	; 0x02
	band = BAND_40;
    1c40:	82 e0       	ldi	r24, 0x02	; 2
    1c42:	8b 83       	std	Y+3, r24	; 0x03
	vfo = VFOA;
    1c44:	1c 82       	std	Y+4, r1	; 0x04
	activeVfo = RX;
    1c46:	1d 82       	std	Y+5, r1	; 0x05
	mode = MODE_NORMAL;
    1c48:	1e 82       	std	Y+6, r1	; 0x06
	key = KEY_ST;
    1c4a:	1f 82       	std	Y+7, r1	; 0x07
	speed = 18;
    1c4c:	82 e1       	ldi	r24, 0x12	; 18
    1c4e:	88 87       	std	Y+8, r24	; 0x08
	exitParamMode = false;
    1c50:	fe 01       	movw	r30, r28
    1c52:	e4 5b       	subi	r30, 0xB4	; 180
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	10 82       	st	Z, r1
	lcd = l;
    1c58:	34 96       	adiw	r30, 0x04	; 4
    1c5a:	71 83       	std	Z+1, r23	; 0x01
    1c5c:	60 83       	st	Z, r22
	tc = BLACK;
    1c5e:	38 96       	adiw	r30, 0x08	; 8
    1c60:	10 82       	st	Z, r1
    1c62:	31 96       	adiw	r30, 0x01	; 1
    1c64:	10 82       	st	Z, r1
    1c66:	31 96       	adiw	r30, 0x01	; 1
    1c68:	10 82       	st	Z, r1
	fgc = WHITE;
    1c6a:	38 97       	sbiw	r30, 0x08	; 8
    1c6c:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <vfoDataConst+0xa8>
    1c70:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <vfoDataConst+0xa9>
    1c74:	a0 91 3c 02 	lds	r26, 0x023C	; 0x80023c <vfoDataConst+0xaa>
    1c78:	80 83       	st	Z, r24
    1c7a:	91 83       	std	Z+1, r25	; 0x01
    1c7c:	a2 83       	std	Z+2, r26	; 0x02
	bgc = LTGREEN;
    1c7e:	33 96       	adiw	r30, 0x03	; 3
    1c80:	10 82       	st	Z, r1
    1c82:	31 96       	adiw	r30, 0x01	; 1
    1c84:	10 82       	st	Z, r1
    1c86:	31 96       	adiw	r30, 0x01	; 1
    1c88:	8c e4       	ldi	r24, 0x4C	; 76
    1c8a:	80 83       	st	Z, r24

	memcpy(param_display,default_param_display, sizeof(param_display));
    1c8c:	42 e4       	ldi	r20, 0x42	; 66
    1c8e:	50 e0       	ldi	r21, 0x00	; 0
    1c90:	60 e5       	ldi	r22, 0x50	; 80
    1c92:	71 e0       	ldi	r23, 0x01	; 1
    1c94:	ce 01       	movw	r24, r28
    1c96:	09 96       	adiw	r24, 0x09	; 9
    1c98:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <_Z6memcpyPvPKvj>
	initParams(l);
    1c9c:	b8 01       	movw	r22, r16
    1c9e:	ce 01       	movw	r24, r28
}
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
	tc = BLACK;
	fgc = WHITE;
	bgc = LTGREEN;

	memcpy(param_display,default_param_display, sizeof(param_display));
	initParams(l);
    1ca8:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <_ZN6params10initParamsEP3Lcd>

00001cac <_ZN6params7getStepEv>:
	curParam = PARAM_STEP;
}

step_t params::getStep(void) {
	return step;
}
    1cac:	fc 01       	movw	r30, r24
    1cae:	82 81       	ldd	r24, Z+2	; 0x02
    1cb0:	08 95       	ret

00001cb2 <_ZN6params7getBandEv>:
 	
	
band_t params::getBand(void) {
	return band;
}
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	83 81       	ldd	r24, Z+3	; 0x03
    1cb6:	08 95       	ret

00001cb8 <_ZN6params6getVfoEv>:
 	
	
vfo_select_t params::getVfo(void) {
	return vfo;
}
    1cb8:	fc 01       	movw	r30, r24
    1cba:	84 81       	ldd	r24, Z+4	; 0x04
    1cbc:	08 95       	ret

00001cbe <_ZN6params12getActiveVfoEv>:


vfo_actv_t params::getActiveVfo(void) {
	return activeVfo;
}
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	85 81       	ldd	r24, Z+5	; 0x05
    1cc2:	08 95       	ret

00001cc4 <_ZN6params7getModeEv>:
 	
	
mode_t	params::getMode(void) {
	return mode;
}
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	86 81       	ldd	r24, Z+6	; 0x06
    1cc8:	08 95       	ret

00001cca <_ZN6params7setModeE7_mode_t>:


void	params::setMode(mode_t newMode) {
	mode = newMode;
    1cca:	fc 01       	movw	r30, r24
    1ccc:	66 83       	std	Z+6, r22	; 0x06
    1cce:	08 95       	ret

00001cd0 <_ZN6params12setActiveVfoE10vfo_actv_t>:
}

void params::setActiveVfo(vfo_actv_t rxtx) {
    1cd0:	af 92       	push	r10
    1cd2:	bf 92       	push	r11
    1cd4:	cf 92       	push	r12
    1cd6:	df 92       	push	r13
    1cd8:	ef 92       	push	r14
    1cda:	ff 92       	push	r15
    1cdc:	0f 93       	push	r16
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	ec 01       	movw	r28, r24
char *valp = NULL;
uint16_t line;
uint16_t col;
pixColor pc;
	activeVfo = rxtx;
    1ce4:	6d 83       	std	Y+5, r22	; 0x05
	valp =  vfoact_strings[activeVfo];
    1ce6:	e6 2f       	mov	r30, r22
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	ee 0f       	add	r30, r30
    1cec:	ff 1f       	adc	r31, r31
    1cee:	e6 5d       	subi	r30, 0xD6	; 214
    1cf0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf2:	a0 80       	ld	r10, Z
    1cf4:	b1 80       	ldd	r11, Z+1	; 0x01
	line = param_display[PARAM_ACT_VFO].val_psn.line;
	col =  param_display[PARAM_ACT_VFO].val_psn.col;
    1cf6:	de 01       	movw	r26, r28
    1cf8:	a7 5b       	subi	r26, 0xB7	; 183
    1cfa:	bf 4f       	sbci	r27, 0xFF	; 255
uint16_t line;
uint16_t col;
pixColor pc;
	activeVfo = rxtx;
	valp =  vfoact_strings[activeVfo];
	line = param_display[PARAM_ACT_VFO].val_psn.line;
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e9 5b       	subi	r30, 0xB9	; 185
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
	col =  param_display[PARAM_ACT_VFO].val_psn.col;
	lcd->gotoxy(line,col);
    1d02:	6e 01       	movw	r12, r28
    1d04:	80 e5       	ldi	r24, 0x50	; 80
    1d06:	c8 0e       	add	r12, r24
    1d08:	d1 1c       	adc	r13, r1
    1d0a:	4c 91       	ld	r20, X
    1d0c:	60 81       	ld	r22, Z
    1d0e:	f6 01       	movw	r30, r12
    1d10:	80 81       	ld	r24, Z
    1d12:	91 81       	ldd	r25, Z+1	; 0x01
    1d14:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_ZN3Lcd6gotoxyEhh>
	if (activeVfo == RX) {
    1d18:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1a:	81 11       	cpse	r24, r1
    1d1c:	03 c0       	rjmp	.+6      	; 0x1d24 <_ZN6params12setActiveVfoE10vfo_actv_t+0x54>
		pc = GREEN;
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	3c ef       	ldi	r19, 0xFC	; 252
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <_ZN6params12setActiveVfoE10vfo_actv_t+0x58>
	} else {
		pc = RED;
    1d24:	2c ef       	ldi	r18, 0xFC	; 252
    1d26:	30 e0       	ldi	r19, 0x00	; 0
	}
	lcd->puts(valp,pc,bgc);
    1d28:	cb 5a       	subi	r28, 0xAB	; 171
    1d2a:	df 4f       	sbci	r29, 0xFF	; 255
    1d2c:	e8 80       	ld	r14, Y
    1d2e:	f9 80       	ldd	r15, Y+1	; 0x01
    1d30:	0a 81       	ldd	r16, Y+2	; 0x02
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	b5 01       	movw	r22, r10
    1d36:	f6 01       	movw	r30, r12
    1d38:	80 81       	ld	r24, Z
    1d3a:	91 81       	ldd	r25, Z+1	; 0x01
    1d3c:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN3Lcd4putsEPc9_pixColorS1_>
} 
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	0f 91       	pop	r16
    1d46:	ff 90       	pop	r15
    1d48:	ef 90       	pop	r14
    1d4a:	df 90       	pop	r13
    1d4c:	cf 90       	pop	r12
    1d4e:	bf 90       	pop	r11
    1d50:	af 90       	pop	r10
    1d52:	08 95       	ret

00001d54 <_ZN6params6updateEP7EncoderP2SwP3Lcd>:
	waitForOpen = false;
	update(enc, pb, lcd);
}


void params::update(Encoder *enc, Sw *pb, Lcd *lcd) {
    1d54:	2f 92       	push	r2
    1d56:	3f 92       	push	r3
    1d58:	4f 92       	push	r4
    1d5a:	5f 92       	push	r5
    1d5c:	6f 92       	push	r6
    1d5e:	7f 92       	push	r7
    1d60:	8f 92       	push	r8
    1d62:	9f 92       	push	r9
    1d64:	af 92       	push	r10
    1d66:	bf 92       	push	r11
    1d68:	cf 92       	push	r12
    1d6a:	df 92       	push	r13
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	60 97       	sbiw	r28, 0x10	; 16
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	6c 01       	movw	r12, r24
    1d8a:	5b 01       	movw	r10, r22
    1d8c:	3a 01       	movw	r6, r20
    1d8e:	49 01       	movw	r8, r18
	uint16_t line;
	uint16_t col;
	char *valp = NULL;
	char buf[16];

	tc = RED;
    1d90:	1c 01       	movw	r2, r24
    1d92:	88 e5       	ldi	r24, 0x58	; 88
    1d94:	28 0e       	add	r2, r24
    1d96:	31 1c       	adc	r3, r1
    1d98:	8c ef       	ldi	r24, 0xFC	; 252
    1d9a:	d1 01       	movw	r26, r2
    1d9c:	8c 93       	st	X, r24
    1d9e:	f6 01       	movw	r30, r12
    1da0:	e7 5a       	subi	r30, 0xA7	; 167
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	10 82       	st	Z, r1
    1da6:	31 96       	adiw	r30, 0x01	; 1
    1da8:	10 82       	st	Z, r1
	if(exitParamMode) {
    1daa:	26 01       	movw	r4, r12
    1dac:	bc e4       	ldi	r27, 0x4C	; 76
    1dae:	4b 0e       	add	r4, r27
    1db0:	51 1c       	adc	r5, r1
    1db2:	f2 01       	movw	r30, r4
    1db4:	80 81       	ld	r24, Z
    1db6:	88 23       	and	r24, r24
    1db8:	99 f1       	breq	.+102    	; 0x1e20 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0xcc>
		exitParamMode = false;
    1dba:	10 82       	st	Z, r1
		uint16_t line = param_display[curParam].label_psn.line;
    1dbc:	86 01       	movw	r16, r12
    1dbe:	05 5b       	subi	r16, 0xB5	; 181
    1dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc2:	d8 01       	movw	r26, r16
    1dc4:	8c 91       	ld	r24, X
		uint16_t col =  param_display[curParam].label_psn.col;
    1dc6:	5b e0       	ldi	r21, 0x0B	; 11
    1dc8:	f5 2e       	mov	r15, r21
    1dca:	f6 01       	movw	r30, r12
    1dcc:	f8 9e       	mul	r15, r24
    1dce:	e0 0d       	add	r30, r0
    1dd0:	f1 1d       	adc	r31, r1
    1dd2:	11 24       	eor	r1, r1

		lcd->gotoxy(line,col);
    1dd4:	44 85       	ldd	r20, Z+12	; 0x0c
    1dd6:	62 85       	ldd	r22, Z+10	; 0x0a
    1dd8:	c9 01       	movw	r24, r18
    1dda:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_ZN3Lcd6gotoxyEhh>
		lcd->puts(param_display[curParam].label, fgc, bgc);
    1dde:	f6 01       	movw	r30, r12
    1de0:	eb 5a       	subi	r30, 0xAB	; 171
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	80 81       	ld	r24, Z
    1de6:	91 81       	ldd	r25, Z+1	; 0x01
    1de8:	a2 81       	ldd	r26, Z+2	; 0x02
    1dea:	33 97       	sbiw	r30, 0x03	; 3
    1dec:	20 81       	ld	r18, Z
    1dee:	31 81       	ldd	r19, Z+1	; 0x01
    1df0:	42 81       	ldd	r20, Z+2	; 0x02
    1df2:	f8 01       	movw	r30, r16
    1df4:	50 81       	ld	r21, Z
    1df6:	f6 01       	movw	r30, r12
    1df8:	f5 9e       	mul	r15, r21
    1dfa:	e0 0d       	add	r30, r0
    1dfc:	f1 1d       	adc	r31, r1
    1dfe:	11 24       	eor	r1, r1
    1e00:	66 85       	ldd	r22, Z+14	; 0x0e
    1e02:	77 85       	ldd	r23, Z+15	; 0x0f
    1e04:	7c 01       	movw	r14, r24
    1e06:	0a 2f       	mov	r16, r26
    1e08:	c4 01       	movw	r24, r8
    1e0a:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN3Lcd4putsEPc9_pixColorS1_>
		waitForOpen = true;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	f6 01       	movw	r30, r12
    1e12:	e1 5b       	subi	r30, 0xB1	; 177
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	80 83       	st	Z, r24
		enc->setEventRate(4);
    1e18:	64 e0       	ldi	r22, 0x04	; 4
    1e1a:	c5 01       	movw	r24, r10
    1e1c:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN7Encoder12setEventRateEh>
	}

	if (pb->hasEvent()) {
    1e20:	c3 01       	movw	r24, r6
    1e22:	0e 94 90 11 	call	0x2320	; 0x2320 <_ZN2Sw8hasEventEv>
    1e26:	88 23       	and	r24, r24
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0xd8>
    1e2a:	81 c0       	rjmp	.+258    	; 0x1f2e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1da>
		if (pb->getEvent() == EV_CLOSE) {
    1e2c:	c3 01       	movw	r24, r6
    1e2e:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN2Sw8getEventEv>
    1e32:	82 30       	cpi	r24, 0x02	; 2
    1e34:	81 f4       	brne	.+32     	; 0x1e56 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x102>
			pb->clearEvent();
    1e36:	c3 01       	movw	r24, r6
    1e38:	0e 94 9b 11 	call	0x2336	; 0x2336 <_ZN2Sw10clearEventEv>
			timerHandle = Clock::registerOneshot(this,TWO_SEC);
    1e3c:	68 ec       	ldi	r22, 0xC8	; 200
    1e3e:	70 e0       	ldi	r23, 0x00	; 0
    1e40:	c6 01       	movw	r24, r12
    1e42:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN5Clock15registerOneshotEP8Callbackj>
    1e46:	f6 01       	movw	r30, r12
    1e48:	e3 5b       	subi	r30, 0xB3	; 179
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	91 83       	std	Z+1, r25	; 0x01
    1e4e:	80 83       	st	Z, r24
			exitParamMode = false;
    1e50:	d2 01       	movw	r26, r4
    1e52:	1c 92       	st	X, r1
    1e54:	6c c0       	rjmp	.+216    	; 0x1f2e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1da>

		} else if (pb->getEvent() == EV_OPEN) {
    1e56:	c3 01       	movw	r24, r6
    1e58:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN2Sw8getEventEv>
    1e5c:	81 30       	cpi	r24, 0x01	; 1
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x10e>
    1e60:	66 c0       	rjmp	.+204    	; 0x1f2e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1da>
			pb->clearEvent();
    1e62:	c3 01       	movw	r24, r6
    1e64:	0e 94 9b 11 	call	0x2336	; 0x2336 <_ZN2Sw10clearEventEv>
			if (waitForOpen) {
    1e68:	f6 01       	movw	r30, r12
    1e6a:	e1 5b       	subi	r30, 0xB1	; 177
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	80 81       	ld	r24, Z
    1e70:	88 23       	and	r24, r24
    1e72:	21 f0       	breq	.+8      	; 0x1e7c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x128>
				waitForOpen = false;
    1e74:	10 82       	st	Z, r1
				mode = MODE_NORMAL;
    1e76:	f6 01       	movw	r30, r12
    1e78:	16 82       	std	Z+6, r1	; 0x06
    1e7a:	79 c1       	rjmp	.+754    	; 0x216e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x41a>
				return;

			} else {
				Clock::cancelOneshot(timerHandle);
    1e7c:	f6 01       	movw	r30, r12
    1e7e:	e3 5b       	subi	r30, 0xB3	; 179
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	80 81       	ld	r24, Z
    1e84:	91 81       	ldd	r25, Z+1	; 0x01
    1e86:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN5Clock13cancelOneshotEi>
				uint16_t line = param_display[curParam].label_psn.line;
    1e8a:	36 01       	movw	r6, r12
    1e8c:	fb e4       	ldi	r31, 0x4B	; 75
    1e8e:	6f 0e       	add	r6, r31
    1e90:	71 1c       	adc	r7, r1
    1e92:	d3 01       	movw	r26, r6
    1e94:	8c 91       	ld	r24, X
				uint16_t col =  param_display[curParam].label_psn.col;
    1e96:	1b e0       	ldi	r17, 0x0B	; 11
    1e98:	f6 01       	movw	r30, r12
    1e9a:	18 9f       	mul	r17, r24
    1e9c:	e0 0d       	add	r30, r0
    1e9e:	f1 1d       	adc	r31, r1
    1ea0:	11 24       	eor	r1, r1

				lcd->gotoxy(line,col);
    1ea2:	44 85       	ldd	r20, Z+12	; 0x0c
    1ea4:	62 85       	ldd	r22, Z+10	; 0x0a
    1ea6:	c4 01       	movw	r24, r8
    1ea8:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_ZN3Lcd6gotoxyEhh>
				lcd->puts(param_display[curParam].label, fgc, bgc);
    1eac:	26 01       	movw	r4, r12
    1eae:	b5 e5       	ldi	r27, 0x55	; 85
    1eb0:	4b 0e       	add	r4, r27
    1eb2:	51 1c       	adc	r5, r1
    1eb4:	f2 01       	movw	r30, r4
    1eb6:	e0 80       	ld	r14, Z
    1eb8:	f1 80       	ldd	r15, Z+1	; 0x01
    1eba:	02 81       	ldd	r16, Z+2	; 0x02
    1ebc:	33 97       	sbiw	r30, 0x03	; 3
    1ebe:	20 81       	ld	r18, Z
    1ec0:	31 81       	ldd	r19, Z+1	; 0x01
    1ec2:	42 81       	ldd	r20, Z+2	; 0x02
    1ec4:	d3 01       	movw	r26, r6
    1ec6:	8c 91       	ld	r24, X
    1ec8:	f6 01       	movw	r30, r12
    1eca:	18 9f       	mul	r17, r24
    1ecc:	e0 0d       	add	r30, r0
    1ece:	f1 1d       	adc	r31, r1
    1ed0:	11 24       	eor	r1, r1
    1ed2:	66 85       	ldd	r22, Z+14	; 0x0e
    1ed4:	77 85       	ldd	r23, Z+15	; 0x0f
    1ed6:	c4 01       	movw	r24, r8
    1ed8:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN3Lcd4putsEPc9_pixColorS1_>
				curParam = (param_t)((int)curParam + 1);
    1edc:	f3 01       	movw	r30, r6
    1ede:	80 81       	ld	r24, Z
    1ee0:	8f 5f       	subi	r24, 0xFF	; 255
				if (curParam == PARAM_END) {
    1ee2:	86 30       	cpi	r24, 0x06	; 6
    1ee4:	11 f0       	breq	.+4      	; 0x1eea <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x196>
				uint16_t line = param_display[curParam].label_psn.line;
				uint16_t col =  param_display[curParam].label_psn.col;

				lcd->gotoxy(line,col);
				lcd->puts(param_display[curParam].label, fgc, bgc);
				curParam = (param_t)((int)curParam + 1);
    1ee6:	80 83       	st	Z, r24
    1ee8:	01 c0       	rjmp	.+2      	; 0x1eec <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x198>
				if (curParam == PARAM_END) {
					curParam = PARAM_STEP;
    1eea:	10 82       	st	Z, r1
				}					
				line = param_display[curParam].label_psn.line;
    1eec:	f3 01       	movw	r30, r6
    1eee:	80 81       	ld	r24, Z
				col =  param_display[curParam].label_psn.col;
    1ef0:	1b e0       	ldi	r17, 0x0B	; 11
    1ef2:	f6 01       	movw	r30, r12
    1ef4:	18 9f       	mul	r17, r24
    1ef6:	e0 0d       	add	r30, r0
    1ef8:	f1 1d       	adc	r31, r1
    1efa:	11 24       	eor	r1, r1
				lcd->gotoxy(line,col);
    1efc:	44 85       	ldd	r20, Z+12	; 0x0c
    1efe:	62 85       	ldd	r22, Z+10	; 0x0a
    1f00:	c4 01       	movw	r24, r8
    1f02:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_ZN3Lcd6gotoxyEhh>
				lcd->puts(param_display[curParam].label, tc, bgc);
    1f06:	d2 01       	movw	r26, r4
    1f08:	ed 90       	ld	r14, X+
    1f0a:	fd 90       	ld	r15, X+
    1f0c:	0c 91       	ld	r16, X
    1f0e:	f1 01       	movw	r30, r2
    1f10:	20 81       	ld	r18, Z
    1f12:	31 81       	ldd	r19, Z+1	; 0x01
    1f14:	42 81       	ldd	r20, Z+2	; 0x02
    1f16:	d3 01       	movw	r26, r6
    1f18:	8c 91       	ld	r24, X
    1f1a:	f6 01       	movw	r30, r12
    1f1c:	18 9f       	mul	r17, r24
    1f1e:	e0 0d       	add	r30, r0
    1f20:	f1 1d       	adc	r31, r1
    1f22:	11 24       	eor	r1, r1
    1f24:	66 85       	ldd	r22, Z+14	; 0x0e
    1f26:	77 85       	ldd	r23, Z+15	; 0x0f
    1f28:	c4 01       	movw	r24, r8
    1f2a:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN3Lcd4putsEPc9_pixColorS1_>
		}
	}
	//		
	// now process encoder events which change the actual parameter value
	//
	if (enc->hasEvent()) {
    1f2e:	c5 01       	movw	r24, r10
    1f30:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_ZN7Encoder8hasEventEv>
    1f34:	88 23       	and	r24, r24
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1e6>
    1f38:	1a c1       	rjmp	.+564    	; 0x216e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x41a>
		switch(curParam) {
    1f3a:	36 01       	movw	r6, r12
    1f3c:	bb e4       	ldi	r27, 0x4B	; 75
    1f3e:	6b 0e       	add	r6, r27
    1f40:	71 1c       	adc	r7, r1
    1f42:	f3 01       	movw	r30, r6
    1f44:	80 81       	ld	r24, Z
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1f8>
    1f4a:	5e c0       	rjmp	.+188    	; 0x2008 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2b4>
    1f4c:	28 f4       	brcc	.+10     	; 0x1f58 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x204>
    1f4e:	88 23       	and	r24, r24
    1f50:	61 f0       	breq	.+24     	; 0x1f6a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x216>
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	a1 f1       	breq	.+104    	; 0x1fbe <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x26a>
    1f56:	ea c0       	rjmp	.+468    	; 0x212c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3d8>
    1f58:	84 30       	cpi	r24, 0x04	; 4
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x20a>
    1f5c:	99 c0       	rjmp	.+306    	; 0x2090 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x33c>
    1f5e:	08 f4       	brcc	.+2      	; 0x1f62 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x20e>
    1f60:	75 c0       	rjmp	.+234    	; 0x204c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2f8>
    1f62:	85 30       	cpi	r24, 0x05	; 5
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x214>
    1f66:	c8 c0       	rjmp	.+400    	; 0x20f8 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3a4>
    1f68:	e1 c0       	rjmp	.+450    	; 0x212c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3d8>
			case PARAM_STEP:
				if (enc->getEvent() == ENC_CW_EVENT) {
    1f6a:	c5 01       	movw	r24, r10
    1f6c:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	51 f4       	brne	.+20     	; 0x1f88 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x234>
					step = (step_t)((int)step + 1);
    1f74:	d6 01       	movw	r26, r12
    1f76:	12 96       	adiw	r26, 0x02	; 2
    1f78:	8c 91       	ld	r24, X
    1f7a:	12 97       	sbiw	r26, 0x02	; 2
    1f7c:	8f 5f       	subi	r24, 0xFF	; 255
					if (step == END_OF_STEP) {
    1f7e:	85 30       	cpi	r24, 0x05	; 5
    1f80:	79 f4       	brne	.+30     	; 0x1fa0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x24c>
						step = STEP_10HZ;
    1f82:	f6 01       	movw	r30, r12
    1f84:	12 82       	std	Z+2, r1	; 0x02
    1f86:	12 c0       	rjmp	.+36     	; 0x1fac <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x258>
					}

				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    1f88:	c5 01       	movw	r24, r10
    1f8a:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    1f8e:	82 30       	cpi	r24, 0x02	; 2
    1f90:	69 f4       	brne	.+26     	; 0x1fac <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x258>
					if (step == STEP_10HZ) {
    1f92:	d6 01       	movw	r26, r12
    1f94:	12 96       	adiw	r26, 0x02	; 2
    1f96:	8c 91       	ld	r24, X
    1f98:	12 97       	sbiw	r26, 0x02	; 2
    1f9a:	81 11       	cpse	r24, r1
    1f9c:	04 c0       	rjmp	.+8      	; 0x1fa6 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x252>
						step = STEP_1MHZ;
    1f9e:	84 e0       	ldi	r24, 0x04	; 4
    1fa0:	12 96       	adiw	r26, 0x02	; 2
    1fa2:	8c 93       	st	X, r24
    1fa4:	03 c0       	rjmp	.+6      	; 0x1fac <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x258>
					} else {
						step = (step_t)((int)step - 1);
    1fa6:	81 50       	subi	r24, 0x01	; 1
    1fa8:	f6 01       	movw	r30, r12
    1faa:	82 83       	std	Z+2, r24	; 0x02
					}
				}
				valp = step_strings[step];
    1fac:	d6 01       	movw	r26, r12
    1fae:	12 96       	adiw	r26, 0x02	; 2
    1fb0:	ec 91       	ld	r30, X
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	ee 0f       	add	r30, r30
    1fb6:	ff 1f       	adc	r31, r31
    1fb8:	ec 5c       	subi	r30, 0xCC	; 204
    1fba:	fe 4f       	sbci	r31, 0xFE	; 254
    1fbc:	22 c0       	rjmp	.+68     	; 0x2002 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2ae>
				break;

			case PARAM_BAND:
				if (enc->getEvent() == ENC_CW_EVENT) {
    1fbe:	c5 01       	movw	r24, r10
    1fc0:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    1fc4:	81 30       	cpi	r24, 0x01	; 1
    1fc6:	39 f4       	brne	.+14     	; 0x1fd6 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x282>
					band = (band_t)((int)band + 1);
    1fc8:	f6 01       	movw	r30, r12
    1fca:	83 81       	ldd	r24, Z+3	; 0x03
    1fcc:	8f 5f       	subi	r24, 0xFF	; 255
					if (band == END_OF_BAND) {
    1fce:	89 30       	cpi	r24, 0x09	; 9
    1fd0:	61 f4       	brne	.+24     	; 0x1fea <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x296>
						band = BAND_160;
    1fd2:	13 82       	std	Z+3, r1	; 0x03
    1fd4:	0e c0       	rjmp	.+28     	; 0x1ff2 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x29e>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    1fd6:	c5 01       	movw	r24, r10
    1fd8:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    1fdc:	82 30       	cpi	r24, 0x02	; 2
    1fde:	49 f4       	brne	.+18     	; 0x1ff2 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x29e>
					if (band == BAND_160) {
    1fe0:	f6 01       	movw	r30, r12
    1fe2:	83 81       	ldd	r24, Z+3	; 0x03
    1fe4:	81 11       	cpse	r24, r1
    1fe6:	03 c0       	rjmp	.+6      	; 0x1fee <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x29a>
						band = BAND_10;
    1fe8:	88 e0       	ldi	r24, 0x08	; 8
    1fea:	83 83       	std	Z+3, r24	; 0x03
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x29e>
					} else {
						band = (band_t)((int)band - 1);
    1fee:	81 50       	subi	r24, 0x01	; 1
    1ff0:	83 83       	std	Z+3, r24	; 0x03
					}
				}
				valp = band_strings[band];
    1ff2:	d6 01       	movw	r26, r12
    1ff4:	13 96       	adiw	r26, 0x03	; 3
    1ff6:	ec 91       	ld	r30, X
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	ee 0f       	add	r30, r30
    1ffc:	ff 1f       	adc	r31, r31
    1ffe:	e2 5c       	subi	r30, 0xC2	; 194
    2000:	fe 4f       	sbci	r31, 0xFE	; 254
    2002:	50 80       	ld	r5, Z
    2004:	41 80       	ldd	r4, Z+1	; 0x01
				break;
    2006:	94 c0       	rjmp	.+296    	; 0x2130 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3dc>

			case PARAM_VFO:
				if (enc->getEvent() == ENC_CW_EVENT) {
    2008:	c5 01       	movw	r24, r10
    200a:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    200e:	81 30       	cpi	r24, 0x01	; 1
    2010:	39 f4       	brne	.+14     	; 0x2020 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2cc>
					vfo = (vfo_select_t)((int)vfo + 1);
    2012:	f6 01       	movw	r30, r12
    2014:	84 81       	ldd	r24, Z+4	; 0x04
    2016:	8f 5f       	subi	r24, 0xFF	; 255
					if (vfo == END_OF_VFO) {
    2018:	83 30       	cpi	r24, 0x03	; 3
    201a:	59 f4       	brne	.+22     	; 0x2032 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2de>
						vfo = VFOA;
    201c:	14 82       	std	Z+4, r1	; 0x04
    201e:	0d c0       	rjmp	.+26     	; 0x203a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2e6>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    2020:	c5 01       	movw	r24, r10
    2022:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    2026:	82 30       	cpi	r24, 0x02	; 2
    2028:	41 f4       	brne	.+16     	; 0x203a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2e6>
					if (vfo == VFOA) {
    202a:	f6 01       	movw	r30, r12
    202c:	94 81       	ldd	r25, Z+4	; 0x04
    202e:	91 11       	cpse	r25, r1
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2e2>
						vfo = SPLIT;
    2032:	84 83       	std	Z+4, r24	; 0x04
    2034:	02 c0       	rjmp	.+4      	; 0x203a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2e6>
					} else {
						vfo = (vfo_select_t)((int)vfo - 1);
    2036:	91 50       	subi	r25, 0x01	; 1
    2038:	94 83       	std	Z+4, r25	; 0x04
					}
				}
				valp = vfo_strings[vfo];
    203a:	d6 01       	movw	r26, r12
    203c:	14 96       	adiw	r26, 0x04	; 4
    203e:	ec 91       	ld	r30, X
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	ee 0f       	add	r30, r30
    2044:	ff 1f       	adc	r31, r31
    2046:	e2 5d       	subi	r30, 0xD2	; 210
    2048:	fe 4f       	sbci	r31, 0xFE	; 254
    204a:	db cf       	rjmp	.-74     	; 0x2002 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2ae>
				break;

			case PARAM_KEY:
				if (enc->getEvent() == ENC_CW_EVENT) {
    204c:	c5 01       	movw	r24, r10
    204e:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    2052:	81 30       	cpi	r24, 0x01	; 1
    2054:	39 f4       	brne	.+14     	; 0x2064 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x310>
					key = (key_t)((int)key + 1);
    2056:	f6 01       	movw	r30, r12
    2058:	87 81       	ldd	r24, Z+7	; 0x07
    205a:	8f 5f       	subi	r24, 0xFF	; 255
					if (key == END_OF_KEY) {
    205c:	83 30       	cpi	r24, 0x03	; 3
    205e:	59 f4       	brne	.+22     	; 0x2076 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x322>
						key = KEY_ST;
    2060:	17 82       	std	Z+7, r1	; 0x07
    2062:	0d c0       	rjmp	.+26     	; 0x207e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x32a>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    2064:	c5 01       	movw	r24, r10
    2066:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    206a:	82 30       	cpi	r24, 0x02	; 2
    206c:	41 f4       	brne	.+16     	; 0x207e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x32a>
					if (key == KEY_ST) {
    206e:	f6 01       	movw	r30, r12
    2070:	97 81       	ldd	r25, Z+7	; 0x07
    2072:	91 11       	cpse	r25, r1
    2074:	02 c0       	rjmp	.+4      	; 0x207a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x326>
						key = KEY_PDLS;
    2076:	87 83       	std	Z+7, r24	; 0x07
    2078:	02 c0       	rjmp	.+4      	; 0x207e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x32a>
					} else {
						key = (key_t)((int)key - 1);
    207a:	91 50       	subi	r25, 0x01	; 1
    207c:	97 83       	std	Z+7, r25	; 0x07
					}
				}
				valp = key_strings[key];
    207e:	d6 01       	movw	r26, r12
    2080:	17 96       	adiw	r26, 0x07	; 7
    2082:	ec 91       	ld	r30, X
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	ee 0f       	add	r30, r30
    2088:	ff 1f       	adc	r31, r31
    208a:	ec 5d       	subi	r30, 0xDC	; 220
    208c:	fe 4f       	sbci	r31, 0xFE	; 254
    208e:	b9 cf       	rjmp	.-142    	; 0x2002 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2ae>
				break;

			case PARAM_KEY_SPEED:
				if (enc->getEvent() == ENC_CW_EVENT) {
    2090:	c5 01       	movw	r24, r10
    2092:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    2096:	81 30       	cpi	r24, 0x01	; 1
    2098:	39 f4       	brne	.+14     	; 0x20a8 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x354>
					speed++;
    209a:	f6 01       	movw	r30, r12
    209c:	80 85       	ldd	r24, Z+8	; 0x08
    209e:	8f 5f       	subi	r24, 0xFF	; 255
					if (speed > 25) {
    20a0:	8a 31       	cpi	r24, 0x1A	; 26
    20a2:	60 f0       	brcs	.+24     	; 0x20bc <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x368>
						speed = 25;
    20a4:	89 e1       	ldi	r24, 0x19	; 25
    20a6:	0d c0       	rjmp	.+26     	; 0x20c2 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x36e>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    20a8:	c5 01       	movw	r24, r10
    20aa:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    20ae:	82 30       	cpi	r24, 0x02	; 2
    20b0:	59 f4       	brne	.+22     	; 0x20c8 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x374>
					speed--;
    20b2:	f6 01       	movw	r30, r12
    20b4:	80 85       	ldd	r24, Z+8	; 0x08
    20b6:	81 50       	subi	r24, 0x01	; 1
					if (speed < 5) {
    20b8:	85 30       	cpi	r24, 0x05	; 5
    20ba:	10 f0       	brcs	.+4      	; 0x20c0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x36c>
					speed++;
					if (speed > 25) {
						speed = 25;
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
					speed--;
    20bc:	80 87       	std	Z+8, r24	; 0x08
    20be:	04 c0       	rjmp	.+8      	; 0x20c8 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x374>
					if (speed < 5) {
						speed = 5;
    20c0:	85 e0       	ldi	r24, 0x05	; 5
    20c2:	d6 01       	movw	r26, r12
    20c4:	18 96       	adiw	r26, 0x08	; 8
    20c6:	8c 93       	st	X, r24
					}
				}
				sprintf(buf,"%2i", speed);
    20c8:	f6 01       	movw	r30, r12
    20ca:	80 85       	ldd	r24, Z+8	; 0x08
    20cc:	1f 92       	push	r1
    20ce:	8f 93       	push	r24
    20d0:	8c e7       	ldi	r24, 0x7C	; 124
    20d2:	92 e0       	ldi	r25, 0x02	; 2
    20d4:	9f 93       	push	r25
    20d6:	8f 93       	push	r24
    20d8:	8e 01       	movw	r16, r28
    20da:	0f 5f       	subi	r16, 0xFF	; 255
    20dc:	1f 4f       	sbci	r17, 0xFF	; 255
    20de:	1f 93       	push	r17
    20e0:	0f 93       	push	r16
    20e2:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sprintf>
				valp = buf;
				break;
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
					if (speed < 5) {
						speed = 5;
					}
				}
				sprintf(buf,"%2i", speed);
				valp = buf;
    20f2:	50 2e       	mov	r5, r16
    20f4:	41 2e       	mov	r4, r17
				break;
    20f6:	1c c0       	rjmp	.+56     	; 0x2130 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3dc>

			case PARAM_ACT_VFO:
				if (enc->getEvent() != ENC_NO_EVENT) {
    20f8:	c5 01       	movw	r24, r10
    20fa:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    20fe:	88 23       	and	r24, r24
    2100:	61 f0       	breq	.+24     	; 0x211a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3c6>
					if (activeVfo == RX) {
    2102:	d6 01       	movw	r26, r12
    2104:	15 96       	adiw	r26, 0x05	; 5
    2106:	8c 91       	ld	r24, X
    2108:	15 97       	sbiw	r26, 0x05	; 5
    210a:	81 11       	cpse	r24, r1
    210c:	04 c0       	rjmp	.+8      	; 0x2116 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3c2>
						activeVfo = TX;
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	15 96       	adiw	r26, 0x05	; 5
    2112:	8c 93       	st	X, r24
    2114:	02 c0       	rjmp	.+4      	; 0x211a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3c6>
					} else {
						activeVfo = RX;
    2116:	f6 01       	movw	r30, r12
    2118:	15 82       	std	Z+5, r1	; 0x05
					}
				}
				valp =  vfoact_strings[activeVfo];
    211a:	d6 01       	movw	r26, r12
    211c:	15 96       	adiw	r26, 0x05	; 5
    211e:	ec 91       	ld	r30, X
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	ee 0f       	add	r30, r30
    2124:	ff 1f       	adc	r31, r31
    2126:	e6 5d       	subi	r30, 0xD6	; 214
    2128:	fe 4f       	sbci	r31, 0xFE	; 254
    212a:	6b cf       	rjmp	.-298    	; 0x2002 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2ae>


void params::update(Encoder *enc, Sw *pb, Lcd *lcd) {
	uint16_t line;
	uint16_t col;
	char *valp = NULL;
    212c:	51 2c       	mov	r5, r1
    212e:	41 2c       	mov	r4, r1
				break;

			default:
				break;
		}
		enc->clearEvent();
    2130:	c5 01       	movw	r24, r10
    2132:	0e 94 0a 06 	call	0xc14	; 0xc14 <_ZN7Encoder10clearEventEv>
		line = param_display[curParam].val_psn.line;
    2136:	f3 01       	movw	r30, r6
    2138:	80 81       	ld	r24, Z
		col =  param_display[curParam].val_psn.col;
    213a:	f6 01       	movw	r30, r12
    213c:	9b e0       	ldi	r25, 0x0B	; 11
    213e:	89 9f       	mul	r24, r25
    2140:	e0 0d       	add	r30, r0
    2142:	f1 1d       	adc	r31, r1
    2144:	11 24       	eor	r1, r1
		lcd->gotoxy(line,col);
    2146:	42 89       	ldd	r20, Z+18	; 0x12
    2148:	60 89       	ldd	r22, Z+16	; 0x10
    214a:	c4 01       	movw	r24, r8
    214c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_ZN3Lcd6gotoxyEhh>
		lcd->puts(valp, fgc, bgc);
    2150:	f6 01       	movw	r30, r12
    2152:	eb 5a       	subi	r30, 0xAB	; 171
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	e0 80       	ld	r14, Z
    2158:	f1 80       	ldd	r15, Z+1	; 0x01
    215a:	02 81       	ldd	r16, Z+2	; 0x02
    215c:	33 97       	sbiw	r30, 0x03	; 3
    215e:	20 81       	ld	r18, Z
    2160:	31 81       	ldd	r19, Z+1	; 0x01
    2162:	42 81       	ldd	r20, Z+2	; 0x02
    2164:	65 2d       	mov	r22, r5
    2166:	74 2d       	mov	r23, r4
    2168:	c4 01       	movw	r24, r8
    216a:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN3Lcd4putsEPc9_pixColorS1_>
	}


}
    216e:	60 96       	adiw	r28, 0x10	; 16
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	df 91       	pop	r29
    217c:	cf 91       	pop	r28
    217e:	1f 91       	pop	r17
    2180:	0f 91       	pop	r16
    2182:	ff 90       	pop	r15
    2184:	ef 90       	pop	r14
    2186:	df 90       	pop	r13
    2188:	cf 90       	pop	r12
    218a:	bf 90       	pop	r11
    218c:	af 90       	pop	r10
    218e:	9f 90       	pop	r9
    2190:	8f 90       	pop	r8
    2192:	7f 90       	pop	r7
    2194:	6f 90       	pop	r6
    2196:	5f 90       	pop	r5
    2198:	4f 90       	pop	r4
    219a:	3f 90       	pop	r3
    219c:	2f 90       	pop	r2
    219e:	08 95       	ret

000021a0 <_ZN6params11updateEnterEP7EncoderP2SwP3Lcd>:
	lcd->puts(valp,pc,bgc);
} 



void params::updateEnter(Encoder *enc, Sw *pb, Lcd *lcd) {
    21a0:	6f 92       	push	r6
    21a2:	7f 92       	push	r7
    21a4:	8f 92       	push	r8
    21a6:	9f 92       	push	r9
    21a8:	af 92       	push	r10
    21aa:	bf 92       	push	r11
    21ac:	cf 92       	push	r12
    21ae:	df 92       	push	r13
    21b0:	ef 92       	push	r14
    21b2:	ff 92       	push	r15
    21b4:	0f 93       	push	r16
    21b6:	1f 93       	push	r17
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	ec 01       	movw	r28, r24
    21be:	5b 01       	movw	r10, r22
    21c0:	4a 01       	movw	r8, r20
    21c2:	69 01       	movw	r12, r18
	//
	// hilight current parameter on entry to update
	//
	uint16_t line = param_display[curParam].label_psn.line;
    21c4:	8c 01       	movw	r16, r24
    21c6:	05 5b       	subi	r16, 0xB5	; 181
    21c8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ca:	f8 01       	movw	r30, r16
    21cc:	80 81       	ld	r24, Z
    21ce:	9b e0       	ldi	r25, 0x0B	; 11
    21d0:	f9 2e       	mov	r15, r25
    21d2:	fe 01       	movw	r30, r28
    21d4:	f8 9e       	mul	r15, r24
    21d6:	e0 0d       	add	r30, r0
    21d8:	f1 1d       	adc	r31, r1
    21da:	11 24       	eor	r1, r1
    21dc:	62 85       	ldd	r22, Z+10	; 0x0a
	uint16_t col =  param_display[curParam].label_psn.col;
    21de:	44 85       	ldd	r20, Z+12	; 0x0c

	tc = RED;
    21e0:	3e 01       	movw	r6, r28
    21e2:	f8 e5       	ldi	r31, 0x58	; 88
    21e4:	6f 0e       	add	r6, r31
    21e6:	71 1c       	adc	r7, r1
    21e8:	8c ef       	ldi	r24, 0xFC	; 252
    21ea:	f3 01       	movw	r30, r6
    21ec:	80 83       	st	Z, r24
    21ee:	31 96       	adiw	r30, 0x01	; 1
    21f0:	10 82       	st	Z, r1
    21f2:	31 96       	adiw	r30, 0x01	; 1
    21f4:	10 82       	st	Z, r1
	lcd->gotoxy(line,col);
    21f6:	c9 01       	movw	r24, r18
    21f8:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_ZN3Lcd6gotoxyEhh>
	lcd->puts(param_display[curParam].label, tc, bgc);
    21fc:	fe 01       	movw	r30, r28
    21fe:	eb 5a       	subi	r30, 0xAB	; 171
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	80 81       	ld	r24, Z
    2204:	91 81       	ldd	r25, Z+1	; 0x01
    2206:	a2 81       	ldd	r26, Z+2	; 0x02
    2208:	f3 01       	movw	r30, r6
    220a:	20 81       	ld	r18, Z
    220c:	31 81       	ldd	r19, Z+1	; 0x01
    220e:	42 81       	ldd	r20, Z+2	; 0x02
    2210:	f8 01       	movw	r30, r16
    2212:	50 81       	ld	r21, Z
    2214:	fe 01       	movw	r30, r28
    2216:	f5 9e       	mul	r15, r21
    2218:	e0 0d       	add	r30, r0
    221a:	f1 1d       	adc	r31, r1
    221c:	11 24       	eor	r1, r1
    221e:	66 85       	ldd	r22, Z+14	; 0x0e
    2220:	77 85       	ldd	r23, Z+15	; 0x0f
    2222:	7c 01       	movw	r14, r24
    2224:	0a 2f       	mov	r16, r26
    2226:	c6 01       	movw	r24, r12
    2228:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN3Lcd4putsEPc9_pixColorS1_>
	enc->setEventRate(1);
    222c:	61 e0       	ldi	r22, 0x01	; 1
    222e:	c5 01       	movw	r24, r10
    2230:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN7Encoder12setEventRateEh>
	waitForOpen = false;
    2234:	fe 01       	movw	r30, r28
    2236:	e1 5b       	subi	r30, 0xB1	; 177
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	10 82       	st	Z, r1
	update(enc, pb, lcd);
    223c:	96 01       	movw	r18, r12
    223e:	a4 01       	movw	r20, r8
    2240:	b5 01       	movw	r22, r10
    2242:	ce 01       	movw	r24, r28
}
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	ff 90       	pop	r15
    224e:	ef 90       	pop	r14
    2250:	df 90       	pop	r13
    2252:	cf 90       	pop	r12
    2254:	bf 90       	pop	r11
    2256:	af 90       	pop	r10
    2258:	9f 90       	pop	r9
    225a:	8f 90       	pop	r8
    225c:	7f 90       	pop	r7
    225e:	6f 90       	pop	r6
	tc = RED;
	lcd->gotoxy(line,col);
	lcd->puts(param_display[curParam].label, tc, bgc);
	enc->setEventRate(1);
	waitForOpen = false;
	update(enc, pb, lcd);
    2260:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <_ZN6params6updateEP7EncoderP2SwP3Lcd>

00002264 <_ZN2SwC1Ehh>:


//
// initialize switches
//
Sw::Sw(uint8_t s, volatile uint8_t p) {
    2264:	fc 01       	movw	r30, r24
    2266:	8b ef       	ldi	r24, 0xFB	; 251
    2268:	92 e0       	ldi	r25, 0x02	; 2
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	80 83       	st	Z, r24
	uint8_t temp;
	uint8_t msk = (1 << s);
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	06 2e       	mov	r0, r22
    2274:	01 c0       	rjmp	.+2      	; 0x2278 <_ZN2SwC1Ehh+0x14>
    2276:	88 0f       	add	r24, r24
    2278:	0a 94       	dec	r0
    227a:	ea f7       	brpl	.-6      	; 0x2276 <_ZN2SwC1Ehh+0x12>

	port = (volatile uint8_t *)p;
    227c:	a4 2f       	mov	r26, r20
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	b4 83       	std	Z+4, r27	; 0x04
    2282:	a3 83       	std	Z+3, r26	; 0x03
	pin = (volatile uint8_t *)(p-2);
    2284:	9d 01       	movw	r18, r26
    2286:	22 50       	subi	r18, 0x02	; 2
    2288:	31 09       	sbc	r19, r1
    228a:	36 83       	std	Z+6, r19	; 0x06
    228c:	25 83       	std	Z+5, r18	; 0x05
	ddr = (volatile uint8_t *)(p-1);
    228e:	11 97       	sbiw	r26, 0x01	; 1
    2290:	b0 87       	std	Z+8, r27	; 0x08
    2292:	a7 83       	std	Z+7, r26	; 0x07
	swNum = s;
    2294:	62 83       	std	Z+2, r22	; 0x02

	// set bit as input
	temp = *ddr;
    2296:	9c 91       	ld	r25, X
	temp &= ~msk;
    2298:	28 2f       	mov	r18, r24
    229a:	20 95       	com	r18
    229c:	92 23       	and	r25, r18
	*ddr = temp;
    229e:	9c 93       	st	X, r25

	// enable input pullup
	temp = *port;
    22a0:	a3 81       	ldd	r26, Z+3	; 0x03
    22a2:	b4 81       	ldd	r27, Z+4	; 0x04
    22a4:	9c 91       	ld	r25, X
	temp |= msk;
    22a6:	98 2b       	or	r25, r24
	*port = temp;
    22a8:	9c 93       	st	X, r25

	// get the current state of the switch
	temp = *pin & msk;
    22aa:	a5 81       	ldd	r26, Z+5	; 0x05
    22ac:	b6 81       	ldd	r27, Z+6	; 0x06
    22ae:	9c 91       	ld	r25, X
	if (temp) {
    22b0:	89 23       	and	r24, r25
    22b2:	11 f0       	breq	.+4      	; 0x22b8 <_ZN2SwC1Ehh+0x54>
		state = PB_OPEN;
    22b4:	11 86       	std	Z+9, r1	; 0x09
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <_ZN2SwC1Ehh+0x58>
	}	else {
		state = PB_CLOSE;
    22b8:	82 e0       	ldi	r24, 0x02	; 2
    22ba:	81 87       	std	Z+9, r24	; 0x09
	}
	lastEvent = EV_NONE;
    22bc:	12 86       	std	Z+10, r1	; 0x0a
	Clock::registerPeriodic(this, TEN_MSEC);
    22be:	61 e0       	ldi	r22, 0x01	; 1
    22c0:	70 e0       	ldi	r23, 0x00	; 0
    22c2:	cf 01       	movw	r24, r30
    22c4:	0c 94 2b 04 	jmp	0x856	; 0x856 <_ZN5Clock16registerPeriodicEP8Callbackj>

000022c8 <_ZN2Sw6updateEv>:
}


void Sw::update(void) {
    22c8:	fc 01       	movw	r30, r24

uint8_t temp = *pin & (1 << swNum);
    22ca:	a5 81       	ldd	r26, Z+5	; 0x05
    22cc:	b6 81       	ldd	r27, Z+6	; 0x06
    22ce:	2c 91       	ld	r18, X
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	02 80       	ldd	r0, Z+2	; 0x02
    22d6:	02 c0       	rjmp	.+4      	; 0x22dc <_ZN2Sw6updateEv+0x14>
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	0a 94       	dec	r0
    22de:	e2 f7       	brpl	.-8      	; 0x22d8 <_ZN2Sw6updateEv+0x10>
    22e0:	82 23       	and	r24, r18

	switch (state) {
    22e2:	91 85       	ldd	r25, Z+9	; 0x09
    22e4:	91 30       	cpi	r25, 0x01	; 1
    22e6:	51 f0       	breq	.+20     	; 0x22fc <_ZN2Sw6updateEv+0x34>
    22e8:	28 f0       	brcs	.+10     	; 0x22f4 <_ZN2Sw6updateEv+0x2c>
    22ea:	92 30       	cpi	r25, 0x02	; 2
    22ec:	61 f0       	breq	.+24     	; 0x2306 <_ZN2Sw6updateEv+0x3e>
    22ee:	93 30       	cpi	r25, 0x03	; 3
    22f0:	79 f0       	breq	.+30     	; 0x2310 <_ZN2Sw6updateEv+0x48>
    22f2:	08 95       	ret
	
		case PB_OPEN:
			if (!temp) {
    22f4:	81 11       	cpse	r24, r1
    22f6:	11 c0       	rjmp	.+34     	; 0x231a <_ZN2Sw6updateEv+0x52>
				state = PB_CLOSE_DLY;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	08 c0       	rjmp	.+16     	; 0x230c <_ZN2Sw6updateEv+0x44>
			}
			break;

		case PB_CLOSE_DLY:
			if (!temp) {
    22fc:	81 11       	cpse	r24, r1
    22fe:	0d c0       	rjmp	.+26     	; 0x231a <_ZN2Sw6updateEv+0x52>
				state = PB_CLOSE;
    2300:	82 e0       	ldi	r24, 0x02	; 2
    2302:	81 87       	std	Z+9, r24	; 0x09
    2304:	09 c0       	rjmp	.+18     	; 0x2318 <_ZN2Sw6updateEv+0x50>
				lastEvent = EV_CLOSE;
			}
			break;	
	
		case PB_CLOSE:
			if (temp) {
    2306:	88 23       	and	r24, r24
    2308:	41 f0       	breq	.+16     	; 0x231a <_ZN2Sw6updateEv+0x52>
				state = PB_OPEN_DLY;
    230a:	83 e0       	ldi	r24, 0x03	; 3
    230c:	81 87       	std	Z+9, r24	; 0x09
    230e:	08 95       	ret
			}	
			break;

		case PB_OPEN_DLY:
			if (temp) {
    2310:	88 23       	and	r24, r24
    2312:	19 f0       	breq	.+6      	; 0x231a <_ZN2Sw6updateEv+0x52>
				state = PB_OPEN;
    2314:	11 86       	std	Z+9, r1	; 0x09
				lastEvent = EV_OPEN;
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	82 87       	std	Z+10, r24	; 0x0a
    231a:	08 95       	ret

0000231c <_ZN2Sw8callbackEv>:
	lastEvent = EV_NONE;
}


void Sw::callback(void) {
	update();
    231c:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <_ZN2Sw6updateEv>

00002320 <_ZN2Sw8hasEventEv>:
	}				
	
}


bool	Sw::hasEvent(void) {
    2320:	21 e0       	ldi	r18, 0x01	; 1
    2322:	fc 01       	movw	r30, r24
    2324:	82 85       	ldd	r24, Z+10	; 0x0a
    2326:	81 11       	cpse	r24, r1
    2328:	01 c0       	rjmp	.+2      	; 0x232c <_ZN2Sw8hasEventEv+0xc>
    232a:	20 e0       	ldi	r18, 0x00	; 0
	if (lastEvent != EV_NONE) {
		return true;
	}
	return false;
}
    232c:	82 2f       	mov	r24, r18
    232e:	08 95       	ret

00002330 <_ZN2Sw8getEventEv>:


event Sw::getEvent(void) {
	return lastEvent;
}
    2330:	fc 01       	movw	r30, r24
    2332:	82 85       	ldd	r24, Z+10	; 0x0a
    2334:	08 95       	ret

00002336 <_ZN2Sw10clearEventEv>:

void Sw::clearEvent(void) {
	lastEvent = EV_NONE;
    2336:	fc 01       	movw	r30, r24
    2338:	12 86       	std	Z+10, r1	; 0x0a
    233a:	08 95       	ret

0000233c <_ZN2Sw8isClosedEv>:
}


bool Sw::isClosed(void) {

	return ((state == PB_CLOSE) || (state == PB_OPEN_DLY));
    233c:	fc 01       	movw	r30, r24
    233e:	91 85       	ldd	r25, Z+9	; 0x09
    2340:	92 50       	subi	r25, 0x02	; 2
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	92 30       	cpi	r25, 0x02	; 2
    2346:	08 f0       	brcs	.+2      	; 0x234a <_ZN2Sw8isClosedEv+0xe>
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	08 95       	ret

0000234c <uart_init>:

 void uart_init( void)
 {
 
 //  Set baud rate for 115200 
 	 UBRR0H = (uint8_t)( UBRR_115200 >> 8);
    234c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	 UBRR0L = (uint8_t) UBRR_115200	;
    2350:	88 e0       	ldi	r24, 0x08	; 8
    2352:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

//	 Enable receiver and transmitter
	 UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    2356:	88 e1       	ldi	r24, 0x18	; 24
    2358:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

//	8data, 2 stop bits
	 UCSR0C = (1 << USBS0) | (3 << UCSZ00);
    235c:	8e e0       	ldi	r24, 0x0E	; 14
    235e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    2362:	08 95       	ret

00002364 <uart_getc>:
}

int uart_getc(FILE *f) {
	while (!(UCSR0A & (1 << RXC0)));
    2364:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    2368:	87 ff       	sbrs	r24, 7
    236a:	fc cf       	rjmp	.-8      	; 0x2364 <uart_getc>
	return UDR0;
    236c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	08 95       	ret

00002374 <uart_putc>:


int  uart_putc(char c, FILE *f) {
    2374:	cf 93       	push	r28
    2376:	c8 2f       	mov	r28, r24
	if (c == '\n') {
    2378:	8a 30       	cpi	r24, 0x0A	; 10
    237a:	19 f4       	brne	.+6      	; 0x2382 <uart_putc+0xe>
		uart_putc('\r', f);
    237c:	8d e0       	ldi	r24, 0x0D	; 13
    237e:	0e 94 ba 11 	call	0x2374	; 0x2374 <uart_putc>
	}
	while (!(UCSR0A & (1 << UDRE0)));
    2382:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    2386:	85 ff       	sbrs	r24, 5
    2388:	fc cf       	rjmp	.-8      	; 0x2382 <uart_putc+0xe>
	UDR0 = c;
    238a:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	cf 91       	pop	r28
    2394:	08 95       	ret

00002396 <_ZN3vfoC1EP7EncoderP13vfoParametersj>:
uint32_t freq = vfoData[band].rxFreq;
char tbuf[16];

	intToString32(freq,tbuf);
	formatDisplayFreq(tbuf,buf);
}
    2396:	cf 92       	push	r12
    2398:	df 92       	push	r13
    239a:	ef 92       	push	r14
    239c:	ff 92       	push	r15
    239e:	cf 93       	push	r28
    23a0:	fa 01       	movw	r30, r20
    23a2:	dc 01       	movw	r26, r24
    23a4:	4e 55       	subi	r20, 0x5E	; 94
    23a6:	5f 4f       	sbci	r21, 0xFF	; 255
    23a8:	c0 80       	ld	r12, Z
    23aa:	d1 80       	ldd	r13, Z+1	; 0x01
    23ac:	e2 80       	ldd	r14, Z+2	; 0x02
    23ae:	f3 80       	ldd	r15, Z+3	; 0x03
    23b0:	cd 92       	st	X+, r12
    23b2:	dd 92       	st	X+, r13
    23b4:	ed 92       	st	X+, r14
    23b6:	fc 92       	st	X, r15
    23b8:	13 97       	sbiw	r26, 0x03	; 3
    23ba:	c4 80       	ldd	r12, Z+4	; 0x04
    23bc:	d5 80       	ldd	r13, Z+5	; 0x05
    23be:	e6 80       	ldd	r14, Z+6	; 0x06
    23c0:	f7 80       	ldd	r15, Z+7	; 0x07
    23c2:	14 96       	adiw	r26, 0x04	; 4
    23c4:	cd 92       	st	X+, r12
    23c6:	dd 92       	st	X+, r13
    23c8:	ed 92       	st	X+, r14
    23ca:	fc 92       	st	X, r15
    23cc:	17 97       	sbiw	r26, 0x07	; 7
    23ce:	c0 85       	ldd	r28, Z+8	; 0x08
    23d0:	18 96       	adiw	r26, 0x08	; 8
    23d2:	cc 93       	st	X, r28
    23d4:	18 97       	sbiw	r26, 0x08	; 8
    23d6:	c1 84       	ldd	r12, Z+9	; 0x09
    23d8:	d2 84       	ldd	r13, Z+10	; 0x0a
    23da:	e3 84       	ldd	r14, Z+11	; 0x0b
    23dc:	f4 84       	ldd	r15, Z+12	; 0x0c
    23de:	19 96       	adiw	r26, 0x09	; 9
    23e0:	cd 92       	st	X+, r12
    23e2:	dd 92       	st	X+, r13
    23e4:	ed 92       	st	X+, r14
    23e6:	fc 92       	st	X, r15
    23e8:	1c 97       	sbiw	r26, 0x0c	; 12
    23ea:	c5 84       	ldd	r12, Z+13	; 0x0d
    23ec:	d6 84       	ldd	r13, Z+14	; 0x0e
    23ee:	e7 84       	ldd	r14, Z+15	; 0x0f
    23f0:	f0 88       	ldd	r15, Z+16	; 0x10
    23f2:	1d 96       	adiw	r26, 0x0d	; 13
    23f4:	cd 92       	st	X+, r12
    23f6:	dd 92       	st	X+, r13
    23f8:	ed 92       	st	X+, r14
    23fa:	fc 92       	st	X, r15
    23fc:	50 97       	sbiw	r26, 0x10	; 16
    23fe:	c1 89       	ldd	r28, Z+17	; 0x11
    2400:	51 96       	adiw	r26, 0x11	; 17
    2402:	cc 93       	st	X, r28
    2404:	51 97       	sbiw	r26, 0x11	; 17
    2406:	72 96       	adiw	r30, 0x12	; 18
    2408:	52 96       	adiw	r26, 0x12	; 18
    240a:	e4 17       	cp	r30, r20
    240c:	f5 07       	cpc	r31, r21
    240e:	61 f6       	brne	.-104    	; 0x23a8 <_ZN3vfoC1EP7EncoderP13vfoParametersj+0x12>
    2410:	fc 01       	movw	r30, r24
    2412:	e9 55       	subi	r30, 0x59	; 89
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	71 83       	std	Z+1, r23	; 0x01
    2418:	60 83       	st	Z, r22
    241a:	35 97       	sbiw	r30, 0x05	; 5
    241c:	44 e6       	ldi	r20, 0x64	; 100
    241e:	50 e0       	ldi	r21, 0x00	; 0
    2420:	60 e0       	ldi	r22, 0x00	; 0
    2422:	70 e0       	ldi	r23, 0x00	; 0
    2424:	40 83       	st	Z, r20
    2426:	51 83       	std	Z+1, r21	; 0x01
    2428:	62 83       	std	Z+2, r22	; 0x02
    242a:	73 83       	std	Z+3, r23	; 0x03
    242c:	34 96       	adiw	r30, 0x04	; 4
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	40 83       	st	Z, r20
    2432:	33 96       	adiw	r30, 0x03	; 3
    2434:	31 83       	std	Z+1, r19	; 0x01
    2436:	20 83       	st	Z, r18
    2438:	cf 91       	pop	r28
    243a:	ff 90       	pop	r15
    243c:	ef 90       	pop	r14
    243e:	df 90       	pop	r13
    2440:	cf 90       	pop	r12
    2442:	08 95       	ret

00002444 <_ZN3vfo6updateEh>:
    2444:	8f 92       	push	r8
    2446:	9f 92       	push	r9
    2448:	af 92       	push	r10
    244a:	bf 92       	push	r11
    244c:	cf 92       	push	r12
    244e:	df 92       	push	r13
    2450:	ef 92       	push	r14
    2452:	ff 92       	push	r15
    2454:	1f 93       	push	r17
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	ec 01       	movw	r28, r24
    245c:	16 2f       	mov	r17, r22
    245e:	7c 01       	movw	r14, r24
    2460:	27 ea       	ldi	r18, 0xA7	; 167
    2462:	e2 0e       	add	r14, r18
    2464:	f1 1c       	adc	r15, r1
    2466:	f7 01       	movw	r30, r14
    2468:	80 81       	ld	r24, Z
    246a:	91 81       	ldd	r25, Z+1	; 0x01
    246c:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_ZN7Encoder8hasEventEv>
    2470:	88 23       	and	r24, r24
    2472:	09 f4       	brne	.+2      	; 0x2476 <_ZN3vfo6updateEh+0x32>
    2474:	6e c0       	rjmp	.+220    	; 0x2552 <_ZN3vfo6updateEh+0x10e>
    2476:	f7 01       	movw	r30, r14
    2478:	80 81       	ld	r24, Z
    247a:	91 81       	ldd	r25, Z+1	; 0x01
    247c:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN7Encoder8getEventEv>
    2480:	82 30       	cpi	r24, 0x02	; 2
    2482:	91 f5       	brne	.+100    	; 0x24e8 <_ZN3vfo6updateEh+0xa4>
    2484:	fe 01       	movw	r30, r28
    2486:	ee 55       	subi	r30, 0x5E	; 94
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	80 80       	ld	r8, Z
    248c:	91 80       	ldd	r9, Z+1	; 0x01
    248e:	a2 80       	ldd	r10, Z+2	; 0x02
    2490:	b3 80       	ldd	r11, Z+3	; 0x03
    2492:	f7 01       	movw	r30, r14
    2494:	80 81       	ld	r24, Z
    2496:	91 81       	ldd	r25, Z+1	; 0x01
    2498:	0e 94 13 06 	call	0xc26	; 0xc26 <_ZN7Encoder17getMissedCcwCountEv>
    249c:	dc 01       	movw	r26, r24
    249e:	11 96       	adiw	r26, 0x01	; 1
    24a0:	a5 01       	movw	r20, r10
    24a2:	94 01       	movw	r18, r8
    24a4:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulshisi3>
    24a8:	fe 01       	movw	r30, r28
    24aa:	22 e1       	ldi	r18, 0x12	; 18
    24ac:	12 9f       	mul	r17, r18
    24ae:	e0 0d       	add	r30, r0
    24b0:	f1 1d       	adc	r31, r1
    24b2:	11 24       	eor	r1, r1
    24b4:	c0 80       	ld	r12, Z
    24b6:	d1 80       	ldd	r13, Z+1	; 0x01
    24b8:	e2 80       	ldd	r14, Z+2	; 0x02
    24ba:	f3 80       	ldd	r15, Z+3	; 0x03
    24bc:	c6 1a       	sub	r12, r22
    24be:	d7 0a       	sbc	r13, r23
    24c0:	e8 0a       	sbc	r14, r24
    24c2:	f9 0a       	sbc	r15, r25
    24c4:	c0 82       	st	Z, r12
    24c6:	d1 82       	std	Z+1, r13	; 0x01
    24c8:	e2 82       	std	Z+2, r14	; 0x02
    24ca:	f3 82       	std	Z+3, r15	; 0x03
    24cc:	ef 01       	movw	r28, r30
    24ce:	c1 84       	ldd	r12, Z+9	; 0x09
    24d0:	d2 84       	ldd	r13, Z+10	; 0x0a
    24d2:	e3 84       	ldd	r14, Z+11	; 0x0b
    24d4:	f4 84       	ldd	r15, Z+12	; 0x0c
    24d6:	a7 01       	movw	r20, r14
    24d8:	96 01       	movw	r18, r12
    24da:	26 1b       	sub	r18, r22
    24dc:	37 0b       	sbc	r19, r23
    24de:	48 0b       	sbc	r20, r24
    24e0:	59 0b       	sbc	r21, r25
    24e2:	da 01       	movw	r26, r20
    24e4:	c9 01       	movw	r24, r18
    24e6:	31 c0       	rjmp	.+98     	; 0x254a <_ZN3vfo6updateEh+0x106>
    24e8:	81 30       	cpi	r24, 0x01	; 1
    24ea:	99 f5       	brne	.+102    	; 0x2552 <_ZN3vfo6updateEh+0x10e>
    24ec:	fe 01       	movw	r30, r28
    24ee:	ee 55       	subi	r30, 0x5E	; 94
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	80 80       	ld	r8, Z
    24f4:	91 80       	ldd	r9, Z+1	; 0x01
    24f6:	a2 80       	ldd	r10, Z+2	; 0x02
    24f8:	b3 80       	ldd	r11, Z+3	; 0x03
    24fa:	f7 01       	movw	r30, r14
    24fc:	80 81       	ld	r24, Z
    24fe:	91 81       	ldd	r25, Z+1	; 0x01
    2500:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN7Encoder16getMissedCwCountEv>
    2504:	dc 01       	movw	r26, r24
    2506:	11 96       	adiw	r26, 0x01	; 1
    2508:	a5 01       	movw	r20, r10
    250a:	94 01       	movw	r18, r8
    250c:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulshisi3>
    2510:	fe 01       	movw	r30, r28
    2512:	22 e1       	ldi	r18, 0x12	; 18
    2514:	12 9f       	mul	r17, r18
    2516:	e0 0d       	add	r30, r0
    2518:	f1 1d       	adc	r31, r1
    251a:	11 24       	eor	r1, r1
    251c:	c0 80       	ld	r12, Z
    251e:	d1 80       	ldd	r13, Z+1	; 0x01
    2520:	e2 80       	ldd	r14, Z+2	; 0x02
    2522:	f3 80       	ldd	r15, Z+3	; 0x03
    2524:	c6 0e       	add	r12, r22
    2526:	d7 1e       	adc	r13, r23
    2528:	e8 1e       	adc	r14, r24
    252a:	f9 1e       	adc	r15, r25
    252c:	c0 82       	st	Z, r12
    252e:	d1 82       	std	Z+1, r13	; 0x01
    2530:	e2 82       	std	Z+2, r14	; 0x02
    2532:	f3 82       	std	Z+3, r15	; 0x03
    2534:	ef 01       	movw	r28, r30
    2536:	c1 84       	ldd	r12, Z+9	; 0x09
    2538:	d2 84       	ldd	r13, Z+10	; 0x0a
    253a:	e3 84       	ldd	r14, Z+11	; 0x0b
    253c:	f4 84       	ldd	r15, Z+12	; 0x0c
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	8c 0d       	add	r24, r12
    2544:	9d 1d       	adc	r25, r13
    2546:	ae 1d       	adc	r26, r14
    2548:	bf 1d       	adc	r27, r15
    254a:	89 87       	std	Y+9, r24	; 0x09
    254c:	9a 87       	std	Y+10, r25	; 0x0a
    254e:	ab 87       	std	Y+11, r26	; 0x0b
    2550:	bc 87       	std	Y+12, r27	; 0x0c
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	1f 91       	pop	r17
    2558:	ff 90       	pop	r15
    255a:	ef 90       	pop	r14
    255c:	df 90       	pop	r13
    255e:	cf 90       	pop	r12
    2560:	bf 90       	pop	r11
    2562:	af 90       	pop	r10
    2564:	9f 90       	pop	r9
    2566:	8f 90       	pop	r8
    2568:	08 95       	ret

0000256a <_ZN3vfo9getRxFreqE5_band>:
    256a:	0f 93       	push	r16
    256c:	1f 93       	push	r17
    256e:	fc 01       	movw	r30, r24
    2570:	02 e1       	ldi	r16, 0x12	; 18
    2572:	60 9f       	mul	r22, r16
    2574:	e0 0d       	add	r30, r0
    2576:	f1 1d       	adc	r31, r1
    2578:	11 24       	eor	r1, r1
    257a:	80 81       	ld	r24, Z
    257c:	91 81       	ldd	r25, Z+1	; 0x01
    257e:	a2 81       	ldd	r26, Z+2	; 0x02
    2580:	b3 81       	ldd	r27, Z+3	; 0x03
    2582:	44 81       	ldd	r20, Z+4	; 0x04
    2584:	55 81       	ldd	r21, Z+5	; 0x05
    2586:	66 81       	ldd	r22, Z+6	; 0x06
    2588:	77 81       	ldd	r23, Z+7	; 0x07
    258a:	8c 01       	movw	r16, r24
    258c:	9d 01       	movw	r18, r26
    258e:	04 0f       	add	r16, r20
    2590:	15 1f       	adc	r17, r21
    2592:	26 1f       	adc	r18, r22
    2594:	37 1f       	adc	r19, r23
    2596:	c9 01       	movw	r24, r18
    2598:	b8 01       	movw	r22, r16
    259a:	20 85       	ldd	r18, Z+8	; 0x08
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e0       	ldi	r20, 0x00	; 0
    25a0:	50 e0       	ldi	r21, 0x00	; 0
    25a2:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__udivmodsi4>
    25a6:	ca 01       	movw	r24, r20
    25a8:	b9 01       	movw	r22, r18
    25aa:	0e 94 59 14 	call	0x28b2	; 0x28b2 <__floatunsisf>
    25ae:	1f 91       	pop	r17
    25b0:	0f 91       	pop	r16
    25b2:	08 95       	ret

000025b4 <_ZN3vfo9getTxFreqE5_band>:
    25b4:	0f 93       	push	r16
    25b6:	1f 93       	push	r17
    25b8:	fc 01       	movw	r30, r24
    25ba:	02 e1       	ldi	r16, 0x12	; 18
    25bc:	60 9f       	mul	r22, r16
    25be:	e0 0d       	add	r30, r0
    25c0:	f1 1d       	adc	r31, r1
    25c2:	11 24       	eor	r1, r1
    25c4:	81 85       	ldd	r24, Z+9	; 0x09
    25c6:	92 85       	ldd	r25, Z+10	; 0x0a
    25c8:	a3 85       	ldd	r26, Z+11	; 0x0b
    25ca:	b4 85       	ldd	r27, Z+12	; 0x0c
    25cc:	45 85       	ldd	r20, Z+13	; 0x0d
    25ce:	56 85       	ldd	r21, Z+14	; 0x0e
    25d0:	67 85       	ldd	r22, Z+15	; 0x0f
    25d2:	70 89       	ldd	r23, Z+16	; 0x10
    25d4:	8c 01       	movw	r16, r24
    25d6:	9d 01       	movw	r18, r26
    25d8:	04 0f       	add	r16, r20
    25da:	15 1f       	adc	r17, r21
    25dc:	26 1f       	adc	r18, r22
    25de:	37 1f       	adc	r19, r23
    25e0:	c9 01       	movw	r24, r18
    25e2:	b8 01       	movw	r22, r16
    25e4:	21 89       	ldd	r18, Z+17	; 0x11
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e0       	ldi	r20, 0x00	; 0
    25ea:	50 e0       	ldi	r21, 0x00	; 0
    25ec:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__udivmodsi4>
    25f0:	ca 01       	movw	r24, r20
    25f2:	b9 01       	movw	r22, r18
    25f4:	0e 94 59 14 	call	0x28b2	; 0x28b2 <__floatunsisf>
    25f8:	1f 91       	pop	r17
    25fa:	0f 91       	pop	r16
    25fc:	08 95       	ret

000025fe <_ZN3vfo7setStepE6step_t>:
    25fe:	fc 01       	movw	r30, r24
    2600:	ea 55       	subi	r30, 0x5A	; 90
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	60 83       	st	Z, r22
    2606:	dc 01       	movw	r26, r24
    2608:	ae 55       	subi	r26, 0x5E	; 94
    260a:	bf 4f       	sbci	r27, 0xFF	; 255
    260c:	84 e0       	ldi	r24, 0x04	; 4
    260e:	68 9f       	mul	r22, r24
    2610:	f0 01       	movw	r30, r0
    2612:	11 24       	eor	r1, r1
    2614:	e3 50       	subi	r30, 0x03	; 3
    2616:	fd 4f       	sbci	r31, 0xFD	; 253
    2618:	40 81       	ld	r20, Z
    261a:	51 81       	ldd	r21, Z+1	; 0x01
    261c:	62 81       	ldd	r22, Z+2	; 0x02
    261e:	73 81       	ldd	r23, Z+3	; 0x03
    2620:	4d 93       	st	X+, r20
    2622:	5d 93       	st	X+, r21
    2624:	6d 93       	st	X+, r22
    2626:	7c 93       	st	X, r23
    2628:	13 97       	sbiw	r26, 0x03	; 3
    262a:	08 95       	ret

0000262c <_ZN3vfo13intToString32EmPc>:
    262c:	cf 92       	push	r12
    262e:	df 92       	push	r13
    2630:	ef 92       	push	r14
    2632:	ff 92       	push	r15
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	6a 01       	movw	r12, r20
    263a:	7b 01       	movw	r14, r22
    263c:	e9 01       	movw	r28, r18
    263e:	cb 01       	movw	r24, r22
    2640:	ba 01       	movw	r22, r20
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	31 ee       	ldi	r19, 0xE1	; 225
    2646:	45 ef       	ldi	r20, 0xF5	; 245
    2648:	55 e0       	ldi	r21, 0x05	; 5
    264a:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__udivmodsi4>
    264e:	80 e3       	ldi	r24, 0x30	; 48
    2650:	82 0f       	add	r24, r18
    2652:	88 83       	st	Y, r24
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	71 ee       	ldi	r23, 0xE1	; 225
    2658:	85 ef       	ldi	r24, 0xF5	; 245
    265a:	95 e0       	ldi	r25, 0x05	; 5
    265c:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__mulsi3>
    2660:	c6 1a       	sub	r12, r22
    2662:	d7 0a       	sbc	r13, r23
    2664:	e8 0a       	sbc	r14, r24
    2666:	f9 0a       	sbc	r15, r25
    2668:	c7 01       	movw	r24, r14
    266a:	b6 01       	movw	r22, r12
    266c:	20 e8       	ldi	r18, 0x80	; 128
    266e:	36 e9       	ldi	r19, 0x96	; 150
    2670:	48 e9       	ldi	r20, 0x98	; 152
    2672:	50 e0       	ldi	r21, 0x00	; 0
    2674:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__udivmodsi4>
    2678:	80 e3       	ldi	r24, 0x30	; 48
    267a:	82 0f       	add	r24, r18
    267c:	89 83       	std	Y+1, r24	; 0x01
    267e:	60 e8       	ldi	r22, 0x80	; 128
    2680:	76 e9       	ldi	r23, 0x96	; 150
    2682:	88 e9       	ldi	r24, 0x98	; 152
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__mulsi3>
    268a:	c6 1a       	sub	r12, r22
    268c:	d7 0a       	sbc	r13, r23
    268e:	e8 0a       	sbc	r14, r24
    2690:	f9 0a       	sbc	r15, r25
    2692:	c7 01       	movw	r24, r14
    2694:	b6 01       	movw	r22, r12
    2696:	20 e4       	ldi	r18, 0x40	; 64
    2698:	32 e4       	ldi	r19, 0x42	; 66
    269a:	4f e0       	ldi	r20, 0x0F	; 15
    269c:	50 e0       	ldi	r21, 0x00	; 0
    269e:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__udivmodsi4>
    26a2:	80 e3       	ldi	r24, 0x30	; 48
    26a4:	82 0f       	add	r24, r18
    26a6:	8a 83       	std	Y+2, r24	; 0x02
    26a8:	60 e4       	ldi	r22, 0x40	; 64
    26aa:	72 e4       	ldi	r23, 0x42	; 66
    26ac:	8f e0       	ldi	r24, 0x0F	; 15
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__mulsi3>
    26b4:	c6 1a       	sub	r12, r22
    26b6:	d7 0a       	sbc	r13, r23
    26b8:	e8 0a       	sbc	r14, r24
    26ba:	f9 0a       	sbc	r15, r25
    26bc:	c7 01       	movw	r24, r14
    26be:	b6 01       	movw	r22, r12
    26c0:	20 ea       	ldi	r18, 0xA0	; 160
    26c2:	36 e8       	ldi	r19, 0x86	; 134
    26c4:	41 e0       	ldi	r20, 0x01	; 1
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__udivmodsi4>
    26cc:	80 e3       	ldi	r24, 0x30	; 48
    26ce:	82 0f       	add	r24, r18
    26d0:	8b 83       	std	Y+3, r24	; 0x03
    26d2:	60 ea       	ldi	r22, 0xA0	; 160
    26d4:	76 e8       	ldi	r23, 0x86	; 134
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__mulsi3>
    26de:	c6 1a       	sub	r12, r22
    26e0:	d7 0a       	sbc	r13, r23
    26e2:	e8 0a       	sbc	r14, r24
    26e4:	f9 0a       	sbc	r15, r25
    26e6:	c7 01       	movw	r24, r14
    26e8:	b6 01       	movw	r22, r12
    26ea:	20 e1       	ldi	r18, 0x10	; 16
    26ec:	37 e2       	ldi	r19, 0x27	; 39
    26ee:	40 e0       	ldi	r20, 0x00	; 0
    26f0:	50 e0       	ldi	r21, 0x00	; 0
    26f2:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__udivmodsi4>
    26f6:	80 e3       	ldi	r24, 0x30	; 48
    26f8:	82 0f       	add	r24, r18
    26fa:	8c 83       	std	Y+4, r24	; 0x04
    26fc:	a0 e1       	ldi	r26, 0x10	; 16
    26fe:	b7 e2       	ldi	r27, 0x27	; 39
    2700:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <__muluhisi3>
    2704:	c6 1a       	sub	r12, r22
    2706:	d7 0a       	sbc	r13, r23
    2708:	e8 0a       	sbc	r14, r24
    270a:	f9 0a       	sbc	r15, r25
    270c:	c7 01       	movw	r24, r14
    270e:	b6 01       	movw	r22, r12
    2710:	28 ee       	ldi	r18, 0xE8	; 232
    2712:	33 e0       	ldi	r19, 0x03	; 3
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	50 e0       	ldi	r21, 0x00	; 0
    2718:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__udivmodsi4>
    271c:	80 e3       	ldi	r24, 0x30	; 48
    271e:	82 0f       	add	r24, r18
    2720:	8d 83       	std	Y+5, r24	; 0x05
    2722:	a8 ee       	ldi	r26, 0xE8	; 232
    2724:	b3 e0       	ldi	r27, 0x03	; 3
    2726:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <__muluhisi3>
    272a:	c6 1a       	sub	r12, r22
    272c:	d7 0a       	sbc	r13, r23
    272e:	e8 0a       	sbc	r14, r24
    2730:	f9 0a       	sbc	r15, r25
    2732:	c7 01       	movw	r24, r14
    2734:	b6 01       	movw	r22, r12
    2736:	24 e6       	ldi	r18, 0x64	; 100
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e0       	ldi	r20, 0x00	; 0
    273c:	50 e0       	ldi	r21, 0x00	; 0
    273e:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__udivmodsi4>
    2742:	80 e3       	ldi	r24, 0x30	; 48
    2744:	82 0f       	add	r24, r18
    2746:	8e 83       	std	Y+6, r24	; 0x06
    2748:	a4 e6       	ldi	r26, 0x64	; 100
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <__muluhisi3>
    2750:	c6 1a       	sub	r12, r22
    2752:	d7 0a       	sbc	r13, r23
    2754:	e8 0a       	sbc	r14, r24
    2756:	f9 0a       	sbc	r15, r25
    2758:	c7 01       	movw	r24, r14
    275a:	b6 01       	movw	r22, r12
    275c:	2a e0       	ldi	r18, 0x0A	; 10
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e0       	ldi	r20, 0x00	; 0
    2762:	50 e0       	ldi	r21, 0x00	; 0
    2764:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__udivmodsi4>
    2768:	80 e3       	ldi	r24, 0x30	; 48
    276a:	82 0f       	add	r24, r18
    276c:	8f 83       	std	Y+7, r24	; 0x07
    276e:	aa e0       	ldi	r26, 0x0A	; 10
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <__muluhisi3>
    2776:	a7 01       	movw	r20, r14
    2778:	96 01       	movw	r18, r12
    277a:	26 1b       	sub	r18, r22
    277c:	37 0b       	sbc	r19, r23
    277e:	48 0b       	sbc	r20, r24
    2780:	59 0b       	sbc	r21, r25
    2782:	da 01       	movw	r26, r20
    2784:	c9 01       	movw	r24, r18
    2786:	80 5d       	subi	r24, 0xD0	; 208
    2788:	88 87       	std	Y+8, r24	; 0x08
    278a:	19 86       	std	Y+9, r1	; 0x09
    278c:	df 91       	pop	r29
    278e:	cf 91       	pop	r28
    2790:	ff 90       	pop	r15
    2792:	ef 90       	pop	r14
    2794:	df 90       	pop	r13
    2796:	cf 90       	pop	r12
    2798:	08 95       	ret

0000279a <_ZN3vfo17formatDisplayFreqEPcS0_>:
    279a:	fa 01       	movw	r30, r20
    279c:	db 01       	movw	r26, r22
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	5e e2       	ldi	r21, 0x2E	; 46
    27a8:	21 15       	cp	r18, r1
    27aa:	31 05       	cpc	r19, r1
    27ac:	59 f0       	breq	.+22     	; 0x27c4 <_ZN3vfo17formatDisplayFreqEPcS0_+0x2a>
    27ae:	83 30       	cpi	r24, 0x03	; 3
    27b0:	91 05       	cpc	r25, r1
    27b2:	19 f0       	breq	.+6      	; 0x27ba <_ZN3vfo17formatDisplayFreqEPcS0_+0x20>
    27b4:	86 30       	cpi	r24, 0x06	; 6
    27b6:	91 05       	cpc	r25, r1
    27b8:	11 f4       	brne	.+4      	; 0x27be <_ZN3vfo17formatDisplayFreqEPcS0_+0x24>
    27ba:	50 83       	st	Z, r21
    27bc:	31 96       	adiw	r30, 0x01	; 1
    27be:	2c 91       	ld	r18, X
    27c0:	20 83       	st	Z, r18
    27c2:	04 c0       	rjmp	.+8      	; 0x27cc <_ZN3vfo17formatDisplayFreqEPcS0_+0x32>
    27c4:	4c 91       	ld	r20, X
    27c6:	40 33       	cpi	r20, 0x30	; 48
    27c8:	21 f0       	breq	.+8      	; 0x27d2 <_ZN3vfo17formatDisplayFreqEPcS0_+0x38>
    27ca:	40 83       	st	Z, r20
    27cc:	31 96       	adiw	r30, 0x01	; 1
    27ce:	21 e0       	ldi	r18, 0x01	; 1
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	01 96       	adiw	r24, 0x01	; 1
    27d4:	11 96       	adiw	r26, 0x01	; 1
    27d6:	89 30       	cpi	r24, 0x09	; 9
    27d8:	91 05       	cpc	r25, r1
    27da:	31 f7       	brne	.-52     	; 0x27a8 <_ZN3vfo17formatDisplayFreqEPcS0_+0xe>
    27dc:	10 82       	st	Z, r1
    27de:	08 95       	ret

000027e0 <_ZN3vfo16getTxDisplayFreqEPc5_band>:
	*dstptr = '\0';
}



void vfo::getTxDisplayFreq(char *buf, band_t band) {
    27e0:	ef 92       	push	r14
    27e2:	ff 92       	push	r15
    27e4:	0f 93       	push	r16
    27e6:	1f 93       	push	r17
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	60 97       	sbiw	r28, 0x10	; 16
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	cd bf       	out	0x3d, r28	; 61
    27fc:	8c 01       	movw	r16, r24
    27fe:	7b 01       	movw	r14, r22

uint32_t freq = vfoData[band].txFreq;
    2800:	fc 01       	movw	r30, r24
    2802:	82 e1       	ldi	r24, 0x12	; 18
    2804:	48 9f       	mul	r20, r24
    2806:	e0 0d       	add	r30, r0
    2808:	f1 1d       	adc	r31, r1
    280a:	11 24       	eor	r1, r1
char tbuf[16];

	intToString32(freq,tbuf);
    280c:	41 85       	ldd	r20, Z+9	; 0x09
    280e:	52 85       	ldd	r21, Z+10	; 0x0a
    2810:	63 85       	ldd	r22, Z+11	; 0x0b
    2812:	74 85       	ldd	r23, Z+12	; 0x0c
    2814:	9e 01       	movw	r18, r28
    2816:	2f 5f       	subi	r18, 0xFF	; 255
    2818:	3f 4f       	sbci	r19, 0xFF	; 255
    281a:	c8 01       	movw	r24, r16
    281c:	0e 94 16 13 	call	0x262c	; 0x262c <_ZN3vfo13intToString32EmPc>
	formatDisplayFreq(tbuf,buf);
    2820:	a7 01       	movw	r20, r14
    2822:	be 01       	movw	r22, r28
    2824:	6f 5f       	subi	r22, 0xFF	; 255
    2826:	7f 4f       	sbci	r23, 0xFF	; 255
    2828:	c8 01       	movw	r24, r16
    282a:	0e 94 cd 13 	call	0x279a	; 0x279a <_ZN3vfo17formatDisplayFreqEPcS0_>
}
    282e:	60 96       	adiw	r28, 0x10	; 16
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	ff 90       	pop	r15
    2844:	ef 90       	pop	r14
    2846:	08 95       	ret

00002848 <_ZN3vfo7getLineEv>:


uint16_t vfo::getLine(void) {
	return line;
    2848:	87 55       	subi	r24, 0x57	; 87
    284a:	9f 4f       	sbci	r25, 0xFF	; 255
}
    284c:	fc 01       	movw	r30, r24
    284e:	80 81       	ld	r24, Z
    2850:	91 81       	ldd	r25, Z+1	; 0x01
    2852:	08 95       	ret

00002854 <__fixunssfsi>:
    2854:	0e 94 9e 14 	call	0x293c	; 0x293c <__fp_splitA>
    2858:	88 f0       	brcs	.+34     	; 0x287c <__fixunssfsi+0x28>
    285a:	9f 57       	subi	r25, 0x7F	; 127
    285c:	98 f0       	brcs	.+38     	; 0x2884 <__fixunssfsi+0x30>
    285e:	b9 2f       	mov	r27, r25
    2860:	99 27       	eor	r25, r25
    2862:	b7 51       	subi	r27, 0x17	; 23
    2864:	b0 f0       	brcs	.+44     	; 0x2892 <__fixunssfsi+0x3e>
    2866:	e1 f0       	breq	.+56     	; 0x28a0 <__fixunssfsi+0x4c>
    2868:	66 0f       	add	r22, r22
    286a:	77 1f       	adc	r23, r23
    286c:	88 1f       	adc	r24, r24
    286e:	99 1f       	adc	r25, r25
    2870:	1a f0       	brmi	.+6      	; 0x2878 <__fixunssfsi+0x24>
    2872:	ba 95       	dec	r27
    2874:	c9 f7       	brne	.-14     	; 0x2868 <__fixunssfsi+0x14>
    2876:	14 c0       	rjmp	.+40     	; 0x28a0 <__fixunssfsi+0x4c>
    2878:	b1 30       	cpi	r27, 0x01	; 1
    287a:	91 f0       	breq	.+36     	; 0x28a0 <__fixunssfsi+0x4c>
    287c:	0e 94 b8 14 	call	0x2970	; 0x2970 <__fp_zero>
    2880:	b1 e0       	ldi	r27, 0x01	; 1
    2882:	08 95       	ret
    2884:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__fp_zero>
    2888:	67 2f       	mov	r22, r23
    288a:	78 2f       	mov	r23, r24
    288c:	88 27       	eor	r24, r24
    288e:	b8 5f       	subi	r27, 0xF8	; 248
    2890:	39 f0       	breq	.+14     	; 0x28a0 <__fixunssfsi+0x4c>
    2892:	b9 3f       	cpi	r27, 0xF9	; 249
    2894:	cc f3       	brlt	.-14     	; 0x2888 <__fixunssfsi+0x34>
    2896:	86 95       	lsr	r24
    2898:	77 95       	ror	r23
    289a:	67 95       	ror	r22
    289c:	b3 95       	inc	r27
    289e:	d9 f7       	brne	.-10     	; 0x2896 <__fixunssfsi+0x42>
    28a0:	3e f4       	brtc	.+14     	; 0x28b0 <__fixunssfsi+0x5c>
    28a2:	90 95       	com	r25
    28a4:	80 95       	com	r24
    28a6:	70 95       	com	r23
    28a8:	61 95       	neg	r22
    28aa:	7f 4f       	sbci	r23, 0xFF	; 255
    28ac:	8f 4f       	sbci	r24, 0xFF	; 255
    28ae:	9f 4f       	sbci	r25, 0xFF	; 255
    28b0:	08 95       	ret

000028b2 <__floatunsisf>:
    28b2:	e8 94       	clt
    28b4:	09 c0       	rjmp	.+18     	; 0x28c8 <__floatsisf+0x12>

000028b6 <__floatsisf>:
    28b6:	97 fb       	bst	r25, 7
    28b8:	3e f4       	brtc	.+14     	; 0x28c8 <__floatsisf+0x12>
    28ba:	90 95       	com	r25
    28bc:	80 95       	com	r24
    28be:	70 95       	com	r23
    28c0:	61 95       	neg	r22
    28c2:	7f 4f       	sbci	r23, 0xFF	; 255
    28c4:	8f 4f       	sbci	r24, 0xFF	; 255
    28c6:	9f 4f       	sbci	r25, 0xFF	; 255
    28c8:	99 23       	and	r25, r25
    28ca:	a9 f0       	breq	.+42     	; 0x28f6 <__floatsisf+0x40>
    28cc:	f9 2f       	mov	r31, r25
    28ce:	96 e9       	ldi	r25, 0x96	; 150
    28d0:	bb 27       	eor	r27, r27
    28d2:	93 95       	inc	r25
    28d4:	f6 95       	lsr	r31
    28d6:	87 95       	ror	r24
    28d8:	77 95       	ror	r23
    28da:	67 95       	ror	r22
    28dc:	b7 95       	ror	r27
    28de:	f1 11       	cpse	r31, r1
    28e0:	f8 cf       	rjmp	.-16     	; 0x28d2 <__floatsisf+0x1c>
    28e2:	fa f4       	brpl	.+62     	; 0x2922 <__floatsisf+0x6c>
    28e4:	bb 0f       	add	r27, r27
    28e6:	11 f4       	brne	.+4      	; 0x28ec <__floatsisf+0x36>
    28e8:	60 ff       	sbrs	r22, 0
    28ea:	1b c0       	rjmp	.+54     	; 0x2922 <__floatsisf+0x6c>
    28ec:	6f 5f       	subi	r22, 0xFF	; 255
    28ee:	7f 4f       	sbci	r23, 0xFF	; 255
    28f0:	8f 4f       	sbci	r24, 0xFF	; 255
    28f2:	9f 4f       	sbci	r25, 0xFF	; 255
    28f4:	16 c0       	rjmp	.+44     	; 0x2922 <__floatsisf+0x6c>
    28f6:	88 23       	and	r24, r24
    28f8:	11 f0       	breq	.+4      	; 0x28fe <__floatsisf+0x48>
    28fa:	96 e9       	ldi	r25, 0x96	; 150
    28fc:	11 c0       	rjmp	.+34     	; 0x2920 <__floatsisf+0x6a>
    28fe:	77 23       	and	r23, r23
    2900:	21 f0       	breq	.+8      	; 0x290a <__floatsisf+0x54>
    2902:	9e e8       	ldi	r25, 0x8E	; 142
    2904:	87 2f       	mov	r24, r23
    2906:	76 2f       	mov	r23, r22
    2908:	05 c0       	rjmp	.+10     	; 0x2914 <__floatsisf+0x5e>
    290a:	66 23       	and	r22, r22
    290c:	71 f0       	breq	.+28     	; 0x292a <__floatsisf+0x74>
    290e:	96 e8       	ldi	r25, 0x86	; 134
    2910:	86 2f       	mov	r24, r22
    2912:	70 e0       	ldi	r23, 0x00	; 0
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	2a f0       	brmi	.+10     	; 0x2922 <__floatsisf+0x6c>
    2918:	9a 95       	dec	r25
    291a:	66 0f       	add	r22, r22
    291c:	77 1f       	adc	r23, r23
    291e:	88 1f       	adc	r24, r24
    2920:	da f7       	brpl	.-10     	; 0x2918 <__floatsisf+0x62>
    2922:	88 0f       	add	r24, r24
    2924:	96 95       	lsr	r25
    2926:	87 95       	ror	r24
    2928:	97 f9       	bld	r25, 7
    292a:	08 95       	ret

0000292c <__fp_split3>:
    292c:	57 fd       	sbrc	r21, 7
    292e:	90 58       	subi	r25, 0x80	; 128
    2930:	44 0f       	add	r20, r20
    2932:	55 1f       	adc	r21, r21
    2934:	59 f0       	breq	.+22     	; 0x294c <__fp_splitA+0x10>
    2936:	5f 3f       	cpi	r21, 0xFF	; 255
    2938:	71 f0       	breq	.+28     	; 0x2956 <__fp_splitA+0x1a>
    293a:	47 95       	ror	r20

0000293c <__fp_splitA>:
    293c:	88 0f       	add	r24, r24
    293e:	97 fb       	bst	r25, 7
    2940:	99 1f       	adc	r25, r25
    2942:	61 f0       	breq	.+24     	; 0x295c <__fp_splitA+0x20>
    2944:	9f 3f       	cpi	r25, 0xFF	; 255
    2946:	79 f0       	breq	.+30     	; 0x2966 <__fp_splitA+0x2a>
    2948:	87 95       	ror	r24
    294a:	08 95       	ret
    294c:	12 16       	cp	r1, r18
    294e:	13 06       	cpc	r1, r19
    2950:	14 06       	cpc	r1, r20
    2952:	55 1f       	adc	r21, r21
    2954:	f2 cf       	rjmp	.-28     	; 0x293a <__fp_split3+0xe>
    2956:	46 95       	lsr	r20
    2958:	f1 df       	rcall	.-30     	; 0x293c <__fp_splitA>
    295a:	08 c0       	rjmp	.+16     	; 0x296c <__fp_splitA+0x30>
    295c:	16 16       	cp	r1, r22
    295e:	17 06       	cpc	r1, r23
    2960:	18 06       	cpc	r1, r24
    2962:	99 1f       	adc	r25, r25
    2964:	f1 cf       	rjmp	.-30     	; 0x2948 <__fp_splitA+0xc>
    2966:	86 95       	lsr	r24
    2968:	71 05       	cpc	r23, r1
    296a:	61 05       	cpc	r22, r1
    296c:	08 94       	sec
    296e:	08 95       	ret

00002970 <__fp_zero>:
    2970:	e8 94       	clt

00002972 <__fp_szero>:
    2972:	bb 27       	eor	r27, r27
    2974:	66 27       	eor	r22, r22
    2976:	77 27       	eor	r23, r23
    2978:	cb 01       	movw	r24, r22
    297a:	97 f9       	bld	r25, 7
    297c:	08 95       	ret

0000297e <__mulsf3>:
    297e:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <__mulsf3x>
    2982:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__fp_round>
    2986:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__fp_pscA>
    298a:	38 f0       	brcs	.+14     	; 0x299a <__mulsf3+0x1c>
    298c:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <__fp_pscB>
    2990:	20 f0       	brcs	.+8      	; 0x299a <__mulsf3+0x1c>
    2992:	95 23       	and	r25, r21
    2994:	11 f0       	breq	.+4      	; 0x299a <__mulsf3+0x1c>
    2996:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__fp_inf>
    299a:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__fp_nan>
    299e:	11 24       	eor	r1, r1
    29a0:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__fp_szero>

000029a4 <__mulsf3x>:
    29a4:	0e 94 96 14 	call	0x292c	; 0x292c <__fp_split3>
    29a8:	70 f3       	brcs	.-36     	; 0x2986 <__mulsf3+0x8>

000029aa <__mulsf3_pse>:
    29aa:	95 9f       	mul	r25, r21
    29ac:	c1 f3       	breq	.-16     	; 0x299e <__mulsf3+0x20>
    29ae:	95 0f       	add	r25, r21
    29b0:	50 e0       	ldi	r21, 0x00	; 0
    29b2:	55 1f       	adc	r21, r21
    29b4:	62 9f       	mul	r22, r18
    29b6:	f0 01       	movw	r30, r0
    29b8:	72 9f       	mul	r23, r18
    29ba:	bb 27       	eor	r27, r27
    29bc:	f0 0d       	add	r31, r0
    29be:	b1 1d       	adc	r27, r1
    29c0:	63 9f       	mul	r22, r19
    29c2:	aa 27       	eor	r26, r26
    29c4:	f0 0d       	add	r31, r0
    29c6:	b1 1d       	adc	r27, r1
    29c8:	aa 1f       	adc	r26, r26
    29ca:	64 9f       	mul	r22, r20
    29cc:	66 27       	eor	r22, r22
    29ce:	b0 0d       	add	r27, r0
    29d0:	a1 1d       	adc	r26, r1
    29d2:	66 1f       	adc	r22, r22
    29d4:	82 9f       	mul	r24, r18
    29d6:	22 27       	eor	r18, r18
    29d8:	b0 0d       	add	r27, r0
    29da:	a1 1d       	adc	r26, r1
    29dc:	62 1f       	adc	r22, r18
    29de:	73 9f       	mul	r23, r19
    29e0:	b0 0d       	add	r27, r0
    29e2:	a1 1d       	adc	r26, r1
    29e4:	62 1f       	adc	r22, r18
    29e6:	83 9f       	mul	r24, r19
    29e8:	a0 0d       	add	r26, r0
    29ea:	61 1d       	adc	r22, r1
    29ec:	22 1f       	adc	r18, r18
    29ee:	74 9f       	mul	r23, r20
    29f0:	33 27       	eor	r19, r19
    29f2:	a0 0d       	add	r26, r0
    29f4:	61 1d       	adc	r22, r1
    29f6:	23 1f       	adc	r18, r19
    29f8:	84 9f       	mul	r24, r20
    29fa:	60 0d       	add	r22, r0
    29fc:	21 1d       	adc	r18, r1
    29fe:	82 2f       	mov	r24, r18
    2a00:	76 2f       	mov	r23, r22
    2a02:	6a 2f       	mov	r22, r26
    2a04:	11 24       	eor	r1, r1
    2a06:	9f 57       	subi	r25, 0x7F	; 127
    2a08:	50 40       	sbci	r21, 0x00	; 0
    2a0a:	9a f0       	brmi	.+38     	; 0x2a32 <__mulsf3_pse+0x88>
    2a0c:	f1 f0       	breq	.+60     	; 0x2a4a <__mulsf3_pse+0xa0>
    2a0e:	88 23       	and	r24, r24
    2a10:	4a f0       	brmi	.+18     	; 0x2a24 <__mulsf3_pse+0x7a>
    2a12:	ee 0f       	add	r30, r30
    2a14:	ff 1f       	adc	r31, r31
    2a16:	bb 1f       	adc	r27, r27
    2a18:	66 1f       	adc	r22, r22
    2a1a:	77 1f       	adc	r23, r23
    2a1c:	88 1f       	adc	r24, r24
    2a1e:	91 50       	subi	r25, 0x01	; 1
    2a20:	50 40       	sbci	r21, 0x00	; 0
    2a22:	a9 f7       	brne	.-22     	; 0x2a0e <__mulsf3_pse+0x64>
    2a24:	9e 3f       	cpi	r25, 0xFE	; 254
    2a26:	51 05       	cpc	r21, r1
    2a28:	80 f0       	brcs	.+32     	; 0x2a4a <__mulsf3_pse+0xa0>
    2a2a:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__fp_inf>
    2a2e:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__fp_szero>
    2a32:	5f 3f       	cpi	r21, 0xFF	; 255
    2a34:	e4 f3       	brlt	.-8      	; 0x2a2e <__mulsf3_pse+0x84>
    2a36:	98 3e       	cpi	r25, 0xE8	; 232
    2a38:	d4 f3       	brlt	.-12     	; 0x2a2e <__mulsf3_pse+0x84>
    2a3a:	86 95       	lsr	r24
    2a3c:	77 95       	ror	r23
    2a3e:	67 95       	ror	r22
    2a40:	b7 95       	ror	r27
    2a42:	f7 95       	ror	r31
    2a44:	e7 95       	ror	r30
    2a46:	9f 5f       	subi	r25, 0xFF	; 255
    2a48:	c1 f7       	brne	.-16     	; 0x2a3a <__mulsf3_pse+0x90>
    2a4a:	fe 2b       	or	r31, r30
    2a4c:	88 0f       	add	r24, r24
    2a4e:	91 1d       	adc	r25, r1
    2a50:	96 95       	lsr	r25
    2a52:	87 95       	ror	r24
    2a54:	97 f9       	bld	r25, 7
    2a56:	08 95       	ret

00002a58 <__fp_inf>:
    2a58:	97 f9       	bld	r25, 7
    2a5a:	9f 67       	ori	r25, 0x7F	; 127
    2a5c:	80 e8       	ldi	r24, 0x80	; 128
    2a5e:	70 e0       	ldi	r23, 0x00	; 0
    2a60:	60 e0       	ldi	r22, 0x00	; 0
    2a62:	08 95       	ret

00002a64 <__fp_nan>:
    2a64:	9f ef       	ldi	r25, 0xFF	; 255
    2a66:	80 ec       	ldi	r24, 0xC0	; 192
    2a68:	08 95       	ret

00002a6a <__fp_pscA>:
    2a6a:	00 24       	eor	r0, r0
    2a6c:	0a 94       	dec	r0
    2a6e:	16 16       	cp	r1, r22
    2a70:	17 06       	cpc	r1, r23
    2a72:	18 06       	cpc	r1, r24
    2a74:	09 06       	cpc	r0, r25
    2a76:	08 95       	ret

00002a78 <__fp_pscB>:
    2a78:	00 24       	eor	r0, r0
    2a7a:	0a 94       	dec	r0
    2a7c:	12 16       	cp	r1, r18
    2a7e:	13 06       	cpc	r1, r19
    2a80:	14 06       	cpc	r1, r20
    2a82:	05 06       	cpc	r0, r21
    2a84:	08 95       	ret

00002a86 <__fp_round>:
    2a86:	09 2e       	mov	r0, r25
    2a88:	03 94       	inc	r0
    2a8a:	00 0c       	add	r0, r0
    2a8c:	11 f4       	brne	.+4      	; 0x2a92 <__fp_round+0xc>
    2a8e:	88 23       	and	r24, r24
    2a90:	52 f0       	brmi	.+20     	; 0x2aa6 <__fp_round+0x20>
    2a92:	bb 0f       	add	r27, r27
    2a94:	40 f4       	brcc	.+16     	; 0x2aa6 <__fp_round+0x20>
    2a96:	bf 2b       	or	r27, r31
    2a98:	11 f4       	brne	.+4      	; 0x2a9e <__fp_round+0x18>
    2a9a:	60 ff       	sbrs	r22, 0
    2a9c:	04 c0       	rjmp	.+8      	; 0x2aa6 <__fp_round+0x20>
    2a9e:	6f 5f       	subi	r22, 0xFF	; 255
    2aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa2:	8f 4f       	sbci	r24, 0xFF	; 255
    2aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa6:	08 95       	ret

00002aa8 <initVariant>:
    2aa8:	08 95       	ret

00002aaa <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2aaa:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <init>

	initVariant();
    2aae:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2ab2:	0e 94 ba 09 	call	0x1374	; 0x1374 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2ab6:	c0 e0       	ldi	r28, 0x00	; 0
    2ab8:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    2aba:	0e 94 bb 09 	call	0x1376	; 0x1376 <loop>
		if (serialEventRun) serialEventRun();
    2abe:	20 97       	sbiw	r28, 0x00	; 0
    2ac0:	e1 f3       	breq	.-8      	; 0x2aba <main+0x10>
    2ac2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2ac6:	f9 cf       	rjmp	.-14     	; 0x2aba <main+0x10>

00002ac8 <_Znwj>:
    2ac8:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <malloc>

00002acc <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2acc:	1f 92       	push	r1
    2ace:	0f 92       	push	r0
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	0f 92       	push	r0
    2ad4:	11 24       	eor	r1, r1
    2ad6:	2f 93       	push	r18
    2ad8:	3f 93       	push	r19
    2ada:	8f 93       	push	r24
    2adc:	9f 93       	push	r25
    2ade:	af 93       	push	r26
    2ae0:	bf 93       	push	r27
    2ae2:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <timer0_millis>
    2ae6:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <timer0_millis+0x1>
    2aea:	a0 91 65 03 	lds	r26, 0x0365	; 0x800365 <timer0_millis+0x2>
    2aee:	b0 91 66 03 	lds	r27, 0x0366	; 0x800366 <timer0_millis+0x3>
    2af2:	30 91 62 03 	lds	r19, 0x0362	; 0x800362 <timer0_fract>
    2af6:	23 e0       	ldi	r18, 0x03	; 3
    2af8:	23 0f       	add	r18, r19
    2afa:	2d 37       	cpi	r18, 0x7D	; 125
    2afc:	20 f4       	brcc	.+8      	; 0x2b06 <__vector_16+0x3a>
    2afe:	01 96       	adiw	r24, 0x01	; 1
    2b00:	a1 1d       	adc	r26, r1
    2b02:	b1 1d       	adc	r27, r1
    2b04:	05 c0       	rjmp	.+10     	; 0x2b10 <__vector_16+0x44>
    2b06:	26 e8       	ldi	r18, 0x86	; 134
    2b08:	23 0f       	add	r18, r19
    2b0a:	02 96       	adiw	r24, 0x02	; 2
    2b0c:	a1 1d       	adc	r26, r1
    2b0e:	b1 1d       	adc	r27, r1
    2b10:	20 93 62 03 	sts	0x0362, r18	; 0x800362 <timer0_fract>
    2b14:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <timer0_millis>
    2b18:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <timer0_millis+0x1>
    2b1c:	a0 93 65 03 	sts	0x0365, r26	; 0x800365 <timer0_millis+0x2>
    2b20:	b0 93 66 03 	sts	0x0366, r27	; 0x800366 <timer0_millis+0x3>
    2b24:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <timer0_overflow_count>
    2b28:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <timer0_overflow_count+0x1>
    2b2c:	a0 91 69 03 	lds	r26, 0x0369	; 0x800369 <timer0_overflow_count+0x2>
    2b30:	b0 91 6a 03 	lds	r27, 0x036A	; 0x80036a <timer0_overflow_count+0x3>
    2b34:	01 96       	adiw	r24, 0x01	; 1
    2b36:	a1 1d       	adc	r26, r1
    2b38:	b1 1d       	adc	r27, r1
    2b3a:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <timer0_overflow_count>
    2b3e:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <timer0_overflow_count+0x1>
    2b42:	a0 93 69 03 	sts	0x0369, r26	; 0x800369 <timer0_overflow_count+0x2>
    2b46:	b0 93 6a 03 	sts	0x036A, r27	; 0x80036a <timer0_overflow_count+0x3>
    2b4a:	bf 91       	pop	r27
    2b4c:	af 91       	pop	r26
    2b4e:	9f 91       	pop	r25
    2b50:	8f 91       	pop	r24
    2b52:	3f 91       	pop	r19
    2b54:	2f 91       	pop	r18
    2b56:	0f 90       	pop	r0
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	0f 90       	pop	r0
    2b5c:	1f 90       	pop	r1
    2b5e:	18 95       	reti

00002b60 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2b60:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2b62:	84 b5       	in	r24, 0x24	; 36
    2b64:	82 60       	ori	r24, 0x02	; 2
    2b66:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2b68:	84 b5       	in	r24, 0x24	; 36
    2b6a:	81 60       	ori	r24, 0x01	; 1
    2b6c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2b6e:	85 b5       	in	r24, 0x25	; 37
    2b70:	82 60       	ori	r24, 0x02	; 2
    2b72:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2b74:	85 b5       	in	r24, 0x25	; 37
    2b76:	81 60       	ori	r24, 0x01	; 1
    2b78:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2b7a:	ee e6       	ldi	r30, 0x6E	; 110
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	81 60       	ori	r24, 0x01	; 1
    2b82:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2b84:	e1 e8       	ldi	r30, 0x81	; 129
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2b8a:	80 81       	ld	r24, Z
    2b8c:	82 60       	ori	r24, 0x02	; 2
    2b8e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2b90:	80 81       	ld	r24, Z
    2b92:	81 60       	ori	r24, 0x01	; 1
    2b94:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2b96:	e0 e8       	ldi	r30, 0x80	; 128
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	81 60       	ori	r24, 0x01	; 1
    2b9e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2ba0:	e1 eb       	ldi	r30, 0xB1	; 177
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	84 60       	ori	r24, 0x04	; 4
    2ba8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2baa:	e0 eb       	ldi	r30, 0xB0	; 176
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	81 60       	ori	r24, 0x01	; 1
    2bb2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2bb4:	ea e7       	ldi	r30, 0x7A	; 122
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	84 60       	ori	r24, 0x04	; 4
    2bbc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2bbe:	80 81       	ld	r24, Z
    2bc0:	82 60       	ori	r24, 0x02	; 2
    2bc2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2bc4:	80 81       	ld	r24, Z
    2bc6:	81 60       	ori	r24, 0x01	; 1
    2bc8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2bca:	80 81       	ld	r24, Z
    2bcc:	80 68       	ori	r24, 0x80	; 128
    2bce:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2bd0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2bd4:	08 95       	ret

00002bd6 <__mulsi3>:
    2bd6:	db 01       	movw	r26, r22
    2bd8:	8f 93       	push	r24
    2bda:	9f 93       	push	r25
    2bdc:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <__muluhisi3>
    2be0:	bf 91       	pop	r27
    2be2:	af 91       	pop	r26
    2be4:	a2 9f       	mul	r26, r18
    2be6:	80 0d       	add	r24, r0
    2be8:	91 1d       	adc	r25, r1
    2bea:	a3 9f       	mul	r26, r19
    2bec:	90 0d       	add	r25, r0
    2bee:	b2 9f       	mul	r27, r18
    2bf0:	90 0d       	add	r25, r0
    2bf2:	11 24       	eor	r1, r1
    2bf4:	08 95       	ret

00002bf6 <__udivmodsi4>:
    2bf6:	a1 e2       	ldi	r26, 0x21	; 33
    2bf8:	1a 2e       	mov	r1, r26
    2bfa:	aa 1b       	sub	r26, r26
    2bfc:	bb 1b       	sub	r27, r27
    2bfe:	fd 01       	movw	r30, r26
    2c00:	0d c0       	rjmp	.+26     	; 0x2c1c <__udivmodsi4_ep>

00002c02 <__udivmodsi4_loop>:
    2c02:	aa 1f       	adc	r26, r26
    2c04:	bb 1f       	adc	r27, r27
    2c06:	ee 1f       	adc	r30, r30
    2c08:	ff 1f       	adc	r31, r31
    2c0a:	a2 17       	cp	r26, r18
    2c0c:	b3 07       	cpc	r27, r19
    2c0e:	e4 07       	cpc	r30, r20
    2c10:	f5 07       	cpc	r31, r21
    2c12:	20 f0       	brcs	.+8      	; 0x2c1c <__udivmodsi4_ep>
    2c14:	a2 1b       	sub	r26, r18
    2c16:	b3 0b       	sbc	r27, r19
    2c18:	e4 0b       	sbc	r30, r20
    2c1a:	f5 0b       	sbc	r31, r21

00002c1c <__udivmodsi4_ep>:
    2c1c:	66 1f       	adc	r22, r22
    2c1e:	77 1f       	adc	r23, r23
    2c20:	88 1f       	adc	r24, r24
    2c22:	99 1f       	adc	r25, r25
    2c24:	1a 94       	dec	r1
    2c26:	69 f7       	brne	.-38     	; 0x2c02 <__udivmodsi4_loop>
    2c28:	60 95       	com	r22
    2c2a:	70 95       	com	r23
    2c2c:	80 95       	com	r24
    2c2e:	90 95       	com	r25
    2c30:	9b 01       	movw	r18, r22
    2c32:	ac 01       	movw	r20, r24
    2c34:	bd 01       	movw	r22, r26
    2c36:	cf 01       	movw	r24, r30
    2c38:	08 95       	ret

00002c3a <__muluhisi3>:
    2c3a:	0e 94 30 16 	call	0x2c60	; 0x2c60 <__umulhisi3>
    2c3e:	a5 9f       	mul	r26, r21
    2c40:	90 0d       	add	r25, r0
    2c42:	b4 9f       	mul	r27, r20
    2c44:	90 0d       	add	r25, r0
    2c46:	a4 9f       	mul	r26, r20
    2c48:	80 0d       	add	r24, r0
    2c4a:	91 1d       	adc	r25, r1
    2c4c:	11 24       	eor	r1, r1
    2c4e:	08 95       	ret

00002c50 <__mulshisi3>:
    2c50:	b7 ff       	sbrs	r27, 7
    2c52:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__muluhisi3>

00002c56 <__mulohisi3>:
    2c56:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <__muluhisi3>
    2c5a:	82 1b       	sub	r24, r18
    2c5c:	93 0b       	sbc	r25, r19
    2c5e:	08 95       	ret

00002c60 <__umulhisi3>:
    2c60:	a2 9f       	mul	r26, r18
    2c62:	b0 01       	movw	r22, r0
    2c64:	b3 9f       	mul	r27, r19
    2c66:	c0 01       	movw	r24, r0
    2c68:	a3 9f       	mul	r26, r19
    2c6a:	70 0d       	add	r23, r0
    2c6c:	81 1d       	adc	r24, r1
    2c6e:	11 24       	eor	r1, r1
    2c70:	91 1d       	adc	r25, r1
    2c72:	b2 9f       	mul	r27, r18
    2c74:	70 0d       	add	r23, r0
    2c76:	81 1d       	adc	r24, r1
    2c78:	11 24       	eor	r1, r1
    2c7a:	91 1d       	adc	r25, r1
    2c7c:	08 95       	ret

00002c7e <malloc>:
    2c7e:	0f 93       	push	r16
    2c80:	1f 93       	push	r17
    2c82:	cf 93       	push	r28
    2c84:	df 93       	push	r29
    2c86:	82 30       	cpi	r24, 0x02	; 2
    2c88:	91 05       	cpc	r25, r1
    2c8a:	10 f4       	brcc	.+4      	; 0x2c90 <malloc+0x12>
    2c8c:	82 e0       	ldi	r24, 0x02	; 2
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <__flp>
    2c94:	f0 91 6e 03 	lds	r31, 0x036E	; 0x80036e <__flp+0x1>
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	a0 e0       	ldi	r26, 0x00	; 0
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	30 97       	sbiw	r30, 0x00	; 0
    2ca2:	19 f1       	breq	.+70     	; 0x2cea <malloc+0x6c>
    2ca4:	40 81       	ld	r20, Z
    2ca6:	51 81       	ldd	r21, Z+1	; 0x01
    2ca8:	02 81       	ldd	r16, Z+2	; 0x02
    2caa:	13 81       	ldd	r17, Z+3	; 0x03
    2cac:	48 17       	cp	r20, r24
    2cae:	59 07       	cpc	r21, r25
    2cb0:	c8 f0       	brcs	.+50     	; 0x2ce4 <malloc+0x66>
    2cb2:	84 17       	cp	r24, r20
    2cb4:	95 07       	cpc	r25, r21
    2cb6:	69 f4       	brne	.+26     	; 0x2cd2 <malloc+0x54>
    2cb8:	10 97       	sbiw	r26, 0x00	; 0
    2cba:	31 f0       	breq	.+12     	; 0x2cc8 <malloc+0x4a>
    2cbc:	12 96       	adiw	r26, 0x02	; 2
    2cbe:	0c 93       	st	X, r16
    2cc0:	12 97       	sbiw	r26, 0x02	; 2
    2cc2:	13 96       	adiw	r26, 0x03	; 3
    2cc4:	1c 93       	st	X, r17
    2cc6:	27 c0       	rjmp	.+78     	; 0x2d16 <malloc+0x98>
    2cc8:	00 93 6d 03 	sts	0x036D, r16	; 0x80036d <__flp>
    2ccc:	10 93 6e 03 	sts	0x036E, r17	; 0x80036e <__flp+0x1>
    2cd0:	22 c0       	rjmp	.+68     	; 0x2d16 <malloc+0x98>
    2cd2:	21 15       	cp	r18, r1
    2cd4:	31 05       	cpc	r19, r1
    2cd6:	19 f0       	breq	.+6      	; 0x2cde <malloc+0x60>
    2cd8:	42 17       	cp	r20, r18
    2cda:	53 07       	cpc	r21, r19
    2cdc:	18 f4       	brcc	.+6      	; 0x2ce4 <malloc+0x66>
    2cde:	9a 01       	movw	r18, r20
    2ce0:	bd 01       	movw	r22, r26
    2ce2:	ef 01       	movw	r28, r30
    2ce4:	df 01       	movw	r26, r30
    2ce6:	f8 01       	movw	r30, r16
    2ce8:	db cf       	rjmp	.-74     	; 0x2ca0 <malloc+0x22>
    2cea:	21 15       	cp	r18, r1
    2cec:	31 05       	cpc	r19, r1
    2cee:	f9 f0       	breq	.+62     	; 0x2d2e <malloc+0xb0>
    2cf0:	28 1b       	sub	r18, r24
    2cf2:	39 0b       	sbc	r19, r25
    2cf4:	24 30       	cpi	r18, 0x04	; 4
    2cf6:	31 05       	cpc	r19, r1
    2cf8:	80 f4       	brcc	.+32     	; 0x2d1a <malloc+0x9c>
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cfe:	61 15       	cp	r22, r1
    2d00:	71 05       	cpc	r23, r1
    2d02:	21 f0       	breq	.+8      	; 0x2d0c <malloc+0x8e>
    2d04:	fb 01       	movw	r30, r22
    2d06:	93 83       	std	Z+3, r25	; 0x03
    2d08:	82 83       	std	Z+2, r24	; 0x02
    2d0a:	04 c0       	rjmp	.+8      	; 0x2d14 <malloc+0x96>
    2d0c:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <__flp+0x1>
    2d10:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <__flp>
    2d14:	fe 01       	movw	r30, r28
    2d16:	32 96       	adiw	r30, 0x02	; 2
    2d18:	44 c0       	rjmp	.+136    	; 0x2da2 <malloc+0x124>
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	e2 0f       	add	r30, r18
    2d1e:	f3 1f       	adc	r31, r19
    2d20:	81 93       	st	Z+, r24
    2d22:	91 93       	st	Z+, r25
    2d24:	22 50       	subi	r18, 0x02	; 2
    2d26:	31 09       	sbc	r19, r1
    2d28:	39 83       	std	Y+1, r19	; 0x01
    2d2a:	28 83       	st	Y, r18
    2d2c:	3a c0       	rjmp	.+116    	; 0x2da2 <malloc+0x124>
    2d2e:	20 91 6b 03 	lds	r18, 0x036B	; 0x80036b <__brkval>
    2d32:	30 91 6c 03 	lds	r19, 0x036C	; 0x80036c <__brkval+0x1>
    2d36:	23 2b       	or	r18, r19
    2d38:	41 f4       	brne	.+16     	; 0x2d4a <malloc+0xcc>
    2d3a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2d3e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2d42:	30 93 6c 03 	sts	0x036C, r19	; 0x80036c <__brkval+0x1>
    2d46:	20 93 6b 03 	sts	0x036B, r18	; 0x80036b <__brkval>
    2d4a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2d4e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2d52:	21 15       	cp	r18, r1
    2d54:	31 05       	cpc	r19, r1
    2d56:	41 f4       	brne	.+16     	; 0x2d68 <malloc+0xea>
    2d58:	2d b7       	in	r18, 0x3d	; 61
    2d5a:	3e b7       	in	r19, 0x3e	; 62
    2d5c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2d60:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2d64:	24 1b       	sub	r18, r20
    2d66:	35 0b       	sbc	r19, r21
    2d68:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <__brkval>
    2d6c:	f0 91 6c 03 	lds	r31, 0x036C	; 0x80036c <__brkval+0x1>
    2d70:	e2 17       	cp	r30, r18
    2d72:	f3 07       	cpc	r31, r19
    2d74:	a0 f4       	brcc	.+40     	; 0x2d9e <malloc+0x120>
    2d76:	2e 1b       	sub	r18, r30
    2d78:	3f 0b       	sbc	r19, r31
    2d7a:	28 17       	cp	r18, r24
    2d7c:	39 07       	cpc	r19, r25
    2d7e:	78 f0       	brcs	.+30     	; 0x2d9e <malloc+0x120>
    2d80:	ac 01       	movw	r20, r24
    2d82:	4e 5f       	subi	r20, 0xFE	; 254
    2d84:	5f 4f       	sbci	r21, 0xFF	; 255
    2d86:	24 17       	cp	r18, r20
    2d88:	35 07       	cpc	r19, r21
    2d8a:	48 f0       	brcs	.+18     	; 0x2d9e <malloc+0x120>
    2d8c:	4e 0f       	add	r20, r30
    2d8e:	5f 1f       	adc	r21, r31
    2d90:	50 93 6c 03 	sts	0x036C, r21	; 0x80036c <__brkval+0x1>
    2d94:	40 93 6b 03 	sts	0x036B, r20	; 0x80036b <__brkval>
    2d98:	81 93       	st	Z+, r24
    2d9a:	91 93       	st	Z+, r25
    2d9c:	02 c0       	rjmp	.+4      	; 0x2da2 <malloc+0x124>
    2d9e:	e0 e0       	ldi	r30, 0x00	; 0
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	cf 01       	movw	r24, r30
    2da4:	df 91       	pop	r29
    2da6:	cf 91       	pop	r28
    2da8:	1f 91       	pop	r17
    2daa:	0f 91       	pop	r16
    2dac:	08 95       	ret

00002dae <free>:
    2dae:	cf 93       	push	r28
    2db0:	df 93       	push	r29
    2db2:	00 97       	sbiw	r24, 0x00	; 0
    2db4:	09 f4       	brne	.+2      	; 0x2db8 <free+0xa>
    2db6:	81 c0       	rjmp	.+258    	; 0x2eba <free+0x10c>
    2db8:	fc 01       	movw	r30, r24
    2dba:	32 97       	sbiw	r30, 0x02	; 2
    2dbc:	13 82       	std	Z+3, r1	; 0x03
    2dbe:	12 82       	std	Z+2, r1	; 0x02
    2dc0:	a0 91 6d 03 	lds	r26, 0x036D	; 0x80036d <__flp>
    2dc4:	b0 91 6e 03 	lds	r27, 0x036E	; 0x80036e <__flp+0x1>
    2dc8:	10 97       	sbiw	r26, 0x00	; 0
    2dca:	81 f4       	brne	.+32     	; 0x2dec <free+0x3e>
    2dcc:	20 81       	ld	r18, Z
    2dce:	31 81       	ldd	r19, Z+1	; 0x01
    2dd0:	82 0f       	add	r24, r18
    2dd2:	93 1f       	adc	r25, r19
    2dd4:	20 91 6b 03 	lds	r18, 0x036B	; 0x80036b <__brkval>
    2dd8:	30 91 6c 03 	lds	r19, 0x036C	; 0x80036c <__brkval+0x1>
    2ddc:	28 17       	cp	r18, r24
    2dde:	39 07       	cpc	r19, r25
    2de0:	51 f5       	brne	.+84     	; 0x2e36 <free+0x88>
    2de2:	f0 93 6c 03 	sts	0x036C, r31	; 0x80036c <__brkval+0x1>
    2de6:	e0 93 6b 03 	sts	0x036B, r30	; 0x80036b <__brkval>
    2dea:	67 c0       	rjmp	.+206    	; 0x2eba <free+0x10c>
    2dec:	ed 01       	movw	r28, r26
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	ce 17       	cp	r28, r30
    2df4:	df 07       	cpc	r29, r31
    2df6:	40 f4       	brcc	.+16     	; 0x2e08 <free+0x5a>
    2df8:	4a 81       	ldd	r20, Y+2	; 0x02
    2dfa:	5b 81       	ldd	r21, Y+3	; 0x03
    2dfc:	9e 01       	movw	r18, r28
    2dfe:	41 15       	cp	r20, r1
    2e00:	51 05       	cpc	r21, r1
    2e02:	f1 f0       	breq	.+60     	; 0x2e40 <free+0x92>
    2e04:	ea 01       	movw	r28, r20
    2e06:	f5 cf       	rjmp	.-22     	; 0x2df2 <free+0x44>
    2e08:	d3 83       	std	Z+3, r29	; 0x03
    2e0a:	c2 83       	std	Z+2, r28	; 0x02
    2e0c:	40 81       	ld	r20, Z
    2e0e:	51 81       	ldd	r21, Z+1	; 0x01
    2e10:	84 0f       	add	r24, r20
    2e12:	95 1f       	adc	r25, r21
    2e14:	c8 17       	cp	r28, r24
    2e16:	d9 07       	cpc	r29, r25
    2e18:	59 f4       	brne	.+22     	; 0x2e30 <free+0x82>
    2e1a:	88 81       	ld	r24, Y
    2e1c:	99 81       	ldd	r25, Y+1	; 0x01
    2e1e:	84 0f       	add	r24, r20
    2e20:	95 1f       	adc	r25, r21
    2e22:	02 96       	adiw	r24, 0x02	; 2
    2e24:	91 83       	std	Z+1, r25	; 0x01
    2e26:	80 83       	st	Z, r24
    2e28:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e2c:	93 83       	std	Z+3, r25	; 0x03
    2e2e:	82 83       	std	Z+2, r24	; 0x02
    2e30:	21 15       	cp	r18, r1
    2e32:	31 05       	cpc	r19, r1
    2e34:	29 f4       	brne	.+10     	; 0x2e40 <free+0x92>
    2e36:	f0 93 6e 03 	sts	0x036E, r31	; 0x80036e <__flp+0x1>
    2e3a:	e0 93 6d 03 	sts	0x036D, r30	; 0x80036d <__flp>
    2e3e:	3d c0       	rjmp	.+122    	; 0x2eba <free+0x10c>
    2e40:	e9 01       	movw	r28, r18
    2e42:	fb 83       	std	Y+3, r31	; 0x03
    2e44:	ea 83       	std	Y+2, r30	; 0x02
    2e46:	49 91       	ld	r20, Y+
    2e48:	59 91       	ld	r21, Y+
    2e4a:	c4 0f       	add	r28, r20
    2e4c:	d5 1f       	adc	r29, r21
    2e4e:	ec 17       	cp	r30, r28
    2e50:	fd 07       	cpc	r31, r29
    2e52:	61 f4       	brne	.+24     	; 0x2e6c <free+0xbe>
    2e54:	80 81       	ld	r24, Z
    2e56:	91 81       	ldd	r25, Z+1	; 0x01
    2e58:	84 0f       	add	r24, r20
    2e5a:	95 1f       	adc	r25, r21
    2e5c:	02 96       	adiw	r24, 0x02	; 2
    2e5e:	e9 01       	movw	r28, r18
    2e60:	99 83       	std	Y+1, r25	; 0x01
    2e62:	88 83       	st	Y, r24
    2e64:	82 81       	ldd	r24, Z+2	; 0x02
    2e66:	93 81       	ldd	r25, Z+3	; 0x03
    2e68:	9b 83       	std	Y+3, r25	; 0x03
    2e6a:	8a 83       	std	Y+2, r24	; 0x02
    2e6c:	e0 e0       	ldi	r30, 0x00	; 0
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	12 96       	adiw	r26, 0x02	; 2
    2e72:	8d 91       	ld	r24, X+
    2e74:	9c 91       	ld	r25, X
    2e76:	13 97       	sbiw	r26, 0x03	; 3
    2e78:	00 97       	sbiw	r24, 0x00	; 0
    2e7a:	19 f0       	breq	.+6      	; 0x2e82 <free+0xd4>
    2e7c:	fd 01       	movw	r30, r26
    2e7e:	dc 01       	movw	r26, r24
    2e80:	f7 cf       	rjmp	.-18     	; 0x2e70 <free+0xc2>
    2e82:	8d 91       	ld	r24, X+
    2e84:	9c 91       	ld	r25, X
    2e86:	11 97       	sbiw	r26, 0x01	; 1
    2e88:	9d 01       	movw	r18, r26
    2e8a:	2e 5f       	subi	r18, 0xFE	; 254
    2e8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e8e:	82 0f       	add	r24, r18
    2e90:	93 1f       	adc	r25, r19
    2e92:	20 91 6b 03 	lds	r18, 0x036B	; 0x80036b <__brkval>
    2e96:	30 91 6c 03 	lds	r19, 0x036C	; 0x80036c <__brkval+0x1>
    2e9a:	28 17       	cp	r18, r24
    2e9c:	39 07       	cpc	r19, r25
    2e9e:	69 f4       	brne	.+26     	; 0x2eba <free+0x10c>
    2ea0:	30 97       	sbiw	r30, 0x00	; 0
    2ea2:	29 f4       	brne	.+10     	; 0x2eae <free+0x100>
    2ea4:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <__flp+0x1>
    2ea8:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <__flp>
    2eac:	02 c0       	rjmp	.+4      	; 0x2eb2 <free+0x104>
    2eae:	13 82       	std	Z+3, r1	; 0x03
    2eb0:	12 82       	std	Z+2, r1	; 0x02
    2eb2:	b0 93 6c 03 	sts	0x036C, r27	; 0x80036c <__brkval+0x1>
    2eb6:	a0 93 6b 03 	sts	0x036B, r26	; 0x80036b <__brkval>
    2eba:	df 91       	pop	r29
    2ebc:	cf 91       	pop	r28
    2ebe:	08 95       	ret

00002ec0 <strcpy>:
    2ec0:	fb 01       	movw	r30, r22
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	01 90       	ld	r0, Z+
    2ec6:	0d 92       	st	X+, r0
    2ec8:	00 20       	and	r0, r0
    2eca:	e1 f7       	brne	.-8      	; 0x2ec4 <strcpy+0x4>
    2ecc:	08 95       	ret

00002ece <fputs>:
    2ece:	ef 92       	push	r14
    2ed0:	ff 92       	push	r15
    2ed2:	0f 93       	push	r16
    2ed4:	1f 93       	push	r17
    2ed6:	cf 93       	push	r28
    2ed8:	df 93       	push	r29
    2eda:	db 01       	movw	r26, r22
    2edc:	13 96       	adiw	r26, 0x03	; 3
    2ede:	2c 91       	ld	r18, X
    2ee0:	21 ff       	sbrs	r18, 1
    2ee2:	18 c0       	rjmp	.+48     	; 0x2f14 <fputs+0x46>
    2ee4:	8b 01       	movw	r16, r22
    2ee6:	7c 01       	movw	r14, r24
    2ee8:	d0 e0       	ldi	r29, 0x00	; 0
    2eea:	c0 e0       	ldi	r28, 0x00	; 0
    2eec:	f7 01       	movw	r30, r14
    2eee:	81 91       	ld	r24, Z+
    2ef0:	7f 01       	movw	r14, r30
    2ef2:	88 23       	and	r24, r24
    2ef4:	61 f0       	breq	.+24     	; 0x2f0e <fputs+0x40>
    2ef6:	d8 01       	movw	r26, r16
    2ef8:	18 96       	adiw	r26, 0x08	; 8
    2efa:	ed 91       	ld	r30, X+
    2efc:	fc 91       	ld	r31, X
    2efe:	19 97       	sbiw	r26, 0x09	; 9
    2f00:	b8 01       	movw	r22, r16
    2f02:	09 95       	icall
    2f04:	89 2b       	or	r24, r25
    2f06:	91 f3       	breq	.-28     	; 0x2eec <fputs+0x1e>
    2f08:	df ef       	ldi	r29, 0xFF	; 255
    2f0a:	cf ef       	ldi	r28, 0xFF	; 255
    2f0c:	ef cf       	rjmp	.-34     	; 0x2eec <fputs+0x1e>
    2f0e:	8d 2f       	mov	r24, r29
    2f10:	9c 2f       	mov	r25, r28
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <fputs+0x4a>
    2f14:	8f ef       	ldi	r24, 0xFF	; 255
    2f16:	9f ef       	ldi	r25, 0xFF	; 255
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	e6 e0       	ldi	r30, 0x06	; 6
    2f1e:	0c 94 9c 1a 	jmp	0x3538	; 0x3538 <__epilogue_restores__+0x18>

00002f22 <puts>:
    2f22:	0f 93       	push	r16
    2f24:	1f 93       	push	r17
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <__iob+0x2>
    2f2e:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <__iob+0x3>
    2f32:	23 81       	ldd	r18, Z+3	; 0x03
    2f34:	21 ff       	sbrs	r18, 1
    2f36:	1b c0       	rjmp	.+54     	; 0x2f6e <puts+0x4c>
    2f38:	8c 01       	movw	r16, r24
    2f3a:	d0 e0       	ldi	r29, 0x00	; 0
    2f3c:	c0 e0       	ldi	r28, 0x00	; 0
    2f3e:	f8 01       	movw	r30, r16
    2f40:	81 91       	ld	r24, Z+
    2f42:	8f 01       	movw	r16, r30
    2f44:	60 91 71 03 	lds	r22, 0x0371	; 0x800371 <__iob+0x2>
    2f48:	70 91 72 03 	lds	r23, 0x0372	; 0x800372 <__iob+0x3>
    2f4c:	db 01       	movw	r26, r22
    2f4e:	18 96       	adiw	r26, 0x08	; 8
    2f50:	ed 91       	ld	r30, X+
    2f52:	fc 91       	ld	r31, X
    2f54:	19 97       	sbiw	r26, 0x09	; 9
    2f56:	88 23       	and	r24, r24
    2f58:	31 f0       	breq	.+12     	; 0x2f66 <puts+0x44>
    2f5a:	09 95       	icall
    2f5c:	89 2b       	or	r24, r25
    2f5e:	79 f3       	breq	.-34     	; 0x2f3e <puts+0x1c>
    2f60:	df ef       	ldi	r29, 0xFF	; 255
    2f62:	cf ef       	ldi	r28, 0xFF	; 255
    2f64:	ec cf       	rjmp	.-40     	; 0x2f3e <puts+0x1c>
    2f66:	8a e0       	ldi	r24, 0x0A	; 10
    2f68:	09 95       	icall
    2f6a:	89 2b       	or	r24, r25
    2f6c:	19 f0       	breq	.+6      	; 0x2f74 <puts+0x52>
    2f6e:	8f ef       	ldi	r24, 0xFF	; 255
    2f70:	9f ef       	ldi	r25, 0xFF	; 255
    2f72:	02 c0       	rjmp	.+4      	; 0x2f78 <puts+0x56>
    2f74:	8d 2f       	mov	r24, r29
    2f76:	9c 2f       	mov	r25, r28
    2f78:	df 91       	pop	r29
    2f7a:	cf 91       	pop	r28
    2f7c:	1f 91       	pop	r17
    2f7e:	0f 91       	pop	r16
    2f80:	08 95       	ret

00002f82 <sprintf>:
    2f82:	ae e0       	ldi	r26, 0x0E	; 14
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	e7 ec       	ldi	r30, 0xC7	; 199
    2f88:	f7 e1       	ldi	r31, 0x17	; 23
    2f8a:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__prologue_saves__+0x1c>
    2f8e:	0d 89       	ldd	r16, Y+21	; 0x15
    2f90:	1e 89       	ldd	r17, Y+22	; 0x16
    2f92:	86 e0       	ldi	r24, 0x06	; 6
    2f94:	8c 83       	std	Y+4, r24	; 0x04
    2f96:	1a 83       	std	Y+2, r17	; 0x02
    2f98:	09 83       	std	Y+1, r16	; 0x01
    2f9a:	8f ef       	ldi	r24, 0xFF	; 255
    2f9c:	9f e7       	ldi	r25, 0x7F	; 127
    2f9e:	9e 83       	std	Y+6, r25	; 0x06
    2fa0:	8d 83       	std	Y+5, r24	; 0x05
    2fa2:	ae 01       	movw	r20, r28
    2fa4:	47 5e       	subi	r20, 0xE7	; 231
    2fa6:	5f 4f       	sbci	r21, 0xFF	; 255
    2fa8:	6f 89       	ldd	r22, Y+23	; 0x17
    2faa:	78 8d       	ldd	r23, Y+24	; 0x18
    2fac:	ce 01       	movw	r24, r28
    2fae:	01 96       	adiw	r24, 0x01	; 1
    2fb0:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <vfprintf>
    2fb4:	ef 81       	ldd	r30, Y+7	; 0x07
    2fb6:	f8 85       	ldd	r31, Y+8	; 0x08
    2fb8:	e0 0f       	add	r30, r16
    2fba:	f1 1f       	adc	r31, r17
    2fbc:	10 82       	st	Z, r1
    2fbe:	2e 96       	adiw	r28, 0x0e	; 14
    2fc0:	e4 e0       	ldi	r30, 0x04	; 4
    2fc2:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__epilogue_restores__+0x1c>

00002fc6 <vfprintf>:
    2fc6:	ab e0       	ldi	r26, 0x0B	; 11
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	e9 ee       	ldi	r30, 0xE9	; 233
    2fcc:	f7 e1       	ldi	r31, 0x17	; 23
    2fce:	0c 94 74 1a 	jmp	0x34e8	; 0x34e8 <__prologue_saves__>
    2fd2:	6c 01       	movw	r12, r24
    2fd4:	7b 01       	movw	r14, r22
    2fd6:	8a 01       	movw	r16, r20
    2fd8:	fc 01       	movw	r30, r24
    2fda:	17 82       	std	Z+7, r1	; 0x07
    2fdc:	16 82       	std	Z+6, r1	; 0x06
    2fde:	83 81       	ldd	r24, Z+3	; 0x03
    2fe0:	81 ff       	sbrs	r24, 1
    2fe2:	cc c1       	rjmp	.+920    	; 0x337c <vfprintf+0x3b6>
    2fe4:	ce 01       	movw	r24, r28
    2fe6:	01 96       	adiw	r24, 0x01	; 1
    2fe8:	3c 01       	movw	r6, r24
    2fea:	f6 01       	movw	r30, r12
    2fec:	93 81       	ldd	r25, Z+3	; 0x03
    2fee:	f7 01       	movw	r30, r14
    2ff0:	93 fd       	sbrc	r25, 3
    2ff2:	85 91       	lpm	r24, Z+
    2ff4:	93 ff       	sbrs	r25, 3
    2ff6:	81 91       	ld	r24, Z+
    2ff8:	7f 01       	movw	r14, r30
    2ffa:	88 23       	and	r24, r24
    2ffc:	09 f4       	brne	.+2      	; 0x3000 <vfprintf+0x3a>
    2ffe:	ba c1       	rjmp	.+884    	; 0x3374 <vfprintf+0x3ae>
    3000:	85 32       	cpi	r24, 0x25	; 37
    3002:	39 f4       	brne	.+14     	; 0x3012 <vfprintf+0x4c>
    3004:	93 fd       	sbrc	r25, 3
    3006:	85 91       	lpm	r24, Z+
    3008:	93 ff       	sbrs	r25, 3
    300a:	81 91       	ld	r24, Z+
    300c:	7f 01       	movw	r14, r30
    300e:	85 32       	cpi	r24, 0x25	; 37
    3010:	29 f4       	brne	.+10     	; 0x301c <vfprintf+0x56>
    3012:	b6 01       	movw	r22, r12
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	0e 94 da 19 	call	0x33b4	; 0x33b4 <fputc>
    301a:	e7 cf       	rjmp	.-50     	; 0x2fea <vfprintf+0x24>
    301c:	91 2c       	mov	r9, r1
    301e:	21 2c       	mov	r2, r1
    3020:	31 2c       	mov	r3, r1
    3022:	ff e1       	ldi	r31, 0x1F	; 31
    3024:	f3 15       	cp	r31, r3
    3026:	d8 f0       	brcs	.+54     	; 0x305e <vfprintf+0x98>
    3028:	8b 32       	cpi	r24, 0x2B	; 43
    302a:	79 f0       	breq	.+30     	; 0x304a <vfprintf+0x84>
    302c:	38 f4       	brcc	.+14     	; 0x303c <vfprintf+0x76>
    302e:	80 32       	cpi	r24, 0x20	; 32
    3030:	79 f0       	breq	.+30     	; 0x3050 <vfprintf+0x8a>
    3032:	83 32       	cpi	r24, 0x23	; 35
    3034:	a1 f4       	brne	.+40     	; 0x305e <vfprintf+0x98>
    3036:	23 2d       	mov	r18, r3
    3038:	20 61       	ori	r18, 0x10	; 16
    303a:	1d c0       	rjmp	.+58     	; 0x3076 <vfprintf+0xb0>
    303c:	8d 32       	cpi	r24, 0x2D	; 45
    303e:	61 f0       	breq	.+24     	; 0x3058 <vfprintf+0x92>
    3040:	80 33       	cpi	r24, 0x30	; 48
    3042:	69 f4       	brne	.+26     	; 0x305e <vfprintf+0x98>
    3044:	23 2d       	mov	r18, r3
    3046:	21 60       	ori	r18, 0x01	; 1
    3048:	16 c0       	rjmp	.+44     	; 0x3076 <vfprintf+0xb0>
    304a:	83 2d       	mov	r24, r3
    304c:	82 60       	ori	r24, 0x02	; 2
    304e:	38 2e       	mov	r3, r24
    3050:	e3 2d       	mov	r30, r3
    3052:	e4 60       	ori	r30, 0x04	; 4
    3054:	3e 2e       	mov	r3, r30
    3056:	2a c0       	rjmp	.+84     	; 0x30ac <vfprintf+0xe6>
    3058:	f3 2d       	mov	r31, r3
    305a:	f8 60       	ori	r31, 0x08	; 8
    305c:	1d c0       	rjmp	.+58     	; 0x3098 <vfprintf+0xd2>
    305e:	37 fc       	sbrc	r3, 7
    3060:	2d c0       	rjmp	.+90     	; 0x30bc <vfprintf+0xf6>
    3062:	20 ed       	ldi	r18, 0xD0	; 208
    3064:	28 0f       	add	r18, r24
    3066:	2a 30       	cpi	r18, 0x0A	; 10
    3068:	40 f0       	brcs	.+16     	; 0x307a <vfprintf+0xb4>
    306a:	8e 32       	cpi	r24, 0x2E	; 46
    306c:	b9 f4       	brne	.+46     	; 0x309c <vfprintf+0xd6>
    306e:	36 fc       	sbrc	r3, 6
    3070:	81 c1       	rjmp	.+770    	; 0x3374 <vfprintf+0x3ae>
    3072:	23 2d       	mov	r18, r3
    3074:	20 64       	ori	r18, 0x40	; 64
    3076:	32 2e       	mov	r3, r18
    3078:	19 c0       	rjmp	.+50     	; 0x30ac <vfprintf+0xe6>
    307a:	36 fe       	sbrs	r3, 6
    307c:	06 c0       	rjmp	.+12     	; 0x308a <vfprintf+0xc4>
    307e:	8a e0       	ldi	r24, 0x0A	; 10
    3080:	98 9e       	mul	r9, r24
    3082:	20 0d       	add	r18, r0
    3084:	11 24       	eor	r1, r1
    3086:	92 2e       	mov	r9, r18
    3088:	11 c0       	rjmp	.+34     	; 0x30ac <vfprintf+0xe6>
    308a:	ea e0       	ldi	r30, 0x0A	; 10
    308c:	2e 9e       	mul	r2, r30
    308e:	20 0d       	add	r18, r0
    3090:	11 24       	eor	r1, r1
    3092:	22 2e       	mov	r2, r18
    3094:	f3 2d       	mov	r31, r3
    3096:	f0 62       	ori	r31, 0x20	; 32
    3098:	3f 2e       	mov	r3, r31
    309a:	08 c0       	rjmp	.+16     	; 0x30ac <vfprintf+0xe6>
    309c:	8c 36       	cpi	r24, 0x6C	; 108
    309e:	21 f4       	brne	.+8      	; 0x30a8 <vfprintf+0xe2>
    30a0:	83 2d       	mov	r24, r3
    30a2:	80 68       	ori	r24, 0x80	; 128
    30a4:	38 2e       	mov	r3, r24
    30a6:	02 c0       	rjmp	.+4      	; 0x30ac <vfprintf+0xe6>
    30a8:	88 36       	cpi	r24, 0x68	; 104
    30aa:	41 f4       	brne	.+16     	; 0x30bc <vfprintf+0xf6>
    30ac:	f7 01       	movw	r30, r14
    30ae:	93 fd       	sbrc	r25, 3
    30b0:	85 91       	lpm	r24, Z+
    30b2:	93 ff       	sbrs	r25, 3
    30b4:	81 91       	ld	r24, Z+
    30b6:	7f 01       	movw	r14, r30
    30b8:	81 11       	cpse	r24, r1
    30ba:	b3 cf       	rjmp	.-154    	; 0x3022 <vfprintf+0x5c>
    30bc:	98 2f       	mov	r25, r24
    30be:	9f 7d       	andi	r25, 0xDF	; 223
    30c0:	95 54       	subi	r25, 0x45	; 69
    30c2:	93 30       	cpi	r25, 0x03	; 3
    30c4:	28 f4       	brcc	.+10     	; 0x30d0 <vfprintf+0x10a>
    30c6:	0c 5f       	subi	r16, 0xFC	; 252
    30c8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ca:	9f e3       	ldi	r25, 0x3F	; 63
    30cc:	99 83       	std	Y+1, r25	; 0x01
    30ce:	0d c0       	rjmp	.+26     	; 0x30ea <vfprintf+0x124>
    30d0:	83 36       	cpi	r24, 0x63	; 99
    30d2:	31 f0       	breq	.+12     	; 0x30e0 <vfprintf+0x11a>
    30d4:	83 37       	cpi	r24, 0x73	; 115
    30d6:	71 f0       	breq	.+28     	; 0x30f4 <vfprintf+0x12e>
    30d8:	83 35       	cpi	r24, 0x53	; 83
    30da:	09 f0       	breq	.+2      	; 0x30de <vfprintf+0x118>
    30dc:	59 c0       	rjmp	.+178    	; 0x3190 <vfprintf+0x1ca>
    30de:	21 c0       	rjmp	.+66     	; 0x3122 <vfprintf+0x15c>
    30e0:	f8 01       	movw	r30, r16
    30e2:	80 81       	ld	r24, Z
    30e4:	89 83       	std	Y+1, r24	; 0x01
    30e6:	0e 5f       	subi	r16, 0xFE	; 254
    30e8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ea:	88 24       	eor	r8, r8
    30ec:	83 94       	inc	r8
    30ee:	91 2c       	mov	r9, r1
    30f0:	53 01       	movw	r10, r6
    30f2:	13 c0       	rjmp	.+38     	; 0x311a <vfprintf+0x154>
    30f4:	28 01       	movw	r4, r16
    30f6:	f2 e0       	ldi	r31, 0x02	; 2
    30f8:	4f 0e       	add	r4, r31
    30fa:	51 1c       	adc	r5, r1
    30fc:	f8 01       	movw	r30, r16
    30fe:	a0 80       	ld	r10, Z
    3100:	b1 80       	ldd	r11, Z+1	; 0x01
    3102:	36 fe       	sbrs	r3, 6
    3104:	03 c0       	rjmp	.+6      	; 0x310c <vfprintf+0x146>
    3106:	69 2d       	mov	r22, r9
    3108:	70 e0       	ldi	r23, 0x00	; 0
    310a:	02 c0       	rjmp	.+4      	; 0x3110 <vfprintf+0x14a>
    310c:	6f ef       	ldi	r22, 0xFF	; 255
    310e:	7f ef       	ldi	r23, 0xFF	; 255
    3110:	c5 01       	movw	r24, r10
    3112:	0e 94 cf 19 	call	0x339e	; 0x339e <strnlen>
    3116:	4c 01       	movw	r8, r24
    3118:	82 01       	movw	r16, r4
    311a:	f3 2d       	mov	r31, r3
    311c:	ff 77       	andi	r31, 0x7F	; 127
    311e:	3f 2e       	mov	r3, r31
    3120:	16 c0       	rjmp	.+44     	; 0x314e <vfprintf+0x188>
    3122:	28 01       	movw	r4, r16
    3124:	22 e0       	ldi	r18, 0x02	; 2
    3126:	42 0e       	add	r4, r18
    3128:	51 1c       	adc	r5, r1
    312a:	f8 01       	movw	r30, r16
    312c:	a0 80       	ld	r10, Z
    312e:	b1 80       	ldd	r11, Z+1	; 0x01
    3130:	36 fe       	sbrs	r3, 6
    3132:	03 c0       	rjmp	.+6      	; 0x313a <vfprintf+0x174>
    3134:	69 2d       	mov	r22, r9
    3136:	70 e0       	ldi	r23, 0x00	; 0
    3138:	02 c0       	rjmp	.+4      	; 0x313e <vfprintf+0x178>
    313a:	6f ef       	ldi	r22, 0xFF	; 255
    313c:	7f ef       	ldi	r23, 0xFF	; 255
    313e:	c5 01       	movw	r24, r10
    3140:	0e 94 c4 19 	call	0x3388	; 0x3388 <strnlen_P>
    3144:	4c 01       	movw	r8, r24
    3146:	f3 2d       	mov	r31, r3
    3148:	f0 68       	ori	r31, 0x80	; 128
    314a:	3f 2e       	mov	r3, r31
    314c:	82 01       	movw	r16, r4
    314e:	33 fc       	sbrc	r3, 3
    3150:	1b c0       	rjmp	.+54     	; 0x3188 <vfprintf+0x1c2>
    3152:	82 2d       	mov	r24, r2
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	88 16       	cp	r8, r24
    3158:	99 06       	cpc	r9, r25
    315a:	b0 f4       	brcc	.+44     	; 0x3188 <vfprintf+0x1c2>
    315c:	b6 01       	movw	r22, r12
    315e:	80 e2       	ldi	r24, 0x20	; 32
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	0e 94 da 19 	call	0x33b4	; 0x33b4 <fputc>
    3166:	2a 94       	dec	r2
    3168:	f4 cf       	rjmp	.-24     	; 0x3152 <vfprintf+0x18c>
    316a:	f5 01       	movw	r30, r10
    316c:	37 fc       	sbrc	r3, 7
    316e:	85 91       	lpm	r24, Z+
    3170:	37 fe       	sbrs	r3, 7
    3172:	81 91       	ld	r24, Z+
    3174:	5f 01       	movw	r10, r30
    3176:	b6 01       	movw	r22, r12
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	0e 94 da 19 	call	0x33b4	; 0x33b4 <fputc>
    317e:	21 10       	cpse	r2, r1
    3180:	2a 94       	dec	r2
    3182:	21 e0       	ldi	r18, 0x01	; 1
    3184:	82 1a       	sub	r8, r18
    3186:	91 08       	sbc	r9, r1
    3188:	81 14       	cp	r8, r1
    318a:	91 04       	cpc	r9, r1
    318c:	71 f7       	brne	.-36     	; 0x316a <vfprintf+0x1a4>
    318e:	e8 c0       	rjmp	.+464    	; 0x3360 <vfprintf+0x39a>
    3190:	84 36       	cpi	r24, 0x64	; 100
    3192:	11 f0       	breq	.+4      	; 0x3198 <vfprintf+0x1d2>
    3194:	89 36       	cpi	r24, 0x69	; 105
    3196:	41 f5       	brne	.+80     	; 0x31e8 <vfprintf+0x222>
    3198:	f8 01       	movw	r30, r16
    319a:	37 fe       	sbrs	r3, 7
    319c:	07 c0       	rjmp	.+14     	; 0x31ac <vfprintf+0x1e6>
    319e:	60 81       	ld	r22, Z
    31a0:	71 81       	ldd	r23, Z+1	; 0x01
    31a2:	82 81       	ldd	r24, Z+2	; 0x02
    31a4:	93 81       	ldd	r25, Z+3	; 0x03
    31a6:	0c 5f       	subi	r16, 0xFC	; 252
    31a8:	1f 4f       	sbci	r17, 0xFF	; 255
    31aa:	08 c0       	rjmp	.+16     	; 0x31bc <vfprintf+0x1f6>
    31ac:	60 81       	ld	r22, Z
    31ae:	71 81       	ldd	r23, Z+1	; 0x01
    31b0:	07 2e       	mov	r0, r23
    31b2:	00 0c       	add	r0, r0
    31b4:	88 0b       	sbc	r24, r24
    31b6:	99 0b       	sbc	r25, r25
    31b8:	0e 5f       	subi	r16, 0xFE	; 254
    31ba:	1f 4f       	sbci	r17, 0xFF	; 255
    31bc:	f3 2d       	mov	r31, r3
    31be:	ff 76       	andi	r31, 0x6F	; 111
    31c0:	3f 2e       	mov	r3, r31
    31c2:	97 ff       	sbrs	r25, 7
    31c4:	09 c0       	rjmp	.+18     	; 0x31d8 <vfprintf+0x212>
    31c6:	90 95       	com	r25
    31c8:	80 95       	com	r24
    31ca:	70 95       	com	r23
    31cc:	61 95       	neg	r22
    31ce:	7f 4f       	sbci	r23, 0xFF	; 255
    31d0:	8f 4f       	sbci	r24, 0xFF	; 255
    31d2:	9f 4f       	sbci	r25, 0xFF	; 255
    31d4:	f0 68       	ori	r31, 0x80	; 128
    31d6:	3f 2e       	mov	r3, r31
    31d8:	2a e0       	ldi	r18, 0x0A	; 10
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	a3 01       	movw	r20, r6
    31de:	0e 94 16 1a 	call	0x342c	; 0x342c <__ultoa_invert>
    31e2:	88 2e       	mov	r8, r24
    31e4:	86 18       	sub	r8, r6
    31e6:	45 c0       	rjmp	.+138    	; 0x3272 <vfprintf+0x2ac>
    31e8:	85 37       	cpi	r24, 0x75	; 117
    31ea:	31 f4       	brne	.+12     	; 0x31f8 <vfprintf+0x232>
    31ec:	23 2d       	mov	r18, r3
    31ee:	2f 7e       	andi	r18, 0xEF	; 239
    31f0:	b2 2e       	mov	r11, r18
    31f2:	2a e0       	ldi	r18, 0x0A	; 10
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	25 c0       	rjmp	.+74     	; 0x3242 <vfprintf+0x27c>
    31f8:	93 2d       	mov	r25, r3
    31fa:	99 7f       	andi	r25, 0xF9	; 249
    31fc:	b9 2e       	mov	r11, r25
    31fe:	8f 36       	cpi	r24, 0x6F	; 111
    3200:	c1 f0       	breq	.+48     	; 0x3232 <vfprintf+0x26c>
    3202:	18 f4       	brcc	.+6      	; 0x320a <vfprintf+0x244>
    3204:	88 35       	cpi	r24, 0x58	; 88
    3206:	79 f0       	breq	.+30     	; 0x3226 <vfprintf+0x260>
    3208:	b5 c0       	rjmp	.+362    	; 0x3374 <vfprintf+0x3ae>
    320a:	80 37       	cpi	r24, 0x70	; 112
    320c:	19 f0       	breq	.+6      	; 0x3214 <vfprintf+0x24e>
    320e:	88 37       	cpi	r24, 0x78	; 120
    3210:	21 f0       	breq	.+8      	; 0x321a <vfprintf+0x254>
    3212:	b0 c0       	rjmp	.+352    	; 0x3374 <vfprintf+0x3ae>
    3214:	e9 2f       	mov	r30, r25
    3216:	e0 61       	ori	r30, 0x10	; 16
    3218:	be 2e       	mov	r11, r30
    321a:	b4 fe       	sbrs	r11, 4
    321c:	0d c0       	rjmp	.+26     	; 0x3238 <vfprintf+0x272>
    321e:	fb 2d       	mov	r31, r11
    3220:	f4 60       	ori	r31, 0x04	; 4
    3222:	bf 2e       	mov	r11, r31
    3224:	09 c0       	rjmp	.+18     	; 0x3238 <vfprintf+0x272>
    3226:	34 fe       	sbrs	r3, 4
    3228:	0a c0       	rjmp	.+20     	; 0x323e <vfprintf+0x278>
    322a:	29 2f       	mov	r18, r25
    322c:	26 60       	ori	r18, 0x06	; 6
    322e:	b2 2e       	mov	r11, r18
    3230:	06 c0       	rjmp	.+12     	; 0x323e <vfprintf+0x278>
    3232:	28 e0       	ldi	r18, 0x08	; 8
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	05 c0       	rjmp	.+10     	; 0x3242 <vfprintf+0x27c>
    3238:	20 e1       	ldi	r18, 0x10	; 16
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	02 c0       	rjmp	.+4      	; 0x3242 <vfprintf+0x27c>
    323e:	20 e1       	ldi	r18, 0x10	; 16
    3240:	32 e0       	ldi	r19, 0x02	; 2
    3242:	f8 01       	movw	r30, r16
    3244:	b7 fe       	sbrs	r11, 7
    3246:	07 c0       	rjmp	.+14     	; 0x3256 <vfprintf+0x290>
    3248:	60 81       	ld	r22, Z
    324a:	71 81       	ldd	r23, Z+1	; 0x01
    324c:	82 81       	ldd	r24, Z+2	; 0x02
    324e:	93 81       	ldd	r25, Z+3	; 0x03
    3250:	0c 5f       	subi	r16, 0xFC	; 252
    3252:	1f 4f       	sbci	r17, 0xFF	; 255
    3254:	06 c0       	rjmp	.+12     	; 0x3262 <vfprintf+0x29c>
    3256:	60 81       	ld	r22, Z
    3258:	71 81       	ldd	r23, Z+1	; 0x01
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	0e 5f       	subi	r16, 0xFE	; 254
    3260:	1f 4f       	sbci	r17, 0xFF	; 255
    3262:	a3 01       	movw	r20, r6
    3264:	0e 94 16 1a 	call	0x342c	; 0x342c <__ultoa_invert>
    3268:	88 2e       	mov	r8, r24
    326a:	86 18       	sub	r8, r6
    326c:	fb 2d       	mov	r31, r11
    326e:	ff 77       	andi	r31, 0x7F	; 127
    3270:	3f 2e       	mov	r3, r31
    3272:	36 fe       	sbrs	r3, 6
    3274:	0d c0       	rjmp	.+26     	; 0x3290 <vfprintf+0x2ca>
    3276:	23 2d       	mov	r18, r3
    3278:	2e 7f       	andi	r18, 0xFE	; 254
    327a:	a2 2e       	mov	r10, r18
    327c:	89 14       	cp	r8, r9
    327e:	58 f4       	brcc	.+22     	; 0x3296 <vfprintf+0x2d0>
    3280:	34 fe       	sbrs	r3, 4
    3282:	0b c0       	rjmp	.+22     	; 0x329a <vfprintf+0x2d4>
    3284:	32 fc       	sbrc	r3, 2
    3286:	09 c0       	rjmp	.+18     	; 0x329a <vfprintf+0x2d4>
    3288:	83 2d       	mov	r24, r3
    328a:	8e 7e       	andi	r24, 0xEE	; 238
    328c:	a8 2e       	mov	r10, r24
    328e:	05 c0       	rjmp	.+10     	; 0x329a <vfprintf+0x2d4>
    3290:	b8 2c       	mov	r11, r8
    3292:	a3 2c       	mov	r10, r3
    3294:	03 c0       	rjmp	.+6      	; 0x329c <vfprintf+0x2d6>
    3296:	b8 2c       	mov	r11, r8
    3298:	01 c0       	rjmp	.+2      	; 0x329c <vfprintf+0x2d6>
    329a:	b9 2c       	mov	r11, r9
    329c:	a4 fe       	sbrs	r10, 4
    329e:	0f c0       	rjmp	.+30     	; 0x32be <vfprintf+0x2f8>
    32a0:	fe 01       	movw	r30, r28
    32a2:	e8 0d       	add	r30, r8
    32a4:	f1 1d       	adc	r31, r1
    32a6:	80 81       	ld	r24, Z
    32a8:	80 33       	cpi	r24, 0x30	; 48
    32aa:	21 f4       	brne	.+8      	; 0x32b4 <vfprintf+0x2ee>
    32ac:	9a 2d       	mov	r25, r10
    32ae:	99 7e       	andi	r25, 0xE9	; 233
    32b0:	a9 2e       	mov	r10, r25
    32b2:	09 c0       	rjmp	.+18     	; 0x32c6 <vfprintf+0x300>
    32b4:	a2 fe       	sbrs	r10, 2
    32b6:	06 c0       	rjmp	.+12     	; 0x32c4 <vfprintf+0x2fe>
    32b8:	b3 94       	inc	r11
    32ba:	b3 94       	inc	r11
    32bc:	04 c0       	rjmp	.+8      	; 0x32c6 <vfprintf+0x300>
    32be:	8a 2d       	mov	r24, r10
    32c0:	86 78       	andi	r24, 0x86	; 134
    32c2:	09 f0       	breq	.+2      	; 0x32c6 <vfprintf+0x300>
    32c4:	b3 94       	inc	r11
    32c6:	a3 fc       	sbrc	r10, 3
    32c8:	11 c0       	rjmp	.+34     	; 0x32ec <vfprintf+0x326>
    32ca:	a0 fe       	sbrs	r10, 0
    32cc:	06 c0       	rjmp	.+12     	; 0x32da <vfprintf+0x314>
    32ce:	b2 14       	cp	r11, r2
    32d0:	88 f4       	brcc	.+34     	; 0x32f4 <vfprintf+0x32e>
    32d2:	28 0c       	add	r2, r8
    32d4:	92 2c       	mov	r9, r2
    32d6:	9b 18       	sub	r9, r11
    32d8:	0e c0       	rjmp	.+28     	; 0x32f6 <vfprintf+0x330>
    32da:	b2 14       	cp	r11, r2
    32dc:	60 f4       	brcc	.+24     	; 0x32f6 <vfprintf+0x330>
    32de:	b6 01       	movw	r22, r12
    32e0:	80 e2       	ldi	r24, 0x20	; 32
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	0e 94 da 19 	call	0x33b4	; 0x33b4 <fputc>
    32e8:	b3 94       	inc	r11
    32ea:	f7 cf       	rjmp	.-18     	; 0x32da <vfprintf+0x314>
    32ec:	b2 14       	cp	r11, r2
    32ee:	18 f4       	brcc	.+6      	; 0x32f6 <vfprintf+0x330>
    32f0:	2b 18       	sub	r2, r11
    32f2:	02 c0       	rjmp	.+4      	; 0x32f8 <vfprintf+0x332>
    32f4:	98 2c       	mov	r9, r8
    32f6:	21 2c       	mov	r2, r1
    32f8:	a4 fe       	sbrs	r10, 4
    32fa:	10 c0       	rjmp	.+32     	; 0x331c <vfprintf+0x356>
    32fc:	b6 01       	movw	r22, r12
    32fe:	80 e3       	ldi	r24, 0x30	; 48
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	0e 94 da 19 	call	0x33b4	; 0x33b4 <fputc>
    3306:	a2 fe       	sbrs	r10, 2
    3308:	17 c0       	rjmp	.+46     	; 0x3338 <vfprintf+0x372>
    330a:	a1 fc       	sbrc	r10, 1
    330c:	03 c0       	rjmp	.+6      	; 0x3314 <vfprintf+0x34e>
    330e:	88 e7       	ldi	r24, 0x78	; 120
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	02 c0       	rjmp	.+4      	; 0x3318 <vfprintf+0x352>
    3314:	88 e5       	ldi	r24, 0x58	; 88
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	b6 01       	movw	r22, r12
    331a:	0c c0       	rjmp	.+24     	; 0x3334 <vfprintf+0x36e>
    331c:	8a 2d       	mov	r24, r10
    331e:	86 78       	andi	r24, 0x86	; 134
    3320:	59 f0       	breq	.+22     	; 0x3338 <vfprintf+0x372>
    3322:	a1 fe       	sbrs	r10, 1
    3324:	02 c0       	rjmp	.+4      	; 0x332a <vfprintf+0x364>
    3326:	8b e2       	ldi	r24, 0x2B	; 43
    3328:	01 c0       	rjmp	.+2      	; 0x332c <vfprintf+0x366>
    332a:	80 e2       	ldi	r24, 0x20	; 32
    332c:	a7 fc       	sbrc	r10, 7
    332e:	8d e2       	ldi	r24, 0x2D	; 45
    3330:	b6 01       	movw	r22, r12
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	0e 94 da 19 	call	0x33b4	; 0x33b4 <fputc>
    3338:	89 14       	cp	r8, r9
    333a:	38 f4       	brcc	.+14     	; 0x334a <vfprintf+0x384>
    333c:	b6 01       	movw	r22, r12
    333e:	80 e3       	ldi	r24, 0x30	; 48
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	0e 94 da 19 	call	0x33b4	; 0x33b4 <fputc>
    3346:	9a 94       	dec	r9
    3348:	f7 cf       	rjmp	.-18     	; 0x3338 <vfprintf+0x372>
    334a:	8a 94       	dec	r8
    334c:	f3 01       	movw	r30, r6
    334e:	e8 0d       	add	r30, r8
    3350:	f1 1d       	adc	r31, r1
    3352:	80 81       	ld	r24, Z
    3354:	b6 01       	movw	r22, r12
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	0e 94 da 19 	call	0x33b4	; 0x33b4 <fputc>
    335c:	81 10       	cpse	r8, r1
    335e:	f5 cf       	rjmp	.-22     	; 0x334a <vfprintf+0x384>
    3360:	22 20       	and	r2, r2
    3362:	09 f4       	brne	.+2      	; 0x3366 <vfprintf+0x3a0>
    3364:	42 ce       	rjmp	.-892    	; 0x2fea <vfprintf+0x24>
    3366:	b6 01       	movw	r22, r12
    3368:	80 e2       	ldi	r24, 0x20	; 32
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	0e 94 da 19 	call	0x33b4	; 0x33b4 <fputc>
    3370:	2a 94       	dec	r2
    3372:	f6 cf       	rjmp	.-20     	; 0x3360 <vfprintf+0x39a>
    3374:	f6 01       	movw	r30, r12
    3376:	86 81       	ldd	r24, Z+6	; 0x06
    3378:	97 81       	ldd	r25, Z+7	; 0x07
    337a:	02 c0       	rjmp	.+4      	; 0x3380 <vfprintf+0x3ba>
    337c:	8f ef       	ldi	r24, 0xFF	; 255
    337e:	9f ef       	ldi	r25, 0xFF	; 255
    3380:	2b 96       	adiw	r28, 0x0b	; 11
    3382:	e2 e1       	ldi	r30, 0x12	; 18
    3384:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <__epilogue_restores__>

00003388 <strnlen_P>:
    3388:	fc 01       	movw	r30, r24
    338a:	05 90       	lpm	r0, Z+
    338c:	61 50       	subi	r22, 0x01	; 1
    338e:	70 40       	sbci	r23, 0x00	; 0
    3390:	01 10       	cpse	r0, r1
    3392:	d8 f7       	brcc	.-10     	; 0x338a <strnlen_P+0x2>
    3394:	80 95       	com	r24
    3396:	90 95       	com	r25
    3398:	8e 0f       	add	r24, r30
    339a:	9f 1f       	adc	r25, r31
    339c:	08 95       	ret

0000339e <strnlen>:
    339e:	fc 01       	movw	r30, r24
    33a0:	61 50       	subi	r22, 0x01	; 1
    33a2:	70 40       	sbci	r23, 0x00	; 0
    33a4:	01 90       	ld	r0, Z+
    33a6:	01 10       	cpse	r0, r1
    33a8:	d8 f7       	brcc	.-10     	; 0x33a0 <strnlen+0x2>
    33aa:	80 95       	com	r24
    33ac:	90 95       	com	r25
    33ae:	8e 0f       	add	r24, r30
    33b0:	9f 1f       	adc	r25, r31
    33b2:	08 95       	ret

000033b4 <fputc>:
    33b4:	0f 93       	push	r16
    33b6:	1f 93       	push	r17
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
    33bc:	fb 01       	movw	r30, r22
    33be:	23 81       	ldd	r18, Z+3	; 0x03
    33c0:	21 fd       	sbrc	r18, 1
    33c2:	03 c0       	rjmp	.+6      	; 0x33ca <fputc+0x16>
    33c4:	8f ef       	ldi	r24, 0xFF	; 255
    33c6:	9f ef       	ldi	r25, 0xFF	; 255
    33c8:	2c c0       	rjmp	.+88     	; 0x3422 <fputc+0x6e>
    33ca:	22 ff       	sbrs	r18, 2
    33cc:	16 c0       	rjmp	.+44     	; 0x33fa <fputc+0x46>
    33ce:	46 81       	ldd	r20, Z+6	; 0x06
    33d0:	57 81       	ldd	r21, Z+7	; 0x07
    33d2:	24 81       	ldd	r18, Z+4	; 0x04
    33d4:	35 81       	ldd	r19, Z+5	; 0x05
    33d6:	42 17       	cp	r20, r18
    33d8:	53 07       	cpc	r21, r19
    33da:	44 f4       	brge	.+16     	; 0x33ec <fputc+0x38>
    33dc:	a0 81       	ld	r26, Z
    33de:	b1 81       	ldd	r27, Z+1	; 0x01
    33e0:	9d 01       	movw	r18, r26
    33e2:	2f 5f       	subi	r18, 0xFF	; 255
    33e4:	3f 4f       	sbci	r19, 0xFF	; 255
    33e6:	31 83       	std	Z+1, r19	; 0x01
    33e8:	20 83       	st	Z, r18
    33ea:	8c 93       	st	X, r24
    33ec:	26 81       	ldd	r18, Z+6	; 0x06
    33ee:	37 81       	ldd	r19, Z+7	; 0x07
    33f0:	2f 5f       	subi	r18, 0xFF	; 255
    33f2:	3f 4f       	sbci	r19, 0xFF	; 255
    33f4:	37 83       	std	Z+7, r19	; 0x07
    33f6:	26 83       	std	Z+6, r18	; 0x06
    33f8:	14 c0       	rjmp	.+40     	; 0x3422 <fputc+0x6e>
    33fa:	8b 01       	movw	r16, r22
    33fc:	ec 01       	movw	r28, r24
    33fe:	fb 01       	movw	r30, r22
    3400:	00 84       	ldd	r0, Z+8	; 0x08
    3402:	f1 85       	ldd	r31, Z+9	; 0x09
    3404:	e0 2d       	mov	r30, r0
    3406:	09 95       	icall
    3408:	89 2b       	or	r24, r25
    340a:	e1 f6       	brne	.-72     	; 0x33c4 <fputc+0x10>
    340c:	d8 01       	movw	r26, r16
    340e:	16 96       	adiw	r26, 0x06	; 6
    3410:	8d 91       	ld	r24, X+
    3412:	9c 91       	ld	r25, X
    3414:	17 97       	sbiw	r26, 0x07	; 7
    3416:	01 96       	adiw	r24, 0x01	; 1
    3418:	17 96       	adiw	r26, 0x07	; 7
    341a:	9c 93       	st	X, r25
    341c:	8e 93       	st	-X, r24
    341e:	16 97       	sbiw	r26, 0x06	; 6
    3420:	ce 01       	movw	r24, r28
    3422:	df 91       	pop	r29
    3424:	cf 91       	pop	r28
    3426:	1f 91       	pop	r17
    3428:	0f 91       	pop	r16
    342a:	08 95       	ret

0000342c <__ultoa_invert>:
    342c:	fa 01       	movw	r30, r20
    342e:	aa 27       	eor	r26, r26
    3430:	28 30       	cpi	r18, 0x08	; 8
    3432:	51 f1       	breq	.+84     	; 0x3488 <__ultoa_invert+0x5c>
    3434:	20 31       	cpi	r18, 0x10	; 16
    3436:	81 f1       	breq	.+96     	; 0x3498 <__ultoa_invert+0x6c>
    3438:	e8 94       	clt
    343a:	6f 93       	push	r22
    343c:	6e 7f       	andi	r22, 0xFE	; 254
    343e:	6e 5f       	subi	r22, 0xFE	; 254
    3440:	7f 4f       	sbci	r23, 0xFF	; 255
    3442:	8f 4f       	sbci	r24, 0xFF	; 255
    3444:	9f 4f       	sbci	r25, 0xFF	; 255
    3446:	af 4f       	sbci	r26, 0xFF	; 255
    3448:	b1 e0       	ldi	r27, 0x01	; 1
    344a:	3e d0       	rcall	.+124    	; 0x34c8 <__ultoa_invert+0x9c>
    344c:	b4 e0       	ldi	r27, 0x04	; 4
    344e:	3c d0       	rcall	.+120    	; 0x34c8 <__ultoa_invert+0x9c>
    3450:	67 0f       	add	r22, r23
    3452:	78 1f       	adc	r23, r24
    3454:	89 1f       	adc	r24, r25
    3456:	9a 1f       	adc	r25, r26
    3458:	a1 1d       	adc	r26, r1
    345a:	68 0f       	add	r22, r24
    345c:	79 1f       	adc	r23, r25
    345e:	8a 1f       	adc	r24, r26
    3460:	91 1d       	adc	r25, r1
    3462:	a1 1d       	adc	r26, r1
    3464:	6a 0f       	add	r22, r26
    3466:	71 1d       	adc	r23, r1
    3468:	81 1d       	adc	r24, r1
    346a:	91 1d       	adc	r25, r1
    346c:	a1 1d       	adc	r26, r1
    346e:	20 d0       	rcall	.+64     	; 0x34b0 <__ultoa_invert+0x84>
    3470:	09 f4       	brne	.+2      	; 0x3474 <__ultoa_invert+0x48>
    3472:	68 94       	set
    3474:	3f 91       	pop	r19
    3476:	2a e0       	ldi	r18, 0x0A	; 10
    3478:	26 9f       	mul	r18, r22
    347a:	11 24       	eor	r1, r1
    347c:	30 19       	sub	r19, r0
    347e:	30 5d       	subi	r19, 0xD0	; 208
    3480:	31 93       	st	Z+, r19
    3482:	de f6       	brtc	.-74     	; 0x343a <__ultoa_invert+0xe>
    3484:	cf 01       	movw	r24, r30
    3486:	08 95       	ret
    3488:	46 2f       	mov	r20, r22
    348a:	47 70       	andi	r20, 0x07	; 7
    348c:	40 5d       	subi	r20, 0xD0	; 208
    348e:	41 93       	st	Z+, r20
    3490:	b3 e0       	ldi	r27, 0x03	; 3
    3492:	0f d0       	rcall	.+30     	; 0x34b2 <__ultoa_invert+0x86>
    3494:	c9 f7       	brne	.-14     	; 0x3488 <__ultoa_invert+0x5c>
    3496:	f6 cf       	rjmp	.-20     	; 0x3484 <__ultoa_invert+0x58>
    3498:	46 2f       	mov	r20, r22
    349a:	4f 70       	andi	r20, 0x0F	; 15
    349c:	40 5d       	subi	r20, 0xD0	; 208
    349e:	4a 33       	cpi	r20, 0x3A	; 58
    34a0:	18 f0       	brcs	.+6      	; 0x34a8 <__ultoa_invert+0x7c>
    34a2:	49 5d       	subi	r20, 0xD9	; 217
    34a4:	31 fd       	sbrc	r19, 1
    34a6:	40 52       	subi	r20, 0x20	; 32
    34a8:	41 93       	st	Z+, r20
    34aa:	02 d0       	rcall	.+4      	; 0x34b0 <__ultoa_invert+0x84>
    34ac:	a9 f7       	brne	.-22     	; 0x3498 <__ultoa_invert+0x6c>
    34ae:	ea cf       	rjmp	.-44     	; 0x3484 <__ultoa_invert+0x58>
    34b0:	b4 e0       	ldi	r27, 0x04	; 4
    34b2:	a6 95       	lsr	r26
    34b4:	97 95       	ror	r25
    34b6:	87 95       	ror	r24
    34b8:	77 95       	ror	r23
    34ba:	67 95       	ror	r22
    34bc:	ba 95       	dec	r27
    34be:	c9 f7       	brne	.-14     	; 0x34b2 <__ultoa_invert+0x86>
    34c0:	00 97       	sbiw	r24, 0x00	; 0
    34c2:	61 05       	cpc	r22, r1
    34c4:	71 05       	cpc	r23, r1
    34c6:	08 95       	ret
    34c8:	9b 01       	movw	r18, r22
    34ca:	ac 01       	movw	r20, r24
    34cc:	0a 2e       	mov	r0, r26
    34ce:	06 94       	lsr	r0
    34d0:	57 95       	ror	r21
    34d2:	47 95       	ror	r20
    34d4:	37 95       	ror	r19
    34d6:	27 95       	ror	r18
    34d8:	ba 95       	dec	r27
    34da:	c9 f7       	brne	.-14     	; 0x34ce <__ultoa_invert+0xa2>
    34dc:	62 0f       	add	r22, r18
    34de:	73 1f       	adc	r23, r19
    34e0:	84 1f       	adc	r24, r20
    34e2:	95 1f       	adc	r25, r21
    34e4:	a0 1d       	adc	r26, r0
    34e6:	08 95       	ret

000034e8 <__prologue_saves__>:
    34e8:	2f 92       	push	r2
    34ea:	3f 92       	push	r3
    34ec:	4f 92       	push	r4
    34ee:	5f 92       	push	r5
    34f0:	6f 92       	push	r6
    34f2:	7f 92       	push	r7
    34f4:	8f 92       	push	r8
    34f6:	9f 92       	push	r9
    34f8:	af 92       	push	r10
    34fa:	bf 92       	push	r11
    34fc:	cf 92       	push	r12
    34fe:	df 92       	push	r13
    3500:	ef 92       	push	r14
    3502:	ff 92       	push	r15
    3504:	0f 93       	push	r16
    3506:	1f 93       	push	r17
    3508:	cf 93       	push	r28
    350a:	df 93       	push	r29
    350c:	cd b7       	in	r28, 0x3d	; 61
    350e:	de b7       	in	r29, 0x3e	; 62
    3510:	ca 1b       	sub	r28, r26
    3512:	db 0b       	sbc	r29, r27
    3514:	0f b6       	in	r0, 0x3f	; 63
    3516:	f8 94       	cli
    3518:	de bf       	out	0x3e, r29	; 62
    351a:	0f be       	out	0x3f, r0	; 63
    351c:	cd bf       	out	0x3d, r28	; 61
    351e:	09 94       	ijmp

00003520 <__epilogue_restores__>:
    3520:	2a 88       	ldd	r2, Y+18	; 0x12
    3522:	39 88       	ldd	r3, Y+17	; 0x11
    3524:	48 88       	ldd	r4, Y+16	; 0x10
    3526:	5f 84       	ldd	r5, Y+15	; 0x0f
    3528:	6e 84       	ldd	r6, Y+14	; 0x0e
    352a:	7d 84       	ldd	r7, Y+13	; 0x0d
    352c:	8c 84       	ldd	r8, Y+12	; 0x0c
    352e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3530:	aa 84       	ldd	r10, Y+10	; 0x0a
    3532:	b9 84       	ldd	r11, Y+9	; 0x09
    3534:	c8 84       	ldd	r12, Y+8	; 0x08
    3536:	df 80       	ldd	r13, Y+7	; 0x07
    3538:	ee 80       	ldd	r14, Y+6	; 0x06
    353a:	fd 80       	ldd	r15, Y+5	; 0x05
    353c:	0c 81       	ldd	r16, Y+4	; 0x04
    353e:	1b 81       	ldd	r17, Y+3	; 0x03
    3540:	aa 81       	ldd	r26, Y+2	; 0x02
    3542:	b9 81       	ldd	r27, Y+1	; 0x01
    3544:	ce 0f       	add	r28, r30
    3546:	d1 1d       	adc	r29, r1
    3548:	0f b6       	in	r0, 0x3f	; 63
    354a:	f8 94       	cli
    354c:	de bf       	out	0x3e, r29	; 62
    354e:	0f be       	out	0x3f, r0	; 63
    3550:	cd bf       	out	0x3d, r28	; 61
    3552:	ed 01       	movw	r28, r26
    3554:	08 95       	ret

00003556 <_exit>:
    3556:	f8 94       	cli

00003558 <__stop_program>:
    3558:	ff cf       	rjmp	.-2      	; 0x3558 <__stop_program>
