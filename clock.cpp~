#include <avr/io.h>
#include <avr/interrupt.h>

#include "clock.h"

// declare the static var 
volatile uint8_t Clock::ctick = 0;

//
// tick isr
//
ISR( TIMER1_COMPA_vect ) {
  Clock::setTick();
}


//
// set the tic event count
//
void Clock::setTick(void) {
  ctick++;;
}


//
// return number of ticks that occurred
//
uint8_t Clock::getTick(void) {
  return ctick;
}


//
// clear out the tick event count
//
void Clock::clrTick(void) {
  ctick = 0;
}

//
// constructor
//
Clock::Clock(void) {
  cli();
  TCCR1A  = 0;                          // wgm10 = 0, no outputs
  TCCR1B = (1 << CS11) | (1 << WGM12);   // clock divide by 8, WGM30 = 4, CTC mode
  TCCR1C = 0;
  TCNT1H = 0;
  TCNT1L = 0;
  OCR1A =  0x4e1f;                      // divide by 20000, 10 msec, do this last!!
  TIMSK1 = (1 << OCIE1A);               // enable compare register 1 int
  ctick = 0;
  sei();
}



